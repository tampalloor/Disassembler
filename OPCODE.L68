00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/3/2023 1:37:47 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OPTCODES
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12    
00001000                            13  *Used registers:
00001000                            14  *A4,A5,A6 = (counter, last opcode, curr opcode)
00001000                            15  *$0 in memory is where the string inputs are temporarily stored
00001000                            16  *-------------------------------------------*
00001000                            17  *------------------MAIN---------------------*
00001000                            18  *-------------------------------------------*
00001000                            19  
00001000  43F9 00005ED2             20                 LEA      WELCOME,A1
00001006  103C 000D                 21                 MOVE.B   #13,D0
0000100A  4E4F                      22                 TRAP     #15 
0000100C                            23  
0000100C                            24  *---------Read and store --------------
0000100C  43F9 00005F12             25  GETADDR1        LEA     ENTADDR1,A1
00001012  103C 000E                 26                  MOVE.B  #14,D0
00001016  4E4F                      27                  TRAP    #15
00001018  43F8 0000                 28                  LEA     $0,A1
0000101C  103C 0002                 29                  MOVE.B  #2, D0
00001020  4E4F                      30                  TRAP    #15
00001022  2C49                      31                  MOVE.L  A1,A6
00001024                            32                  
00001024  7800                      33                  MOVE.L   #0,D4 *wipe saved numbers here
00001026  7600                      34                  MOVE.L   #0,D3
00001028                            35                  
00001028  B23C 0000                 36                  CMP.B   #0,D1
0000102C  6700 3262                 37                  BEQ     INPUTERROR *address is zero chars long
00001030  B23C 0008                 38                  CMP.B   #8,D1
00001034  6E00 325A                 39                  BGT     INPUTERROR *address is too large
00001038                            40  
00001038                            41  *ASCII TO HEX CONVERTER TM                            
00001038  E984                      42  ASCIILOOP1      ASL.L   #4,D4 *shift by one hex value (not byte)
0000103A  4E71                      43                  NOP
0000103C  D803                      44                  ADD.B   D3,D4 *add previous hex value to result
0000103E  4E71                      45                  NOP
00001040  1611                      46                  MOVE.B  (A1),D3 *get next ascii value
00001042  4E71                      47                  NOP
00001044  5289                      48                  ADD.L   #1,A1 *get next byte
00001046  B23C 0000                 49                  CMP.B   #0,D1 *check if at end of string
0000104A  6700 003C                 50                  BEQ     GETADDR2 *if so, conversion is complete
0000104E  5301                      51                  SUB.B   #1,D1 *subtract size
00001050                            52                  
00001050                            53                  *check its hexadecimal equvialent
00001050  B63C 0030                 54                  CMP.B   #$30,D3 *0 in ascii
00001054  6D00 323A                 55                  BLT     INPUTERROR *invalid character
00001058  B63C 003A                 56                  CMP.B   #$3A,D3 *: in ascii
0000105C  6D00 0016                 57                  BLT     ASCIINUM1 *byte is 0-9
00001060  B63C 0041                 58                  CMP.B   #$41,D3 *A in ascii
00001064  6D00 322A                 59                  BLT     INPUTERROR *invalid character
00001068  B63C 0047                 60                  CMP.B   #$47,D3 *G in ascii
0000106C  6D00 000C                 61                  BLT     ASCIICHAR1 *byte is A-F
00001070  6000 321E                 62                  BRA     INPUTERROR *invalid character
00001074                            63  
00001074  0403 0030                 64  ASCIINUM1       SUB.B   #$30,D3
00001078  60BE                      65                  BRA     ASCIILOOP1
0000107A                            66  
0000107A  0403 0037                 67  ASCIICHAR1      SUB.B   #$37,D3
0000107E  60B8                      68                  BRA     ASCIILOOP1
00001080                            69                  
00001080  528E                      70  MAKEADDR1EVEN   ADD.L   #1,A6
00001082  4E71                      71                  NOP
00001084  280E                      72                  MOVE.L  A6,D4
00001086  4E71                      73                  NOP                
00001088                            74  
00001088  2C44                      75  GETADDR2        MOVE.L  D4,A6 *save lower bound; get ready for second
0000108A  163C 0001                 76                  MOVE.B  #1,D3 *check if address is odd
0000108E  C803                      77                  AND.B   D3,D4
00001090  B83C 0001                 78                  CMP.B   #1,D4
00001094  67EA                      79                  BEQ     MAKEADDR1EVEN
00001096  4E71                      80                  NOP
00001098  7800                      81                  MOVE.L  #0,D4 *wipe saved numbers here
0000109A  7600                      82                  MOVE.L  #0,D3             
0000109C                            83               
0000109C                            84  *---------Read and store --------------
0000109C  43F9 00005F5D             85                  LEA     ENTADDR2,A1
000010A2  103C 000E                 86                  MOVE.B  #14,D0
000010A6  4E4F                      87                  TRAP    #15
000010A8  43F8 0000                 88                  LEA     $0,A1
000010AC  103C 0002                 89                  MOVE.B  #2, D0
000010B0  4E4F                      90                  TRAP    #15
000010B2  2A49                      91                  MOVE.L  A1,A5
000010B4                            92  
000010B4  B23C 0000                 93                  CMP.B   #0,D1
000010B8  6700 31D6                 94                  BEQ     INPUTERROR *address is zero chars long    
000010BC  B23C 0008                 95                  CMP.B   #8,D1
000010C0  6E00 31CE                 96                  BGT     INPUTERROR *address is too large            
000010C4                            97  
000010C4                            98  *ASCII TO HEX CONVERTER TM  
000010C4  E984                      99  ASCIILOOP2      ASL.L   #4,D4 *shift by one hex value (not byte)
000010C6  4E71                     100                  NOP
000010C8  D803                     101                  ADD.B   D3,D4 *add previous hex value to result
000010CA  4E71                     102                  NOP
000010CC  1611                     103                  MOVE.B  (A1),D3 *get next ascii value
000010CE  4E71                     104                  NOP
000010D0  5289                     105                  ADD.L   #1,A1 *get next byte
000010D2  B23C 0000                106                  CMP.B   #0,D1 *check if at end of string
000010D6  6700 0034                107                  BEQ     FINISHADDR2 *if so, conversion is complete
000010DA  5301                     108                  SUB.B   #1,D1 *subtract size
000010DC                           109                  
000010DC                           110                  *check its hexadecimal equvialent
000010DC  B63C 0030                111                  CMP.B   #$30,D3 *0 in ascii
000010E0  6D00 31AE                112                  BLT     INPUTERROR *invalid character
000010E4  B63C 003A                113                  CMP.B   #$3A,D3 *: in ascii
000010E8  6D00 0016                114                  BLT     ASCIINUM2 *byte is 0-9
000010EC  B63C 0041                115                  CMP.B   #$41,D3 *A in ascii
000010F0  6D00 319E                116                  BLT     INPUTERROR *invalid character
000010F4  B63C 0047                117                  CMP.B   #$47,D3 *G in ascii
000010F8  6D00 000C                118                  BLT     ASCIICHAR2 *byte is A-F
000010FC  6000 3192                119                  BRA     INPUTERROR *invalid character                
00001100                           120  
00001100  0403 0030                121  ASCIINUM2       SUB.B   #$30,D3
00001104  60BE                     122                  BRA     ASCIILOOP2
00001106                           123  
00001106  0403 0037                124  ASCIICHAR2      SUB.B   #$37,D3
0000110A  60B8                     125                  BRA     ASCIILOOP2    
0000110C                           126  
0000110C  2A44                     127  FINISHADDR2     MOVE.L  D4,A5
0000110E                           128  
0000110E                           129                  *error checking
0000110E  BBCE                     130                  CMP.L   A6,A5
00001110  6D00 317E                131                  BLT     INPUTERROR *Destination < source
00001114  BBF9 01000000            132                  CMP.L   $01000000,A5
0000111A  6E00 3174                133                  BGT     INPUTERROR *exceeds memory limit
0000111E  BDF9 01000000            134                  CMP.L   $01000000,A6
00001124  6E00 316A                135                  BGT     INPUTERROR *exceeds memory limit
00001128                           136                  
00001128  6100 4D46                137                  BSR     FLUSH
0000112C  7800                     138                  MOVE.L  #0,D4 
0000112E  387C 001F                139                  MOVE.W  #31,A4          
00001132                           140  
00001132                           141  *-------------------------------------------*
00001132                           142  *--------------OP CODES---------------------*
00001132                           143  *-------------------------------------------*
00001132                           144  
00001132  B8FC 0000                145  CONTINUE        CMP.W   #0,A4
00001136  6700 4D1E                146                  BEQ     NEXTPAGE
0000113A  BBCE                     147                  CMP.L   A6,A5
0000113C  6D00 311C                148                  BLT     RESTART
00001140                           149                  
00001140                           150                  *print current address
00001140  43F9 00005EAB            151                  LEA     DOLLAR,A1
00001146  6100 4D06                152                  BSR     PRINTSTR
0000114A  263C F0000000            153                  MOVE.L  #$F0000000,D3 *masking for zeroes
00001150  6100 4D2A                154                  BSR     PRINTZEROES
00001154  220E                     155                  MOVE.L  A6,D1
00001156  143C 0010                156                  MOVE.B  #16,D2
0000115A  103C 000F                157                  MOVE.B  #15,D0
0000115E  4E4F                     158                  TRAP    #15
00001160  43F9 00005EA6            159                  LEA     TB,A1
00001166  6100 4CE6                160                  BSR     PRINTSTR            
0000116A                           161                  
0000116A  534C                     162                  SUB.W   #1,A4
0000116C                           163                  *ADD.L   #4,A6 *adds to address pointer. If you're already handling it just delete it
0000116C                           164                  
0000116C                           165  *-------------------------------------------*
0000116C                           166  *------------INSERT CODE HERE---------------*
0000116C                           167  *-------------------------------------------*                
0000116C                           168   
0000116C                           169  *MOVEQ
0000116C                           170  * we will mask the instruction, and if
0000116C                           171  * the result matches a pattern for MOVE, we have a valid optcode :D
0000116C                           172  * if not we will have to check the rest of the optcodes
0000116C  41F9 00007000            173   LEA MOVEQ_V, A0 * the mask     Note: there is no GENERAL code for MOVEQ because there is no invalid addressing modes
00001172                           174   
00001172  3416                     175    MOVE.W (A6), D2
00001174  45F9 000000FF            176   LEA MOVEQ_D , A2 * mask to isolate the first operand
0000117A  47F9 00000E00            177   LEA MOVEQ_R , A3 * mask to isolate the second operand
00001180                           178   
00001180  123C 0010                179   MOVE.B #16, D1                 * we need to shift the mask so it works with longs
00001184  2A08                     180    MOVE.L A0, D5
00001186  E3AD                     181    LSL.L D1, D5
00001188  2045                     182    MOVE.L D5, A0
0000118A                           183     *perform the masking
0000118A  2608                     184   MOVE.L A0, D3
0000118C  2802                     185   MOVE.L D2, D4
0000118E  4E71                     186   NOP
00001190  E3AC                     187   LSL.L D1,D4
00001192  4E71                     188   NOP
00001194  C883                     189   AND.L D3, D4
00001196                           190  
00001196  43F9 00007000            191   LEA MOVEQ_V, A1 * MOVE BYTE from Dn to DN
0000119C  2A09                     192   MOVE.L A1, D5
0000119E  123C 0010                193   MOVE.B #16, D1
000011A2  4E71                     194   NOP
000011A4  E3AD                     195   LSL.L D1, D5
000011A6  B885                     196   CMP.L D5, D4 
000011A8  6700 2CEA                197   BEQ MOVEQD_D
000011AC                           198  
000011AC                           199  
000011AC                           200  * MOVE
000011AC                           201  * we will mask the instruction, and if
000011AC                           202  * the result matches a pattern for MOVE, we have a valid optcode :D
000011AC                           203  * if not we will have to check the rest of the optcodes
000011AC  45F9 0000C000            204  CHECK_MOVEs    LEA   GENERAL_MOVE_MASK, A2   *Get General Mask
000011B2                           205  
000011B2  360A                     206      MOVE.W A2, D3       *Move mask to D3
000011B4                           207  
000011B4  3816                     208      MOVE.W (A6), D4  *Get opcode from memory to D4
000011B6                           209  
000011B6  C843                     210      AND.W  D3, D4       *Mask Opcode
000011B8                           211  
000011B8  45F9 00000000            212      LEA    GENERAL_MOVE, A2    *Get General MOVE Opcode
000011BE                           213  
000011BE  3A0A                     214      MOVE.W  A2, D5      *Move GENERAL MOVE Opcode to D5
000011C0                           215  
000011C0  B845                     216      CMP.W   D5, D4      *Compare Opcode with GENERAL MOVE
000011C2                           217  
000011C2  6600 0CEA                218      BNE     CHECK_MOVEAs     *If not Equal, Proceed to next instruction (MOVEA)
000011C6                           219      
000011C6                           220      
000011C6                           221  * Else, check MOVE varaints
000011C6                           222  
000011C6  41F9 0000F1F8            223   LEA MMASK, A0 * the mask
000011CC                           224   
000011CC                           225   
000011CC  3416                     226    MOVE.W (A6), D2
000011CE  45F9 00000007            227   LEA MVALUEMASK1 , A2 * mask to isolate the first operand
000011D4  47F9 00000E00            228   LEA MVALUEMASK2 , A3 * mask to isolate the second operand
000011DA                           229   
000011DA  123C 0010                230   MOVE.B #16, D1                 * we need to shift the mask so it works with longs
000011DE  2A08                     231    MOVE.L A0, D5
000011E0  E3AD                     232    LSL.L D1, D5
000011E2  2045                     233    MOVE.L D5, A0
000011E4                           234     *perform the masking
000011E4  2608                     235   MOVE.L A0, D3
000011E6  2802                     236   MOVE.L D2, D4
000011E8  4E71                     237   NOP
000011EA  E3AC                     238   LSL.L D1,D4
000011EC  4E71                     239   NOP
000011EE  C883                     240   AND.L D3, D4
000011F0                           241  
000011F0                           242  * start comparing all possible MOVE variants* 
000011F0                           243  
000011F0  43F9 00001000            244   LEA MOVEBDD, A1 * MOVE BYTE from Dn to DN
000011F6  2A09                     245   MOVE.L A1, D5
000011F8  123C 0010                246   MOVE.B #16, D1
000011FC  4E71                     247   NOP
000011FE  E3AD                     248   LSL.L D1, D5
00001200  B885                     249   CMP.L D5, D4 
00001202  6700 273E                250   BEQ MOVEBDD_D
00001206                           251  
00001206                           252   *LEA MOVEBAD, A1 * MOVE BYTE from AN to DN
00001206                           253   *MOVE.L A1, D5
00001206                           254   *CMP.L D5, A1
00001206                           255   *BEQ MOVEBAD_D
00001206                           256  
00001206  43F9 00003008            257   LEA MOVEWAD, A1 * MOVE WORD from AN to DN
0000120C  2A09                     258   MOVE.L A1, D5
0000120E  123C 0010                259   MOVE.B #16, D1
00001212  4E71                     260   NOP
00001214  E3AD                     261   LSL.L D1, D5
00001216  B885                     262   CMP.L D5, D4
00001218  6700 2748                263   BEQ MOVEWAD_D
0000121C                           264   
0000121C  43F9 00002008            265    LEA MOVELAD, A1 * MOVE LONG from AN to DN
00001222  2A09                     266   MOVE.L A1, D5
00001224  123C 0010                267   MOVE.B #16, D1
00001228  4E71                     268   NOP
0000122A  E3AD                     269   LSL.L D1, D5
0000122C  B885                     270   CMP.L D5, D4
0000122E  6700 273A                271   BEQ MOVELAD_D
00001232                           272  
00001232                           273  
00001232  43F9 00003000            274   LEA MOVEWDD, A1 * MOVE WORD from DN to DN
00001238  2A09                     275   MOVE.L A1, D5
0000123A  123C 0010                276    MOVE.B #16, D1
0000123E  4E71                     277   NOP
00001240  E3AD                     278   LSL.L D1, D5
00001242  B885                     279   CMP.L D5, D4
00001244  6700 2704                280   BEQ MOVEWDD_D
00001248                           281  
00001248                           282  
00001248  43F9 00002000            283   LEA MOVELDD, A1 *MOVE LONG from DN to DN
0000124E  2A09                     284   MOVE.L A1, D5
00001250  123C 0010                285   MOVE.B #16, D1
00001254  4E71                     286   NOP
00001256  E3AD                     287   LSL.L D1, D5
00001258  B885                     288   CMP.L D5, D4 
0000125A  6700 26F6                289   BEQ MOVELDD_D
0000125E                           290  
0000125E                           291  
0000125E  43F9 00001080            292   LEA MOVEBDAI, A1 *MOVE BYTE from DN to (AN)
00001264  2A09                     293   MOVE.L A1, D5
00001266  123C 0010                294   MOVE.B #16, D1
0000126A  4E71                     295   NOP
0000126C  E3AD                     296   LSL.L D1, D5
0000126E  B885                     297   CMP.L D5, D4
00001270  6700 27AE                298   BEQ MOVEBDAI_D
00001274                           299  
00001274                           300  
00001274  43F9 00003080            301   LEA MOVEWDAI, A1 *MOVE WORD from DN to (AN)
0000127A  2A09                     302   MOVE.L A1, D5
0000127C  123C 0010                303   MOVE.B #16, D1
00001280  4E71                     304   NOP
00001282  E3AD                     305   LSL.L D1, D5
00001284  B885                     306   CMP.L D5, D4
00001286  6700 27A0                307   BEQ MOVEWDAI_D
0000128A                           308  
0000128A                           309  
0000128A  43F9 00002080            310   LEA MOVELDAI, A1 *MOVE LONG from DN to (AN)
00001290  2A09                     311   MOVE.L A1, D5
00001292  123C 0010                312    MOVE.B #16, D1
00001296  4E71                     313   NOP
00001298  E3AD                     314   LSL.L D1, D5
0000129A  B885                     315   CMP.L D5, D4
0000129C  6700 2792                316   BEQ MOVELDAI_D
000012A0                           317  
000012A0  43F9 00003008            318   LEA MOVEWAD, A1 *MOVE WORD AN to DN
000012A6  2A09                     319   MOVE.L A1, D5
000012A8  123C 0010                320    MOVE.B #16, D1
000012AC  4E71                     321   NOP
000012AE  E3AD                     322   LSL.L D1, D5
000012B0  B885                     323   CMP.L D5, D4
000012B2  6700 26AE                324   BEQ MOVEWAD_D
000012B6                           325  
000012B6  43F9 00002008            326   LEA MOVELAD, A1 *MOVE LONG AN to DN
000012BC  2A09                     327   MOVE.L A1, D5
000012BE  123C 0010                328    MOVE.B #16, D1
000012C2  4E71                     329   NOP
000012C4  E3AD                     330   LSL.L D1, D5
000012C6  B885                     331   CMP.L D5, D4
000012C8  6700 26A0                332   BEQ MOVELAD_D
000012CC                           333   
000012CC  43F9 00001010            334    LEA MOVEBAID, A1 *MOVE BYTE (AN) to DN
000012D2  2A09                     335   MOVE.L A1, D5
000012D4  123C 0010                336    MOVE.B #16, D1
000012D8  4E71                     337   NOP
000012DA  E3AD                     338   LSL.L D1, D5
000012DC  B885                     339   CMP.L D5, D4
000012DE  6700 2692                340   BEQ MOVEBAID_D
000012E2                           341   
000012E2  43F9 00003010            342     LEA MOVEWAID, A1 *MOVE WORD (AN) to DN
000012E8  2A09                     343   MOVE.L A1, D5
000012EA  123C 0010                344    MOVE.B #16, D1
000012EE  4E71                     345   NOP
000012F0  E3AD                     346   LSL.L D1, D5
000012F2  B885                     347   CMP.L D5, D4
000012F4  6700 2684                348   BEQ MOVEWAID_D
000012F8                           349   
000012F8  43F9 00002010            350     LEA MOVELAID, A1 *MOVE LONG (AN) to DN
000012FE  2A09                     351   MOVE.L A1, D5
00001300  123C 0010                352    MOVE.B #16, D1
00001304  4E71                     353   NOP
00001306  E3AD                     354   LSL.L D1, D5
00001308  B885                     355   CMP.L D5, D4
0000130A  6700 2676                356   BEQ MOVELAID_D
0000130E                           357   
0000130E  43F9 00001018            358    LEA MOVEBAPID, A1 *MOVE BYTE  (AN)+  to DN
00001314  2A09                     359   MOVE.L A1, D5
00001316  123C 0010                360    MOVE.B #16, D1
0000131A  4E71                     361   NOP
0000131C  E3AD                     362   LSL.L D1, D5
0000131E  B885                     363   CMP.L D5, D4
00001320  6700 2668                364   BEQ MOVEBAPID_D
00001324                           365   
00001324                           366   
00001324  43F9 00003018            367    LEA MOVEWAPID, A1 *MOVE WORD (AN)+ to DN
0000132A  2A09                     368   MOVE.L A1, D5
0000132C  123C 0010                369    MOVE.B #16, D1
00001330  4E71                     370   NOP
00001332  E3AD                     371   LSL.L D1, D5
00001334  B885                     372   CMP.L D5, D4
00001336  6700 265A                373   BEQ MOVEWAPID_D
0000133A                           374   
0000133A                           375   
0000133A  43F9 00002018            376    LEA MOVELAPID, A1 *MOVE LONG (AN)+ to DN
00001340  2A09                     377   MOVE.L A1, D5
00001342  123C 0010                378    MOVE.B #16, D1
00001346  4E71                     379   NOP
00001348  E3AD                     380   LSL.L D1, D5
0000134A  B885                     381   CMP.L D5, D4
0000134C  6700 264C                382   BEQ MOVELAPID_D
00001350                           383   
00001350  43F9 00001020            384    LEA MOVEBADD, A1 *MOVE BYTE -(AN) to DN
00001356  2A09                     385   MOVE.L A1, D5
00001358  123C 0010                386    MOVE.B #16, D1
0000135C  4E71                     387   NOP
0000135E  E3AD                     388   LSL.L D1, D5
00001360  B885                     389   CMP.L D5, D4
00001362  6700 263E                390   BEQ MOVEBADD_D
00001366                           391   
00001366  43F9 00003020            392     LEA MOVEWADD, A1 *MOVE WORD -(AN) to DN
0000136C  2A09                     393   MOVE.L A1, D5
0000136E  123C 0010                394    MOVE.B #16, D1
00001372  4E71                     395   NOP
00001374  E3AD                     396   LSL.L D1, D5
00001376  B885                     397   CMP.L D5, D4
00001378  6700 2630                398   BEQ MOVEWADD_D
0000137C                           399   
0000137C  43F9 00002020            400     LEA MOVELADD, A1 *MOVE LONG -(AN) to DN
00001382  2A09                     401   MOVE.L A1, D5
00001384  123C 0010                402    MOVE.B #16, D1
00001388  4E71                     403   NOP
0000138A  E3AD                     404   LSL.L D1, D5
0000138C  B885                     405   CMP.L D5, D4
0000138E  6700 2622                406   BEQ MOVELADD_D
00001392                           407   
00001392  43F9 00001038            408    LEA MOVEBWRDD, A1 *MOVE BYTE (XXX).W to DN
00001398  2A09                     409   MOVE.L A1, D5
0000139A  123C 0010                410    MOVE.B #16, D1
0000139E  4E71                     411   NOP
000013A0  E3AD                     412   LSL.L D1, D5
000013A2  B885                     413   CMP.L D5, D4
000013A4  6700 2614                414   BEQ MOVEBWRDD_D
000013A8                           415   
000013A8  43F9 00003038            416     LEA MOVEWWRDD, A1 *MOVE WORD (XXX).W to DN
000013AE  2A09                     417   MOVE.L A1, D5
000013B0  123C 0010                418    MOVE.B #16, D1
000013B4  4E71                     419   NOP
000013B6  E3AD                     420   LSL.L D1, D5
000013B8  B885                     421   CMP.L D5, D4
000013BA  6700 2608                422   BEQ MOVEWWRDD_D
000013BE                           423   
000013BE  43F9 00002038            424     LEA MOVELWRDD, A1 *MOVE LONG (XXX).W to DN
000013C4  2A09                     425   MOVE.L A1, D5
000013C6  123C 0010                426    MOVE.B #16, D1
000013CA  4E71                     427   NOP
000013CC  E3AD                     428   LSL.L D1, D5
000013CE  B885                     429   CMP.L D5, D4
000013D0  6700 25FC                430   BEQ MOVELWRDD_D
000013D4                           431   
000013D4  43F9 00001039            432    LEA MOVEBLNGD, A1 *MOVE BYTE  (XXX).L to DN
000013DA  2A09                     433   MOVE.L A1, D5
000013DC  123C 0010                434    MOVE.B #16, D1
000013E0  4E71                     435   NOP
000013E2  E3AD                     436   LSL.L D1, D5
000013E4  B885                     437   CMP.L D5, D4
000013E6  6700 25F0                438   BEQ MOVEBLNGD_D
000013EA                           439   
000013EA  43F9 00003039            440     LEA MOVEWLNGD, A1 *MOVE WORD  (XXX).L to DN
000013F0  2A09                     441   MOVE.L A1, D5
000013F2  123C 0010                442    MOVE.B #16, D1
000013F6  4E71                     443   NOP
000013F8  E3AD                     444   LSL.L D1, D5
000013FA  B885                     445   CMP.L D5, D4
000013FC  6700 25E4                446   BEQ MOVEWLNGD_D
00001400                           447   
00001400                           448   
00001400  43F9 00002039            449    LEA MOVELLNGD, A1 *MOVE LONG  (XXX).L to DN
00001406  2A09                     450   MOVE.L A1, D5
00001408  123C 0010                451    MOVE.B #16, D1
0000140C  4E71                     452   NOP
0000140E  E3AD                     453   LSL.L D1, D5
00001410  B885                     454   CMP.L D5, D4
00001412  6700 25D8                455   BEQ MOVELLNGD_D
00001416                           456   
00001416  43F9 0000103C            457   LEA MOVEBIMD, A1 *MOVE byte immidate  to DN
0000141C  2A09                     458   MOVE.L A1, D5
0000141E  123C 0010                459    MOVE.B #16, D1
00001422  4E71                     460   NOP
00001424  E3AD                     461   LSL.L D1, D5
00001426  B885                     462   CMP.L D5, D4
00001428  6700 25CC                463   BEQ MOVEBIMD_D
0000142C                           464   
0000142C  43F9 0000303C            465    LEA MOVEWIMD, A1 *MOVE word immidate  to DN
00001432  2A09                     466   MOVE.L A1, D5
00001434  123C 0010                467    MOVE.B #16, D1
00001438  4E71                     468   NOP
0000143A  E3AD                     469   LSL.L D1, D5
0000143C  B885                     470   CMP.L D5, D4
0000143E  6700 25C4                471   BEQ MOVEWIMD_D
00001442                           472   
00001442  43F9 0000203C            473    LEA MOVELIMD, A1 *MOVE long immidate  to DN
00001448  2A09                     474   MOVE.L A1, D5
0000144A  123C 0010                475    MOVE.B #16, D1
0000144E  4E71                     476   NOP
00001450  E3AD                     477   LSL.L D1, D5
00001452  B885                     478   CMP.L D5, D4
00001454  6700 25BC                479   BEQ MOVELIMD_D
00001458                           480   
00001458  43F9 00001080            481     LEA MOVEBDAI, A1 *MOVE byte DN to (AN)
0000145E  2A09                     482   MOVE.L A1, D5
00001460  123C 0010                483    MOVE.B #16, D1
00001464  4E71                     484   NOP
00001466  E3AD                     485   LSL.L D1, D5
00001468  B885                     486   CMP.L D5, D4
0000146A  6700 25B4                487   BEQ MOVEBDAI_D
0000146E                           488   
0000146E  43F9 00003080            489      LEA MOVEWDAI, A1 *MOVE word DN to (AN)
00001474  2A09                     490   MOVE.L A1, D5
00001476  123C 0010                491    MOVE.B #16, D1
0000147A  4E71                     492   NOP
0000147C  E3AD                     493   LSL.L D1, D5
0000147E  B885                     494   CMP.L D5, D4
00001480  6700 25A6                495   BEQ MOVEWDAI_D
00001484                           496   
00001484                           497   
00001484  43F9 00002080            498      LEA MOVELDAI, A1 *MOVE long DN to (AN)
0000148A  2A09                     499   MOVE.L A1, D5
0000148C  123C 0010                500    MOVE.B #16, D1
00001490  4E71                     501   NOP
00001492  E3AD                     502   LSL.L D1, D5
00001494  B885                     503   CMP.L D5, D4
00001496  6700 2598                504   BEQ MOVELDAI_D
0000149A                           505   
0000149A                           506   
0000149A  43F9 00001088            507    LEA MOVEBAAI, A1 *MOVE byte AN to (AN)
000014A0  2A09                     508   MOVE.L A1, D5
000014A2  123C 0010                509    MOVE.B #16, D1
000014A6  4E71                     510   NOP
000014A8  E3AD                     511   LSL.L D1, D5
000014AA  B885                     512   CMP.L D5, D4
000014AC  6700 258A                513   BEQ MOVEBAAI_D
000014B0                           514   
000014B0  43F9 00003088            515    LEA MOVEWAAI, A1 *MOVE word AN to (AN)
000014B6  2A09                     516   MOVE.L A1, D5
000014B8  123C 0010                517    MOVE.B #16, D1
000014BC  4E71                     518   NOP
000014BE  E3AD                     519   LSL.L D1, D5
000014C0  B885                     520   CMP.L D5, D4
000014C2  6700 257C                521   BEQ MOVEWAAI_D
000014C6                           522   
000014C6  43F9 00002088            523     LEA MOVELAAI, A1 *MOVE long AN to (AN)
000014CC  2A09                     524   MOVE.L A1, D5
000014CE  123C 0010                525    MOVE.B #16, D1
000014D2  4E71                     526   NOP
000014D4  E3AD                     527   LSL.L D1, D5
000014D6  B885                     528   CMP.L D5, D4
000014D8  6700 256E                529   BEQ MOVELAAI_D
000014DC                           530   
000014DC  43F9 00001048            531     LEA MOVEBAI, A1 *MOVE byte  (AN) to (AN)
000014E2  2A09                     532   MOVE.L A1, D5
000014E4  123C 0010                533    MOVE.B #16, D1
000014E8  4E71                     534   NOP
000014EA  E3AD                     535   LSL.L D1, D5
000014EC  B885                     536   CMP.L D5, D4
000014EE  6700 2560                537   BEQ MOVEBAI_D
000014F2                           538   
000014F2  43F9 00003048            539    LEA MOVEWAI, A1 *MOVE word  (AN) to (AN)
000014F8  2A09                     540   MOVE.L A1, D5
000014FA  123C 0010                541    MOVE.B #16, D1
000014FE  4E71                     542   NOP
00001500  E3AD                     543   LSL.L D1, D5
00001502  B885                     544   CMP.L D5, D4
00001504  6700 2552                545   BEQ MOVEWAI_D
00001508                           546   
00001508  43F9 00002048            547    LEA MOVELAI, A1 *MOVE long  (AN) to (AN)
0000150E  2A09                     548   MOVE.L A1, D5
00001510  123C 0010                549    MOVE.B #16, D1
00001514  4E71                     550   NOP
00001516  E3AD                     551   LSL.L D1, D5
00001518  B885                     552   CMP.L D5, D4
0000151A  6700 2544                553   BEQ MOVELAI_D
0000151E                           554   
0000151E                           555   
0000151E  43F9 00001058            556    LEA MOVEBAPAI, A1 *MOVE byte  (AN)+ to (AN)
00001524  2A09                     557   MOVE.L A1, D5
00001526  123C 0010                558    MOVE.B #16, D1
0000152A  4E71                     559   NOP
0000152C  E3AD                     560   LSL.L D1, D5
0000152E  B885                     561   CMP.L D5, D4
00001530  6700 2536                562   BEQ MOVEBAPAI_D
00001534                           563   
00001534  43F9 00003058            564     LEA MOVEWAPAI, A1 *MOVE word  (AN)+ to (AN)
0000153A  2A09                     565   MOVE.L A1, D5
0000153C  123C 0010                566    MOVE.B #16, D1
00001540  4E71                     567   NOP
00001542  E3AD                     568   LSL.L D1, D5
00001544  B885                     569   CMP.L D5, D4
00001546  6700 2528                570   BEQ MOVEWAPAI_D
0000154A                           571  
0000154A  43F9 00002058            572   LEA MOVELAPAI, A1 *MOVE long  (AN)+ to (AN)
00001550  2A09                     573   MOVE.L A1, D5
00001552  123C 0010                574    MOVE.B #16, D1
00001556  4E71                     575   NOP
00001558  E3AD                     576   LSL.L D1, D5
0000155A  B885                     577   CMP.L D5, D4
0000155C  6700 251A                578   BEQ MOVELAPAI_D
00001560                           579   
00001560  43F9 00001060            580   LEA MOVEBADAI, A1 *MOVE byte  -(AN) to (AN)
00001566  2A09                     581   MOVE.L A1, D5
00001568  123C 0010                582    MOVE.B #16, D1
0000156C  4E71                     583   NOP
0000156E  E3AD                     584   LSL.L D1, D5
00001570  B885                     585   CMP.L D5, D4
00001572  6700 250C                586   BEQ MOVEBADAI_D
00001576                           587   
00001576  43F9 00003060            588     LEA MOVEWADAI, A1 *MOVE word  -(AN) to (AN)
0000157C  2A09                     589   MOVE.L A1, D5
0000157E  123C 0010                590    MOVE.B #16, D1
00001582  4E71                     591   NOP
00001584  E3AD                     592   LSL.L D1, D5
00001586  B885                     593   CMP.L D5, D4
00001588  6700 24E6                594   BEQ MOVEWAPAI_D
0000158C                           595  
0000158C  43F9 00002060            596   LEA MOVELADAI, A1 *MOVE long  -(AN) to (AN)
00001592  2A09                     597   MOVE.L A1, D5
00001594  123C 0010                598    MOVE.B #16, D1
00001598  4E71                     599   NOP
0000159A  E3AD                     600   LSL.L D1, D5
0000159C  B885                     601   CMP.L D5, D4
0000159E  6700 24F0                602   BEQ MOVELADAI_D
000015A2                           603   
000015A2  43F9 000010B8            604   LEA MOVEBWAI, A1 *MOVE byte  (XXX).W to (AN)
000015A8  2A09                     605   MOVE.L A1, D5
000015AA  123C 0010                606    MOVE.B #16, D1
000015AE  4E71                     607   NOP
000015B0  E3AD                     608   LSL.L D1, D5
000015B2  B885                     609   CMP.L D5, D4
000015B4  6700 24E2                610   BEQ MOVEBWAI_D
000015B8                           611   
000015B8  43F9 000030B8            612     LEA MOVEWWAI, A1 *MOVE word  (XXX).W to (AN)
000015BE  2A09                     613   MOVE.L A1, D5
000015C0  123C 0010                614    MOVE.B #16, D1
000015C4  4E71                     615   NOP
000015C6  E3AD                     616   LSL.L D1, D5
000015C8  B885                     617   CMP.L D5, D4
000015CA  6700 24D6                618   BEQ MOVEWWAI_D
000015CE                           619  
000015CE  43F9 000020B8            620   LEA MOVELWAI, A1 *MOVE long  (XXX).W to (AN)
000015D4  2A09                     621   MOVE.L A1, D5
000015D6  123C 0010                622    MOVE.B #16, D1
000015DA  4E71                     623   NOP
000015DC  E3AD                     624   LSL.L D1, D5
000015DE  B885                     625   CMP.L D5, D4
000015E0  6700 24CA                626   BEQ MOVELWAI_D
000015E4                           627   
000015E4                           628   
000015E4  43F9 000010B9            629    LEA MOVEBLAI, A1 *MOVE byte  (XXX).L to (AN)
000015EA  2A09                     630   MOVE.L A1, D5
000015EC  123C 0010                631    MOVE.B #16, D1
000015F0  4E71                     632   NOP
000015F2  E3AD                     633   LSL.L D1, D5
000015F4  B885                     634   CMP.L D5, D4
000015F6  6700 24BE                635   BEQ MOVEBLAI_D
000015FA                           636   
000015FA  43F9 000030B8            637     LEA MOVEWWAI, A1 *MOVE word  (XXX).L to (AN)
00001600  2A09                     638   MOVE.L A1, D5
00001602  123C 0010                639    MOVE.B #16, D1
00001606  4E71                     640   NOP
00001608  E3AD                     641   LSL.L D1, D5
0000160A  B885                     642   CMP.L D5, D4
0000160C  6700 24B2                643   BEQ MOVEWLAI_D
00001610                           644  
00001610  43F9 000020B9            645   LEA MOVELLAI, A1 *MOVE long  (XXX).L to (AN)
00001616  2A09                     646   MOVE.L A1, D5
00001618  123C 0010                647    MOVE.B #16, D1
0000161C  4E71                     648   NOP
0000161E  E3AD                     649   LSL.L D1, D5
00001620  B885                     650   CMP.L D5, D4
00001622  6700 24A6                651   BEQ MOVELLAI_D
00001626                           652  
00001626  43F9 000010BC            653   LEA MOVEBIAI, A1 *MOVE byte  immidiate to (AN)
0000162C  2A09                     654   MOVE.L A1, D5
0000162E  123C 0010                655    MOVE.B #16, D1
00001632  4E71                     656   NOP
00001634  E3AD                     657   LSL.L D1, D5
00001636  B885                     658   CMP.L D5, D4
00001638  6700 249A                659   BEQ MOVEBIAI_D
0000163C                           660   
0000163C  43F9 000030BC            661     LEA MOVEWIAI, A1 *MOVE word  immidiate  to (AN)
00001642  2A09                     662   MOVE.L A1, D5
00001644  123C 0010                663    MOVE.B #16, D1
00001648  4E71                     664   NOP
0000164A  E3AD                     665   LSL.L D1, D5
0000164C  B885                     666   CMP.L D5, D4
0000164E  6700 2492                667   BEQ MOVEWIAI_D
00001652                           668  
00001652  43F9 000020B8            669   LEA MOVELWAI, A1 *MOVE long  immidiate to (AN)
00001658  2A09                     670   MOVE.L A1, D5
0000165A  123C 0010                671    MOVE.B #16, D1
0000165E  4E71                     672   NOP
00001660  E3AD                     673   LSL.L D1, D5
00001662  B885                     674   CMP.L D5, D4
00001664  6700 248A                675   BEQ MOVELIAI_D
00001668                           676  
00001668  43F9 000010C0            677   LEA MOVEBDAP, A1 *MOVE byte  DN to (AN)+
0000166E  2A09                     678   MOVE.L A1, D5
00001670  123C 0010                679    MOVE.B #16, D1
00001674  4E71                     680   NOP
00001676  E3AD                     681   LSL.L D1, D5
00001678  B885                     682   CMP.L D5, D4
0000167A  6700 2482                683   BEQ MOVEBDAP_D
0000167E                           684   
0000167E  43F9 000030C0            685    LEA MOVEWDAP, A1 *MOVE word  DN to (AN)+
00001684  2A09                     686   MOVE.L A1, D5
00001686  123C 0010                687    MOVE.B #16, D1
0000168A  4E71                     688   NOP
0000168C  E3AD                     689   LSL.L D1, D5
0000168E  B885                     690   CMP.L D5, D4
00001690  6700 2474                691   BEQ MOVEWDAP_D
00001694                           692   
00001694  43F9 000020C0            693     LEA MOVELDAP, A1 *MOVE long  DN to (AN)+
0000169A  2A09                     694   MOVE.L A1, D5
0000169C  123C 0010                695    MOVE.B #16, D1
000016A0  4E71                     696   NOP
000016A2  E3AD                     697   LSL.L D1, D5
000016A4  B885                     698   CMP.L D5, D4
000016A6  6700 2466                699   BEQ MOVELDAP_D
000016AA                           700  
000016AA  43F9 000010C8            701    LEA MOVEBAAP, A1 *MOVE byte  AN to (AN)+
000016B0  2A09                     702   MOVE.L A1, D5
000016B2  123C 0010                703    MOVE.B #16, D1
000016B6  4E71                     704   NOP
000016B8  E3AD                     705   LSL.L D1, D5
000016BA  B885                     706   CMP.L D5, D4
000016BC  6700 2460                707   BEQ MOVEWAAP_D
000016C0                           708   
000016C0  43F9 000030C8            709     LEA MOVEWAAP, A1 *MOVE word  AN to (AN)+
000016C6  2A09                     710   MOVE.L A1, D5
000016C8  123C 0010                711    MOVE.B #16, D1
000016CC  4E71                     712   NOP
000016CE  E3AD                     713   LSL.L D1, D5
000016D0  B885                     714   CMP.L D5, D4
000016D2  6700 244A                715   BEQ MOVEWAAP_D
000016D6                           716  
000016D6  43F9 000020C8            717    LEA MOVELAAP, A1 *MOVE long  AN to (AN)+
000016DC  2A09                     718   MOVE.L A1, D5
000016DE  123C 0010                719    MOVE.B #16, D1
000016E2  4E71                     720   NOP
000016E4  E3AD                     721   LSL.L D1, D5
000016E6  B885                     722   CMP.L D5, D4
000016E8  6700 243C                723   BEQ MOVELAAP_D
000016EC                           724   
000016EC  43F9 000010D0            725     LEA MOVEBAIAP, A1 *MOVE byte  (AN) to (AN)+
000016F2  2A09                     726   MOVE.L A1, D5
000016F4  123C 0010                727    MOVE.B #16, D1
000016F8  4E71                     728   NOP
000016FA  E3AD                     729   LSL.L D1, D5
000016FC  B885                     730   CMP.L D5, D4
000016FE  6700 2436                731   BEQ MOVEWAIAP_D
00001702                           732   
00001702  43F9 000030D0            733     LEA MOVEWAIAP, A1 *MOVE word  (AN) to (AN)+
00001708  2A09                     734   MOVE.L A1, D5
0000170A  123C 0010                735    MOVE.B #16, D1
0000170E  4E71                     736   NOP
00001710  E3AD                     737   LSL.L D1, D5
00001712  B885                     738   CMP.L D5, D4
00001714  6700 2420                739   BEQ MOVEWAIAP_D
00001718                           740  
00001718  43F9 000020D0            741    LEA MOVELAIAP, A1 *MOVE long  (AN) to (AN)+
0000171E  2A09                     742   MOVE.L A1, D5
00001720  123C 0010                743    MOVE.B #16, D1
00001724  4E71                     744   NOP
00001726  E3AD                     745   LSL.L D1, D5
00001728  B885                     746   CMP.L D5, D4
0000172A  6700 2412                747   BEQ MOVELAIAP_D
0000172E                           748  
0000172E  43F9 000010D8            749     LEA MOVEBAPAP, A1 *MOVE byte  (AN)+ to (AN)+
00001734  2A09                     750   MOVE.L A1, D5
00001736  123C 0010                751    MOVE.B #16, D1
0000173A  4E71                     752   NOP
0000173C  E3AD                     753   LSL.L D1, D5
0000173E  B885                     754   CMP.L D5, D4
00001740  6700 240C                755   BEQ MOVEWAPAP_D
00001744                           756   
00001744  43F9 000030D8            757     LEA MOVEWAPAP, A1 *MOVE word  (AN)+ to (AN)+
0000174A  2A09                     758   MOVE.L A1, D5
0000174C  123C 0010                759    MOVE.B #16, D1
00001750  4E71                     760   NOP
00001752  E3AD                     761   LSL.L D1, D5
00001754  B885                     762   CMP.L D5, D4
00001756  6700 23F6                763   BEQ MOVEWAPAP_D
0000175A                           764  
0000175A  43F9 000020D8            765    LEA MOVELAPAP, A1 *MOVE long  (AN)+ to (AN)+
00001760  2A09                     766   MOVE.L A1, D5
00001762  123C 0010                767    MOVE.B #16, D1
00001766  4E71                     768   NOP
00001768  E3AD                     769   LSL.L D1, D5
0000176A  B885                     770   CMP.L D5, D4
0000176C  6700 23E8                771   BEQ MOVELAPAP_D
00001770                           772  
00001770  43F9 000010E0            773     LEA MOVEBADAP, A1 *MOVE byte  -(AN) to (AN)+
00001776  2A09                     774   MOVE.L A1, D5
00001778  123C 0010                775    MOVE.B #16, D1
0000177C  4E71                     776   NOP
0000177E  E3AD                     777   LSL.L D1, D5
00001780  B885                     778   CMP.L D5, D4
00001782  6700 23E2                779   BEQ MOVEWADAP_D
00001786                           780   
00001786  43F9 000030E0            781     LEA MOVEWADAP, A1 *MOVE word  -(AN) to (AN)+
0000178C  2A09                     782   MOVE.L A1, D5
0000178E  123C 0010                783    MOVE.B #16, D1
00001792  4E71                     784   NOP
00001794  E3AD                     785   LSL.L D1, D5
00001796  B885                     786   CMP.L D5, D4
00001798  6700 23CC                787   BEQ MOVEWADAP_D
0000179C                           788  
0000179C  43F9 000020E0            789    LEA MOVELADAP, A1 *MOVE long  -(AN) to (AN)+
000017A2  2A09                     790   MOVE.L A1, D5
000017A4  123C 0010                791    MOVE.B #16, D1
000017A8  4E71                     792   NOP
000017AA  E3AD                     793   LSL.L D1, D5
000017AC  B885                     794   CMP.L D5, D4
000017AE  6700 23BE                795   BEQ MOVELADAP_D
000017B2                           796  
000017B2  43F9 000010F8            797    LEA MOVEBWAP, A1 *MOVE byte  xxx.w to (AN)+
000017B8  2A09                     798   MOVE.L A1, D5
000017BA  123C 0010                799    MOVE.B #16, D1
000017BE  4E71                     800   NOP
000017C0  E3AD                     801   LSL.L D1, D5
000017C2  B885                     802   CMP.L D5, D4
000017C4  6700 23B0                803   BEQ MOVEBWAP_D
000017C8                           804  
000017C8  43F9 000030F8            805    LEA MOVEWWAP, A1 *MOVE word  xxx.w to (AN)+
000017CE  2A09                     806   MOVE.L A1, D5
000017D0  123C 0010                807    MOVE.B #16, D1
000017D4  4E71                     808   NOP
000017D6  E3AD                     809   LSL.L D1, D5
000017D8  B885                     810   CMP.L D5, D4
000017DA  6700 23A4                811   BEQ MOVEWWAP_D
000017DE                           812   
000017DE  43F9 000020F8            813    LEA MOVELWAP, A1 *MOVE long  xxx.w to (AN)+
000017E4  2A09                     814   MOVE.L A1, D5
000017E6  123C 0010                815    MOVE.B #16, D1
000017EA  4E71                     816   NOP
000017EC  E3AD                     817   LSL.L D1, D5
000017EE  B885                     818   CMP.L D5, D4
000017F0  6700 2398                819   BEQ MOVELWAP_D
000017F4                           820   
000017F4  43F9 000010F9            821     LEA MOVEBLAP, A1 *MOVE byte  xxx.l to (AN)+
000017FA  2A09                     822   MOVE.L A1, D5
000017FC  123C 0010                823    MOVE.B #16, D1
00001800  4E71                     824   NOP
00001802  E3AD                     825   LSL.L D1, D5
00001804  B885                     826   CMP.L D5, D4
00001806  6700 238C                827   BEQ MOVEBLAP_D
0000180A                           828  
0000180A  43F9 000030F8            829    LEA MOVEWWAP, A1 *MOVE word  xxx.L to (AN)+
00001810  2A09                     830   MOVE.L A1, D5
00001812  123C 0010                831    MOVE.B #16, D1
00001816  4E71                     832   NOP
00001818  E3AD                     833   LSL.L D1, D5
0000181A  B885                     834   CMP.L D5, D4
0000181C  6700 2380                835   BEQ MOVEWLAP_D
00001820                           836   
00001820  43F9 000020F9            837    LEA MOVELLAP, A1 *MOVE long  xxx.L to (AN)+
00001826  2A09                     838   MOVE.L A1, D5
00001828  123C 0010                839    MOVE.B #16, D1
0000182C  4E71                     840   NOP
0000182E  E3AD                     841   LSL.L D1, D5
00001830  B885                     842   CMP.L D5, D4
00001832  6700 2374                843   BEQ MOVELLAP_D
00001836                           844   
00001836  43F9 000010FC            845   LEA MOVEBIAP, A1 *MOVE byte  immidiate to (AN)+
0000183C  2A09                     846   MOVE.L A1, D5
0000183E  123C 0010                847    MOVE.B #16, D1
00001842  4E71                     848   NOP
00001844  E3AD                     849   LSL.L D1, D5
00001846  B885                     850   CMP.L D5, D4
00001848  6700 2368                851   BEQ MOVEBIAP_D
0000184C                           852   
0000184C  43F9 000010FC            853    LEA MOVEBIAP, A1 *MOVE word  immidiate to (AN)+
00001852  2A09                     854   MOVE.L A1, D5
00001854  123C 0010                855    MOVE.B #16, D1
00001858  4E71                     856   NOP
0000185A  E3AD                     857   LSL.L D1, D5
0000185C  B885                     858   CMP.L D5, D4
0000185E  6700 2360                859   BEQ MOVEWIAP_D
00001862                           860  
00001862  43F9 000030FC            861   LEA MOVEWIAP, A1 *MOVE long  immidiate to (AN)+
00001868  2A09                     862   MOVE.L A1, D5
0000186A  123C 0010                863    MOVE.B #16, D1
0000186E  4E71                     864   NOP
00001870  E3AD                     865   LSL.L D1, D5
00001872  B885                     866   CMP.L D5, D4
00001874  6700 2358                867   BEQ MOVELIAP_D
00001878                           868  
00001878                           869  
00001878  43F9 00001100            870   LEA MOVEBDAD, A1 *MOVE byte  Dn to -(AN)
0000187E  2A09                     871   MOVE.L A1, D5
00001880  123C 0010                872    MOVE.B #16, D1
00001884  4E71                     873   NOP
00001886  E3AD                     874   LSL.L D1, D5
00001888  B885                     875   CMP.L D5, D4
0000188A  6700 2350                876   BEQ MOVEBDAD_D
0000188E                           877  
0000188E                           878  
0000188E  43F9 00003100            879   LEA MOVEWDAD, A1 *MOVE word  Dn to -(AN)
00001894  2A09                     880   MOVE.L A1, D5
00001896  123C 0010                881    MOVE.B #16, D1
0000189A  4E71                     882   NOP
0000189C  E3AD                     883   LSL.L D1, D5
0000189E  B885                     884   CMP.L D5, D4
000018A0  6700 2342                885   BEQ MOVEWDAD_D
000018A4                           886  
000018A4  43F9 00002100            887   LEA MOVELDAD, A1 *MOVE long  Dn to -(AN)
000018AA  2A09                     888   MOVE.L A1, D5
000018AC  123C 0010                889    MOVE.B #16, D1
000018B0  4E71                     890   NOP
000018B2  E3AD                     891   LSL.L D1, D5
000018B4  B885                     892   CMP.L D5, D4
000018B6  6700 2334                893   BEQ MOVELDAD_D
000018BA                           894  
000018BA                           895  
000018BA  43F9 00001108            896   LEA MOVEBAAD, A1 *MOVE byte  An to -(AN)
000018C0  2A09                     897   MOVE.L A1, D5
000018C2  123C 0010                898    MOVE.B #16, D1
000018C6  4E71                     899   NOP
000018C8  E3AD                     900   LSL.L D1, D5
000018CA  B885                     901   CMP.L D5, D4
000018CC  6700 2326                902   BEQ MOVEBAAD_D
000018D0                           903  
000018D0                           904  
000018D0  43F9 00003108            905   LEA MOVEWAAD, A1 *MOVE word  An to -(AN)
000018D6  2A09                     906   MOVE.L A1, D5
000018D8  123C 0010                907    MOVE.B #16, D1
000018DC  4E71                     908   NOP
000018DE  E3AD                     909   LSL.L D1, D5
000018E0  B885                     910   CMP.L D5, D4
000018E2  6700 2318                911   BEQ MOVEWAAD_D
000018E6                           912  
000018E6  43F9 00002108            913   LEA MOVELAAD, A1 *MOVE long  An to -(AN)
000018EC  2A09                     914   MOVE.L A1, D5
000018EE  123C 0010                915    MOVE.B #16, D1
000018F2  4E71                     916   NOP
000018F4  E3AD                     917   LSL.L D1, D5
000018F6  B885                     918   CMP.L D5, D4
000018F8  6700 230A                919   BEQ MOVELAAD_D
000018FC                           920  
000018FC                           921  
000018FC  43F9 00001110            922   LEA MOVEBAIAD, A1 *MOVE byte  (An) to -(AN)
00001902  2A09                     923   MOVE.L A1, D5
00001904  123C 0010                924    MOVE.B #16, D1
00001908  4E71                     925   NOP
0000190A  E3AD                     926   LSL.L D1, D5
0000190C  B885                     927   CMP.L D5, D4
0000190E  6700 22FC                928   BEQ MOVEBAIAD_D
00001912                           929  
00001912                           930  
00001912  43F9 00003110            931   LEA MOVEWAIAD, A1 *MOVE word  (An) to -(AN)
00001918  2A09                     932   MOVE.L A1, D5
0000191A  123C 0010                933    MOVE.B #16, D1
0000191E  4E71                     934   NOP
00001920  E3AD                     935   LSL.L D1, D5
00001922  B885                     936   CMP.L D5, D4
00001924  6700 22EE                937   BEQ MOVEWAIAD_D
00001928                           938  
00001928  43F9 00002110            939   LEA MOVELAIAD, A1 *MOVE long  (An) to -(AN)
0000192E  2A09                     940   MOVE.L A1, D5
00001930  123C 0010                941    MOVE.B #16, D1
00001934  4E71                     942   NOP
00001936  E3AD                     943   LSL.L D1, D5
00001938  B885                     944   CMP.L D5, D4
0000193A  6700 22E0                945   BEQ MOVELAIAD_D
0000193E                           946   
0000193E  43F9 00001098            947    LEA MOVEBAPAD, A1 *MOVE byte  (An)+ to -(AN)
00001944  2A09                     948   MOVE.L A1, D5
00001946  123C 0010                949    MOVE.B #16, D1
0000194A  4E71                     950   NOP
0000194C  E3AD                     951   LSL.L D1, D5
0000194E  B885                     952   CMP.L D5, D4
00001950  6700 22D2                953   BEQ MOVEBAPAD_D
00001954                           954  
00001954  43F9 00003098            955    LEA MOVEWAPAD, A1 *MOVE word  (An)+ to -(AN)
0000195A  2A09                     956   MOVE.L A1, D5
0000195C  123C 0010                957    MOVE.B #16, D1
00001960  4E71                     958   NOP
00001962  E3AD                     959   LSL.L D1, D5
00001964  B885                     960   CMP.L D5, D4
00001966  6700 22C4                961   BEQ MOVEWAPAD_D
0000196A                           962   
0000196A  43F9 00003098            963   LEA MOVEWAPAD, A1 *MOVE Long  (An)+ to -(AN)
00001970  2A09                     964   MOVE.L A1, D5
00001972  123C 0010                965    MOVE.B #16, D1
00001976  4E71                     966   NOP
00001978  E3AD                     967   LSL.L D1, D5
0000197A  B885                     968   CMP.L D5, D4
0000197C  6700 22AE                969   BEQ MOVEWAPAD_D
00001980                           970  
00001980  43F9 000010A0            971   LEA MOVEBADAD, A1 *MOVE byte  -(An) to -(AN)
00001986  2A09                     972   MOVE.L A1, D5
00001988  123C 0010                973    MOVE.B #16, D1
0000198C  4E71                     974   NOP
0000198E  E3AD                     975   LSL.L D1, D5
00001990  B885                     976   CMP.L D5, D4
00001992  6700 22A8                977   BEQ MOVEBADAD_D
00001996                           978  
00001996  43F9 000030A0            979    LEA MOVEWADAD, A1 *MOVE word  -(An) to -(AN)
0000199C  2A09                     980   MOVE.L A1, D5
0000199E  123C 0010                981    MOVE.B #16, D1
000019A2  4E71                     982   NOP
000019A4  E3AD                     983   LSL.L D1, D5
000019A6  B885                     984   CMP.L D5, D4
000019A8  6700 229A                985   BEQ MOVEWADAD_D
000019AC                           986   
000019AC  43F9 000030A0            987   LEA MOVEWADAD, A1 *MOVE Long  -(An) to -(AN)
000019B2  2A09                     988   MOVE.L A1, D5
000019B4  123C 0010                989    MOVE.B #16, D1
000019B8  4E71                     990   NOP
000019BA  E3AD                     991   LSL.L D1, D5
000019BC  B885                     992   CMP.L D5, D4
000019BE  6700 2284                993   BEQ MOVEWADAD_D
000019C2                           994   
000019C2  43F9 000010F8            995    LEA MOVEBWAD, A1 *MOVE byte  XXX.w to -(AN)
000019C8  2A09                     996   MOVE.L A1, D5
000019CA  123C 0010                997    MOVE.B #16, D1
000019CE  4E71                     998   NOP
000019D0  E3AD                     999   LSL.L D1, D5
000019D2  B885                    1000   CMP.L D5, D4
000019D4  6700 2288               1001   BEQ MOVEWWAD_D
000019D8                          1002  
000019D8  43F9 000030F8           1003   LEA MOVEWWAD, A1 *MOVE word  XXX.w to -(AN)
000019DE  2A09                    1004   MOVE.L A1, D5
000019E0  123C 0010               1005    MOVE.B #16, D1
000019E4  4E71                    1006   NOP
000019E6  E3AD                    1007   LSL.L D1, D5
000019E8  B885                    1008   CMP.L D5, D4
000019EA  6700 2272               1009   BEQ MOVEWWAD_D
000019EE                          1010  
000019EE  43F9 000020F8           1011   LEA MOVELWAD, A1 *MOVE long  XXX.w to -(AN)
000019F4  2A09                    1012   MOVE.L A1, D5
000019F6  123C 0010               1013    MOVE.B #16, D1
000019FA  4E71                    1014   NOP
000019FC  E3AD                    1015   LSL.L D1, D5
000019FE  B885                    1016   CMP.L D5, D4
00001A00  6700 2266               1017   BEQ MOVELWAD_D
00001A04                          1018   
00001A04                          1019   
00001A04  43F9 000010F9           1020    LEA MOVEBLAD, A1 *MOVE byte  XXX.L to -(AN)
00001A0A  2A09                    1021   MOVE.L A1, D5
00001A0C  123C 0010               1022    MOVE.B #16, D1
00001A10  4E71                    1023   NOP
00001A12  E3AD                    1024   LSL.L D1, D5
00001A14  B885                    1025   CMP.L D5, D4
00001A16  6700 225A               1026   BEQ MOVEBLAD_D
00001A1A                          1027   
00001A1A                          1028   
00001A1A  43F9 000030F9           1029    LEA MOVEWLAD, A1 *MOVE word  XXX.L to -(AN)
00001A20  2A09                    1030   MOVE.L A1, D5
00001A22  123C 0010               1031    MOVE.B #16, D1
00001A26  4E71                    1032   NOP
00001A28  E3AD                    1033   LSL.L D1, D5
00001A2A  B885                    1034   CMP.L D5, D4
00001A2C  6700 224E               1035   BEQ MOVEWLAD_D
00001A30                          1036   
00001A30  43F9 000020F9           1037     LEA MOVELLAD, A1 *MOVE word  XXX.L to -(AN)
00001A36  2A09                    1038   MOVE.L A1, D5
00001A38  123C 0010               1039    MOVE.B #16, D1
00001A3C  4E71                    1040   NOP
00001A3E  E3AD                    1041   LSL.L D1, D5
00001A40  B885                    1042   CMP.L D5, D4
00001A42  6700 2242               1043   BEQ MOVELLAD_D
00001A46                          1044   
00001A46                          1045   
00001A46  43F9 0000113C           1046    LEA MOVEBIAD, A1 *MOVE byte  immidiate to -(AN)
00001A4C  2A09                    1047   MOVE.L A1, D5
00001A4E  123C 0010               1048    MOVE.B #16, D1
00001A52  4E71                    1049   NOP
00001A54  E3AD                    1050   LSL.L D1, D5
00001A56  B885                    1051   CMP.L D5, D4
00001A58  6700 2236               1052   BEQ MOVEBIAD_D
00001A5C                          1053   
00001A5C  43F9 0000313C           1054     LEA MOVEWIAD, A1 *MOVE word  immidiate to -(AN)
00001A62  2A09                    1055   MOVE.L A1, D5
00001A64  123C 0010               1056    MOVE.B #16, D1
00001A68  4E71                    1057   NOP
00001A6A  E3AD                    1058   LSL.L D1, D5
00001A6C  B885                    1059   CMP.L D5, D4
00001A6E  6700 222E               1060   BEQ MOVEWIAD_D
00001A72                          1061   
00001A72  43F9 0000213C           1062     LEA MOVELIAD, A1 *MOVE long  immidiate to -(AN)
00001A78  2A09                    1063   MOVE.L A1, D5
00001A7A  123C 0010               1064    MOVE.B #16, D1
00001A7E  4E71                    1065   NOP
00001A80  E3AD                    1066   LSL.L D1, D5
00001A82  B885                    1067   CMP.L D5, D4
00001A84  6700 2226               1068   BEQ MOVELIAD_D 
00001A88                          1069   
00001A88  43F9 000011C0           1070      LEA MOVEBDWRD, A1 *MOVE byte Dn xxx.W
00001A8E  2A09                    1071   MOVE.L A1, D5
00001A90  123C 0010               1072    MOVE.B #16, D1
00001A94  4E71                    1073   NOP
00001A96  E3AD                    1074   LSL.L D1, D5
00001A98  B885                    1075   CMP.L D5, D4
00001A9A  6700 221E               1076   BEQ MOVEBDWRD_D
00001A9E                          1077  
00001A9E  43F9 000031C0           1078      LEA MOVEWDWRD, A1 *MOVE word Dn xxx.W
00001AA4  2A09                    1079   MOVE.L A1, D5
00001AA6  123C 0010               1080    MOVE.B #16, D1
00001AAA  4E71                    1081   NOP
00001AAC  E3AD                    1082   LSL.L D1, D5
00001AAE  B885                    1083   CMP.L D5, D4
00001AB0                          1084    
00001AB0  6700 2212               1085   BEQ MOVEWDWRD_D 
00001AB4                          1086   
00001AB4  43F9 000021C0           1087     LEA MOVELDWRD, A1 *MOVE long Dn xxx.W
00001ABA  2A09                    1088   MOVE.L A1, D5
00001ABC  123C 0010               1089    MOVE.B #16, D1
00001AC0  4E71                    1090   NOP
00001AC2  E3AD                    1091   LSL.L D1, D5
00001AC4  B885                    1092   CMP.L D5, D4
00001AC6  6700 2206               1093   BEQ MOVELDWRD_D 
00001ACA                          1094   
00001ACA  43F9 00001068           1095       LEA MOVEBAW, A1 *MOVE byte An xxx.W
00001AD0  2A09                    1096   MOVE.L A1, D5
00001AD2  123C 0010               1097    MOVE.B #16, D1
00001AD6  4E71                    1098   NOP
00001AD8  E3AD                    1099   LSL.L D1, D5
00001ADA  B885                    1100   CMP.L D5, D4
00001ADC  6700 21FA               1101   BEQ MOVEBAW_D
00001AE0                          1102  
00001AE0  43F9 00003068           1103      LEA MOVEWAW, A1 *MOVE word An xxx.W
00001AE6  2A09                    1104   MOVE.L A1, D5
00001AE8  123C 0010               1105    MOVE.B #16, D1
00001AEC  4E71                    1106   NOP
00001AEE  E3AD                    1107   LSL.L D1, D5
00001AF0  B885                    1108   CMP.L D5, D4
00001AF2  6700 21EE               1109   BEQ MOVEWAW_D 
00001AF6                          1110   
00001AF6  43F9 00002068           1111     LEA MOVELAW, A1 *MOVE long An xxx.W
00001AFC  2A09                    1112   MOVE.L A1, D5
00001AFE  123C 0010               1113    MOVE.B #16, D1
00001B02  4E71                    1114   NOP
00001B04  E3AD                    1115   LSL.L D1, D5
00001B06  B885                    1116   CMP.L D5, D4
00001B08  6700 21E2               1117   BEQ MOVELAW_D 
00001B0C                          1118   
00001B0C  43F9 000010A8           1119     LEA MOVEBAIW, A1 *MOVE byte (An) xxx.W
00001B12  2A09                    1120   MOVE.L A1, D5
00001B14  123C 0010               1121    MOVE.B #16, D1
00001B18  4E71                    1122   NOP
00001B1A  E3AD                    1123   LSL.L D1, D5
00001B1C  B885                    1124   CMP.L D5, D4
00001B1E  6700 21D6               1125   BEQ MOVEBAIW_D
00001B22                          1126  
00001B22  43F9 000030A8           1127      LEA MOVEWAIW, A1 *MOVE word (An) xxx.W
00001B28  2A09                    1128   MOVE.L A1, D5
00001B2A  123C 0010               1129    MOVE.B #16, D1
00001B2E  4E71                    1130   NOP
00001B30  E3AD                    1131   LSL.L D1, D5
00001B32  B885                    1132   CMP.L D5, D4
00001B34  6700 21CA               1133   BEQ MOVEWAIW_D 
00001B38                          1134   
00001B38  43F9 000020A8           1135     LEA MOVELAIW, A1 *MOVE long (An) xxx.W
00001B3E  2A09                    1136   MOVE.L A1, D5
00001B40  123C 0010               1137    MOVE.B #16, D1
00001B44  4E71                    1138   NOP
00001B46  E3AD                    1139   LSL.L D1, D5
00001B48  B885                    1140   CMP.L D5, D4
00001B4A  6700 21BE               1141   BEQ MOVELAIW_D 
00001B4E                          1142   
00001B4E                          1143   
00001B4E  43F9 000010E8           1144     LEA MOVEBAPW, A1 *MOVE byte (An)+ xxx.W
00001B54  2A09                    1145   MOVE.L A1, D5
00001B56  123C 0010               1146    MOVE.B #16, D1
00001B5A  4E71                    1147   NOP
00001B5C  E3AD                    1148   LSL.L D1, D5
00001B5E  B885                    1149   CMP.L D5, D4
00001B60  6700 21B2               1150   BEQ MOVEBAPW_D
00001B64                          1151  
00001B64  43F9 000030E8           1152      LEA MOVEWAPW, A1 *MOVE word (An)+ xxx.W
00001B6A  2A09                    1153   MOVE.L A1, D5
00001B6C  123C 0010               1154    MOVE.B #16, D1
00001B70  4E71                    1155   NOP
00001B72  E3AD                    1156   LSL.L D1, D5
00001B74  B885                    1157   CMP.L D5, D4
00001B76  6700 21A6               1158   BEQ MOVEWAPW_D 
00001B7A                          1159   
00001B7A  43F9 000020E8           1160     LEA MOVELAPW, A1 *MOVE long (An)+ xxx.W
00001B80  2A09                    1161   MOVE.L A1, D5
00001B82  123C 0010               1162    MOVE.B #16, D1
00001B86  4E71                    1163   NOP
00001B88  E3AD                    1164   LSL.L D1, D5
00001B8A  B885                    1165   CMP.L D5, D4
00001B8C  6700 219A               1166   BEQ MOVELAPW_D 
00001B90                          1167   
00001B90                          1168   
00001B90  43F9 00001128           1169     LEA MOVEBADW, A1 *MOVE byte -(An) xxx.W
00001B96  2A09                    1170   MOVE.L A1, D5
00001B98  123C 0010               1171    MOVE.B #16, D1
00001B9C  4E71                    1172   NOP
00001B9E  E3AD                    1173   LSL.L D1, D5
00001BA0  B885                    1174   CMP.L D5, D4
00001BA2  6700 218E               1175   BEQ MOVEBADW_D
00001BA6                          1176  
00001BA6  43F9 00003128           1177      LEA MOVEWADW, A1 *MOVE word -(An) xxx.W
00001BAC  2A09                    1178   MOVE.L A1, D5
00001BAE  123C 0010               1179    MOVE.B #16, D1
00001BB2  4E71                    1180   NOP
00001BB4  E3AD                    1181   LSL.L D1, D5
00001BB6  B885                    1182   CMP.L D5, D4
00001BB8  6700 2182               1183   BEQ MOVEWADW_D 
00001BBC                          1184   
00001BBC  43F9 00002128           1185     LEA MOVELADW, A1 *MOVE long -(An) xxx.W
00001BC2  2A09                    1186   MOVE.L A1, D5
00001BC4  123C 0010               1187    MOVE.B #16, D1
00001BC8  4E71                    1188   NOP
00001BCA  E3AD                    1189   LSL.L D1, D5
00001BCC  B885                    1190   CMP.L D5, D4
00001BCE  6700 2176               1191   BEQ MOVELADW_D 
00001BD2                          1192   
00001BD2  43F9 000011F8           1193      LEA MOVEBW, A1 *MOVE byte xxx.W xxx.W
00001BD8  2A09                    1194   MOVE.L A1, D5
00001BDA  123C 0010               1195    MOVE.B #16, D1
00001BDE  4E71                    1196   NOP
00001BE0  E3AD                    1197   LSL.L D1, D5
00001BE2  B885                    1198   CMP.L D5, D4
00001BE4  6700 216A               1199   BEQ MOVEBW_D
00001BE8                          1200  
00001BE8  43F9 000031F8           1201      LEA MOVEWW, A1 *MOVE word xxx.W  xxx.W
00001BEE  2A09                    1202   MOVE.L A1, D5
00001BF0  123C 0010               1203    MOVE.B #16, D1
00001BF4  4E71                    1204   NOP
00001BF6  E3AD                    1205   LSL.L D1, D5
00001BF8  B885                    1206   CMP.L D5, D4
00001BFA  6700 215E               1207   BEQ MOVEWW_D 
00001BFE                          1208   
00001BFE  43F9 000021F8           1209     LEA MOVELW, A1 *MOVE long xxx.W xxx.W
00001C04  2A09                    1210   MOVE.L A1, D5
00001C06  123C 0010               1211    MOVE.B #16, D1
00001C0A  4E71                    1212   NOP
00001C0C  E3AD                    1213   LSL.L D1, D5
00001C0E  B885                    1214   CMP.L D5, D4
00001C10  6700 2152               1215   BEQ MOVELW_D 
00001C14                          1216   
00001C14  43F9 000011F9           1217       LEA MOVEBLW, A1 *MOVE byte xxx.L xxx.W
00001C1A  2A09                    1218   MOVE.L A1, D5
00001C1C  123C 0010               1219    MOVE.B #16, D1
00001C20  4E71                    1220   NOP
00001C22  E3AD                    1221   LSL.L D1, D5
00001C24  B885                    1222   CMP.L D5, D4
00001C26  6700 2146               1223   BEQ MOVEBLW_D
00001C2A                          1224  
00001C2A  43F9 000031F9           1225      LEA MOVEWLW, A1 *MOVE word xxx.L  xxx.W
00001C30  2A09                    1226   MOVE.L A1, D5
00001C32  123C 0010               1227    MOVE.B #16, D1
00001C36  4E71                    1228   NOP
00001C38  E3AD                    1229   LSL.L D1, D5
00001C3A  B885                    1230   CMP.L D5, D4
00001C3C  6700 213A               1231   BEQ MOVEWLW_D 
00001C40                          1232   
00001C40  43F9 000021F9           1233     LEA MOVELLW, A1 *MOVE long xxx.L xxx.W
00001C46  2A09                    1234   MOVE.L A1, D5
00001C48  123C 0010               1235    MOVE.B #16, D1
00001C4C  4E71                    1236   NOP
00001C4E  E3AD                    1237   LSL.L D1, D5
00001C50  B885                    1238   CMP.L D5, D4
00001C52  6700 212E               1239   BEQ MOVELLW_D 
00001C56                          1240   
00001C56                          1241   
00001C56  43F9 000011FC           1242    LEA MOVEBIW, A1 *MOVE byte imm xxx.W
00001C5C  2A09                    1243   MOVE.L A1, D5
00001C5E  123C 0010               1244    MOVE.B #16, D1
00001C62  4E71                    1245   NOP
00001C64  E3AD                    1246   LSL.L D1, D5
00001C66  B885                    1247   CMP.L D5, D4
00001C68  6700 2122               1248   BEQ MOVEBIW_D
00001C6C                          1249  
00001C6C  43F9 000031FC           1250      LEA MOVEWIW, A1 *MOVE word imm  xxx.W
00001C72  2A09                    1251   MOVE.L A1, D5
00001C74  123C 0010               1252    MOVE.B #16, D1
00001C78  4E71                    1253   NOP
00001C7A  E3AD                    1254   LSL.L D1, D5
00001C7C  B885                    1255   CMP.L D5, D4
00001C7E  6700 2114               1256   BEQ MOVEWIW_D 
00001C82                          1257   
00001C82  43F9 000021FC           1258     LEA MOVELIW, A1 *MOVE long imm xxx.W
00001C88  2A09                    1259   MOVE.L A1, D5
00001C8A  123C 0010               1260    MOVE.B #16, D1
00001C8E  4E71                    1261   NOP
00001C90  E3AD                    1262   LSL.L D1, D5
00001C92  B885                    1263   CMP.L D5, D4
00001C94  6700 2106               1264   BEQ MOVELIW_D 
00001C98                          1265   
00001C98                          1266   
00001C98  43F9 000013C0           1267      LEA MOVEBDLNG, A1 *MOVE Byte Dn to xxx.L
00001C9E  2A09                    1268   MOVE.L A1, D5
00001CA0  123C 0010               1269    MOVE.B #16, D1
00001CA4  4E71                    1270   NOP
00001CA6  E3AD                    1271   LSL.L D1, D5
00001CA8  B885                    1272   CMP.L D5, D4
00001CAA  6700 20F8               1273   BEQ MOVEBDLNG_D 
00001CAE                          1274   
00001CAE  43F9 000033C0           1275       LEA MOVEWDLNG, A1 *MOVE word Dn to xxx.L
00001CB4  2A09                    1276   MOVE.L A1, D5
00001CB6  123C 0010               1277    MOVE.B #16, D1
00001CBA  4E71                    1278   NOP
00001CBC  E3AD                    1279   LSL.L D1, D5
00001CBE  B885                    1280   CMP.L D5, D4
00001CC0  6700 20EC               1281   BEQ MOVEWDLNG_D 
00001CC4                          1282   
00001CC4  43F9 000023C0           1283      LEA MOVELDLNG, A1 *MOVE long Dn to xxx.L
00001CCA  2A09                    1284   MOVE.L A1, D5
00001CCC  123C 0010               1285    MOVE.B #16, D1
00001CD0  4E71                    1286   NOP
00001CD2  E3AD                    1287   LSL.L D1, D5
00001CD4  B885                    1288   CMP.L D5, D4
00001CD6  6700 20E0               1289   BEQ MOVELDLNG_D 
00001CDA                          1290   
00001CDA                          1291   
00001CDA  43F9 000013C8           1292     LEA MOVEBAL, A1 *MOVE Byte An to xxx.L
00001CE0  2A09                    1293   MOVE.L A1, D5
00001CE2  123C 0010               1294    MOVE.B #16, D1
00001CE6  4E71                    1295   NOP
00001CE8  E3AD                    1296   LSL.L D1, D5
00001CEA  B885                    1297   CMP.L D5, D4
00001CEC  6700 20D4               1298   BEQ MOVEBAL_D 
00001CF0                          1299   
00001CF0  43F9 000033C8           1300       LEA MOVEWAL, A1 *MOVE word An to xxx.L
00001CF6  2A09                    1301   MOVE.L A1, D5
00001CF8  123C 0010               1302    MOVE.B #16, D1
00001CFC  4E71                    1303   NOP
00001CFE  E3AD                    1304   LSL.L D1, D5
00001D00  B885                    1305   CMP.L D5, D4
00001D02  6700 20C8               1306   BEQ MOVEWAL_D 
00001D06                          1307   
00001D06  43F9 000023C8           1308      LEA MOVELAL, A1 *MOVE long An to xxx.L
00001D0C  2A09                    1309   MOVE.L A1, D5
00001D0E  123C 0010               1310    MOVE.B #16, D1
00001D12  4E71                    1311   NOP
00001D14  E3AD                    1312   LSL.L D1, D5
00001D16  B885                    1313   CMP.L D5, D4
00001D18  6700 20BC               1314   BEQ MOVELAL_D 
00001D1C                          1315   
00001D1C  43F9 000013D0           1316      LEA MOVEBAIL, A1 *MOVE Byte (An) to xxx.L
00001D22  2A09                    1317   MOVE.L A1, D5
00001D24  123C 0010               1318    MOVE.B #16, D1
00001D28  4E71                    1319   NOP
00001D2A  E3AD                    1320   LSL.L D1, D5
00001D2C  B885                    1321   CMP.L D5, D4
00001D2E  6700 20B0               1322   BEQ MOVEBAIL_D 
00001D32                          1323   
00001D32  43F9 000033D0           1324       LEA MOVEWAIL, A1 *MOVE word (An) to xxx.L
00001D38  2A09                    1325   MOVE.L A1, D5
00001D3A  123C 0010               1326    MOVE.B #16, D1
00001D3E  4E71                    1327   NOP
00001D40  E3AD                    1328   LSL.L D1, D5
00001D42  B885                    1329   CMP.L D5, D4
00001D44  6700 20A4               1330   BEQ MOVEWAIL_D 
00001D48                          1331   
00001D48  43F9 000023D0           1332      LEA MOVELAIL, A1 *MOVE long (An) to xxx.L
00001D4E  2A09                    1333   MOVE.L A1, D5
00001D50  123C 0010               1334    MOVE.B #16, D1
00001D54  4E71                    1335   NOP
00001D56  E3AD                    1336   LSL.L D1, D5
00001D58  B885                    1337   CMP.L D5, D4
00001D5A  6700 2098               1338   BEQ MOVELAIL_D 
00001D5E                          1339  
00001D5E                          1340  
00001D5E                          1341  
00001D5E  43F9 000013D8           1342      LEA MOVEBAPL, A1 *MOVE Byte (An)+ to xxx.L
00001D64  2A09                    1343   MOVE.L A1, D5
00001D66  123C 0010               1344    MOVE.B #16, D1
00001D6A  4E71                    1345   NOP
00001D6C  E3AD                    1346   LSL.L D1, D5
00001D6E  B885                    1347   CMP.L D5, D4
00001D70  6700 208C               1348   BEQ MOVEBAPL_D 
00001D74                          1349   
00001D74  43F9 000033D8           1350       LEA MOVEWAPL, A1 *MOVE word (An)+ to xxx.L
00001D7A  2A09                    1351   MOVE.L A1, D5
00001D7C  123C 0010               1352    MOVE.B #16, D1
00001D80  4E71                    1353   NOP
00001D82  E3AD                    1354   LSL.L D1, D5
00001D84  B885                    1355   CMP.L D5, D4
00001D86  6700 2080               1356   BEQ MOVEWAPL_D 
00001D8A                          1357   
00001D8A  43F9 000023D8           1358      LEA MOVELAPL, A1 *MOVE long (An)+ to xxx.L
00001D90  2A09                    1359   MOVE.L A1, D5
00001D92  123C 0010               1360    MOVE.B #16, D1
00001D96  4E71                    1361   NOP
00001D98  E3AD                    1362   LSL.L D1, D5
00001D9A  B885                    1363   CMP.L D5, D4
00001D9C  6700 2074               1364   BEQ MOVELAPL_D 
00001DA0                          1365  
00001DA0  43F9 000013E0           1366      LEA MOVEBADL, A1 *MOVE Byte -(An) to xxx.L
00001DA6  2A09                    1367   MOVE.L A1, D5
00001DA8  123C 0010               1368    MOVE.B #16, D1
00001DAC  4E71                    1369   NOP
00001DAE  E3AD                    1370   LSL.L D1, D5
00001DB0  B885                    1371   CMP.L D5, D4
00001DB2  6700 2068               1372   BEQ MOVEBADL_D 
00001DB6                          1373   
00001DB6  43F9 000033E0           1374       LEA MOVEWADL, A1 *MOVE word -(An) to xxx.L
00001DBC  2A09                    1375   MOVE.L A1, D5
00001DBE  123C 0010               1376    MOVE.B #16, D1
00001DC2  4E71                    1377   NOP
00001DC4  E3AD                    1378   LSL.L D1, D5
00001DC6  B885                    1379   CMP.L D5, D4
00001DC8  6700 205C               1380   BEQ MOVEWADL_D 
00001DCC                          1381   
00001DCC  43F9 000023E0           1382      LEA MOVELADL, A1 *MOVE long -(An) to xxx.L
00001DD2  2A09                    1383   MOVE.L A1, D5
00001DD4  123C 0010               1384    MOVE.B #16, D1
00001DD8  4E71                    1385   NOP
00001DDA  E3AD                    1386   LSL.L D1, D5
00001DDC  B885                    1387   CMP.L D5, D4
00001DDE  6700 2050               1388   BEQ MOVELADL_D 
00001DE2                          1389  
00001DE2                          1390  
00001DE2  43F9 000013F8           1391      LEA MOVEBWL, A1 *MOVE Byte xxx.w to xxx.L
00001DE8  2A09                    1392   MOVE.L A1, D5
00001DEA  123C 0010               1393    MOVE.B #16, D1
00001DEE  4E71                    1394   NOP
00001DF0  E3AD                    1395   LSL.L D1, D5
00001DF2  B885                    1396   CMP.L D5, D4
00001DF4  6700 2044               1397   BEQ MOVEBWL_D 
00001DF8                          1398   
00001DF8  43F9 000033F8           1399       LEA MOVEWWL, A1 *MOVE word xxx.w to xxx.L
00001DFE  2A09                    1400   MOVE.L A1, D5
00001E00  123C 0010               1401    MOVE.B #16, D1
00001E04  4E71                    1402   NOP
00001E06  E3AD                    1403   LSL.L D1, D5
00001E08  B885                    1404   CMP.L D5, D4
00001E0A  6700 2038               1405   BEQ MOVEWWL_D 
00001E0E                          1406   
00001E0E  43F9 000023F8           1407      LEA MOVELWL, A1 *MOVE long xxx.w to xxx.L
00001E14  2A09                    1408   MOVE.L A1, D5
00001E16  123C 0010               1409    MOVE.B #16, D1
00001E1A  4E71                    1410   NOP
00001E1C  E3AD                    1411   LSL.L D1, D5
00001E1E  B885                    1412   CMP.L D5, D4
00001E20  6700 202C               1413   BEQ MOVELWL_D
00001E24                          1414  
00001E24  43F9 000013F9           1415      LEA MOVEBLL, A1 *MOVE Byte xxx.L to xxx.L
00001E2A  2A09                    1416   MOVE.L A1, D5
00001E2C  123C 0010               1417    MOVE.B #16, D1
00001E30  4E71                    1418   NOP
00001E32  E3AD                    1419   LSL.L D1, D5
00001E34  B885                    1420   CMP.L D5, D4
00001E36  6700 2020               1421   BEQ MOVEBLL_D 
00001E3A                          1422   
00001E3A  43F9 000033F9           1423       LEA MOVEWLL, A1 *MOVE word xxx.L to xxx.L
00001E40  2A09                    1424   MOVE.L A1, D5
00001E42  123C 0010               1425    MOVE.B #16, D1
00001E46  4E71                    1426   NOP
00001E48  E3AD                    1427   LSL.L D1, D5
00001E4A  B885                    1428   CMP.L D5, D4
00001E4C  6700 2014               1429   BEQ MOVEWLL_D 
00001E50                          1430   
00001E50  43F9 000023F9           1431      LEA MOVELLL, A1 *MOVE long xxx.L to xxx.L
00001E56  2A09                    1432   MOVE.L A1, D5
00001E58  123C 0010               1433    MOVE.B #16, D1
00001E5C  4E71                    1434   NOP
00001E5E  E3AD                    1435   LSL.L D1, D5
00001E60  B885                    1436   CMP.L D5, D4
00001E62  6700 2008               1437   BEQ MOVELLL_D
00001E66                          1438   
00001E66  43F9 000013FC           1439       LEA MOVEBIL, A1 *MOVE Byte imm to xxx.L
00001E6C  2A09                    1440   MOVE.L A1, D5
00001E6E  123C 0010               1441    MOVE.B #16, D1
00001E72  4E71                    1442   NOP
00001E74  E3AD                    1443   LSL.L D1, D5
00001E76  B885                    1444   CMP.L D5, D4
00001E78  6700 1FFC               1445   BEQ MOVEBIL_D 
00001E7C                          1446   
00001E7C  43F9 000033FC           1447       LEA MOVEWIL, A1 *MOVE word imm to xxx.L
00001E82  2A09                    1448   MOVE.L A1, D5
00001E84  123C 0010               1449    MOVE.B #16, D1
00001E88  4E71                    1450   NOP
00001E8A  E3AD                    1451   LSL.L D1, D5
00001E8C  B885                    1452   CMP.L D5, D4
00001E8E  6700 1FF0               1453   BEQ MOVEWIL_D 
00001E92                          1454   
00001E92  43F9 000023FC           1455      LEA MOVELIL, A1 *MOVE long imm to xxx.L
00001E98  2A09                    1456   MOVE.L A1, D5
00001E9A  123C 0010               1457    MOVE.B #16, D1
00001E9E  4E71                    1458   NOP
00001EA0  E3AD                    1459   LSL.L D1, D5
00001EA2  B885                    1460   CMP.L D5, D4
00001EA4  6700 1FE4               1461   BEQ MOVELIL_D
00001EA8                          1462   
00001EA8  544E                    1463   ADDQ.W    #2, A6   *Go to next instruction
00001EAA  6000 3738               1464   BRA IFINVADDRMODE  *The opcode is MOVE, but the addressing modes are incorrect
00001EAE                          1465   
00001EAE                          1466   *----------------------------------------------------*
00001EAE                          1467   
00001EAE                          1468   * MOVEA
00001EAE                          1469  * we will mask the instruction, and if
00001EAE                          1470  * the result matches a pattern for MOVEA, we have a valid optcode :D
00001EAE                          1471  * if not we will have to check the rest of the optcodes
00001EAE  45F9 0000C1C0           1472  CHECK_MOVEAs    LEA   GENERAL_MOVEA_MASK, A2   *Get General Mask
00001EB4                          1473  
00001EB4  360A                    1474      MOVE.W A2, D3       *Move mask to D3
00001EB6                          1475  
00001EB6  3816                    1476      MOVE.W (A6), D4  *Get opcode from memory to D4
00001EB8                          1477  
00001EB8  C843                    1478      AND.W  D3, D4       *Mask Opcode
00001EBA                          1479  
00001EBA  45F9 00000040           1480      LEA    GENERAL_MOVEA, A2    *Get General MOVEA Opcode
00001EC0                          1481  
00001EC0  3A0A                    1482      MOVE.W  A2, D5      *Move GENERAL MOVEA Opcode to D5
00001EC2                          1483  
00001EC2  B845                    1484      CMP.W   D5, D4      *Compare Opcode with GENERAL MOVEA
00001EC4                          1485  
00001EC4  6600 013A               1486      BNE     CHECK_ADDs     *If not Equal, Proceed to next instruction (ADD)
00001EC8                          1487      
00001EC8                          1488      
00001EC8                          1489  * Else, check MOVEA varaints
00001EC8                          1490  
00001EC8                          1491  
00001EC8                          1492  
00001EC8                          1493  
00001EC8  41F9 0000F1C0           1494      LEA MOVEAMASK, A0 * the mask
00001ECE  3416                    1495    MOVE.W (A6), D2
00001ED0  45F9 00000007           1496   LEA MVALUEMASK1 , A2 * mask to isolate the first operand
00001ED6  47F9 00000E00           1497   LEA MVALUEMASK2 , A3 * mask to isolate the second operand
00001EDC                          1498   
00001EDC  123C 0010               1499   MOVE.B #16, D1                 * we need to shift the mask so it works with longs
00001EE0  2A08                    1500    MOVE.L A0, D5
00001EE2  E3AD                    1501    LSL.L D1, D5
00001EE4  2045                    1502    MOVE.L D5, A0
00001EE6                          1503     *perform the masking
00001EE6  2608                    1504   MOVE.L A0, D3
00001EE8  2802                    1505   MOVE.L D2, D4
00001EEA  4E71                    1506   NOP
00001EEC  E3AC                    1507   LSL.L D1,D4
00001EEE  4E71                    1508   NOP
00001EF0  C883                    1509   AND.L D3, D4
00001EF2                          1510   
00001EF2                          1511   
00001EF2  43F9 00003040           1512   LEA MOVEAWD, A1 *MOVEA Word Dn to An
00001EF8  2A09                    1513   MOVE.L A1, D5
00001EFA  123C 0010               1514    MOVE.B #16, D1
00001EFE  4E71                    1515   NOP
00001F00  E3AD                    1516   LSL.L D1, D5
00001F02  B885                    1517   CMP.L D5, D4
00001F04  6700 1F96               1518   BEQ MOVEAWD_D
00001F08                          1519   
00001F08  43F9 00002040           1520    LEA MOVEALD, A1 *MOVEA Long Dn to An
00001F0E  2A09                    1521   MOVE.L A1, D5
00001F10  123C 0010               1522    MOVE.B #16, D1
00001F14  4E71                    1523   NOP
00001F16  E3AD                    1524   LSL.L D1, D5
00001F18  B885                    1525   CMP.L D5, D4
00001F1A  6700 1F88               1526   BEQ MOVEALD_D
00001F1E                          1527   
00001F1E  43F9 00003048           1528    LEA MOVEAWA, A1 *MOVEA Word An to An
00001F24  2A09                    1529   MOVE.L A1, D5
00001F26  123C 0010               1530    MOVE.B #16, D1
00001F2A  4E71                    1531   NOP
00001F2C  E3AD                    1532   LSL.L D1, D5
00001F2E  B885                    1533   CMP.L D5, D4
00001F30  6700 1F7A               1534   BEQ MOVEAWA_D
00001F34                          1535   
00001F34  43F9 00002048           1536    LEA MOVEALA, A1 *MOVEA Long An to An
00001F3A  2A09                    1537   MOVE.L A1, D5
00001F3C  123C 0010               1538    MOVE.B #16, D1
00001F40  4E71                    1539   NOP
00001F42  E3AD                    1540   LSL.L D1, D5
00001F44  B885                    1541   CMP.L D5, D4
00001F46  6700 1F6C               1542   BEQ MOVEALA_D
00001F4A                          1543   
00001F4A  43F9 00003058           1544     LEA MOVEAWPA, A1 *MOVEA Word An+ to An
00001F50  2A09                    1545   MOVE.L A1, D5
00001F52  123C 0010               1546    MOVE.B #16, D1
00001F56  4E71                    1547   NOP
00001F58  E3AD                    1548   LSL.L D1, D5
00001F5A  B885                    1549   CMP.L D5, D4
00001F5C  6700 1F6E               1550   BEQ MOVEAWPA_D
00001F60                          1551   
00001F60  43F9 00002058           1552    LEA MOVEALPA, A1 *MOVEA Long An+ to An
00001F66  2A09                    1553   MOVE.L A1, D5
00001F68  123C 0010               1554    MOVE.B #16, D1
00001F6C  4E71                    1555   NOP
00001F6E  E3AD                    1556   LSL.L D1, D5
00001F70  B885                    1557   CMP.L D5, D4
00001F72  6700 1F60               1558   BEQ MOVEALPA_D
00001F76                          1559   
00001F76  43F9 00003060           1560     LEA MOVEAWDA, A1 *MOVEA Word -An to An
00001F7C  2A09                    1561   MOVE.L A1, D5
00001F7E  123C 0010               1562    MOVE.B #16, D1
00001F82  4E71                    1563   NOP
00001F84  E3AD                    1564   LSL.L D1, D5
00001F86  B885                    1565   CMP.L D5, D4
00001F88  6700 1F52               1566   BEQ MOVEAWDA_D
00001F8C                          1567   
00001F8C  43F9 00002060           1568    LEA MOVEALDA, A1 *MOVEA Long -An to An
00001F92  2A09                    1569   MOVE.L A1, D5
00001F94  123C 0010               1570    MOVE.B #16, D1
00001F98  4E71                    1571   NOP
00001F9A  E3AD                    1572   LSL.L D1, D5
00001F9C  B885                    1573   CMP.L D5, D4
00001F9E  6700 1F44               1574   BEQ MOVEALDA_D
00001FA2                          1575   
00001FA2                          1576   
00001FA2  43F9 00003078           1577      LEA MOVEAWWA, A1 *MOVEA Word  to An
00001FA8  2A09                    1578   MOVE.L A1, D5
00001FAA  123C 0010               1579    MOVE.B #16, D1
00001FAE  4E71                    1580   NOP
00001FB0  E3AD                    1581   LSL.L D1, D5
00001FB2  B885                    1582   CMP.L D5, D4
00001FB4  6700 1F46               1583   BEQ MOVEAWWA_D
00001FB8                          1584   
00001FB8  43F9 00002079           1585    LEA MOVEALLA, A1 *MOVEA Long  to An
00001FBE  2A09                    1586   MOVE.L A1, D5
00001FC0  123C 0010               1587    MOVE.B #16, D1
00001FC4  4E71                    1588   NOP
00001FC6  E3AD                    1589   LSL.L D1, D5
00001FC8  B885                    1590   CMP.L D5, D4
00001FCA  6700 1F28               1591   BEQ MOVEALLA_D
00001FCE                          1592   
00001FCE                          1593   
00001FCE  43F9 0003079C           1594    LEA MOVEAWIA, A1 *MOVEA Word imm to An
00001FD4  2A09                    1595   MOVE.L A1, D5
00001FD6  123C 0010               1596    MOVE.B #16, D1
00001FDA  4E71                    1597   NOP
00001FDC  E3AD                    1598   LSL.L D1, D5
00001FDE  B885                    1599   CMP.L D5, D4
00001FE0  6700 1F2A               1600   BEQ MOVEAWIA_D
00001FE4                          1601   
00001FE4                          1602   
00001FE4                          1603   
00001FE4  43F9 0000207C           1604    LEA MOVEALIA, A1 *MOVEA Long  imm to An
00001FEA  2A09                    1605   MOVE.L A1, D5
00001FEC  123C 0010               1606    MOVE.B #16, D1
00001FF0  4E71                    1607   NOP
00001FF2  E3AD                    1608   LSL.L D1, D5
00001FF4  B885                    1609   CMP.L D5, D4
00001FF6  6700 1F22               1610   BEQ MOVEALIA_D
00001FFA                          1611   
00001FFA  544E                    1612    ADDQ.W    #2, A6      *Go to next instruction
00001FFC  6000 35E6               1613      BRA IFINVADDRMODE  *The opcode is MOVEA, but the addressing modes are incorrect
00002000                          1614   
00002000                          1615   *_________________________________________*
00002000                          1616    
00002000                          1617   * ADD
00002000                          1618  * we will mask the instruction, and if
00002000                          1619  * the result matches a pattern for ADD, we have a valid optcode :D
00002000                          1620  * if not we will have to check the rest of the optcodes
00002000  45F9 0000F000           1621  CHECK_ADDs    LEA   GENERAL_ADD_ADDA_MASK, A2   *Get General Mask
00002006                          1622  
00002006  360A                    1623      MOVE.W A2, D3       *Move mask to D3
00002008                          1624  
00002008  3816                    1625      MOVE.W (A6), D4  *Get opcode from memory to D4
0000200A                          1626  
0000200A  C843                    1627      AND.W  D3, D4       *Mask Opcode
0000200C                          1628  
0000200C  45F9 0000D000           1629      LEA    GENERAL_ADD_ADDA, A2    *Get General ADD Opcode
00002012                          1630  
00002012  3A0A                    1631      MOVE.W  A2, D5      *Move GENERAL ADD Opcode to D5
00002014                          1632  
00002014  B845                    1633      CMP.W   D5, D4      *Compare Opcode with GENERAL ADD
00002016                          1634  
00002016  6600 01EA               1635      BNE     CHECK_ADDAs     *If not Equal, Proceed to next instruction (ADDA)
0000201A                          1636      
0000201A                          1637      
0000201A                          1638  * Else, check ADD varaints
0000201A                          1639  
0000201A                          1640  
0000201A                          1641  
0000201A  41F9 0000F1F8           1642      LEA ADDMASK, A0 * the mask
00002020                          1643   
00002020                          1644  
00002020  3416                    1645    MOVE.W (A6), D2
00002022  45F9 00000007           1646   LEA MVALUEMASK1 , A2 * mask to isolate the first operand
00002028  47F9 00000E00           1647   LEA MVALUEMASK2 , A3 * mask to isolate the second operand
0000202E                          1648   
0000202E  123C 0010               1649   MOVE.B #16, D1                 * we need to shift the mask so it works with longs
00002032  2A08                    1650    MOVE.L A0, D5
00002034  E3AD                    1651    LSL.L D1, D5
00002036  2045                    1652    MOVE.L D5, A0
00002038                          1653     *perform the masking
00002038  2608                    1654   MOVE.L A0, D3
0000203A  2802                    1655   MOVE.L D2, D4
0000203C  4E71                    1656   NOP
0000203E  E3AC                    1657   LSL.L D1,D4
00002040  4E71                    1658   NOP
00002042  C883                    1659   AND.L D3, D4
00002044                          1660   
00002044  43F9 0000D000           1661     LEA ADDBDD, A1 *ADD  byte Dn to Dn
0000204A  2A09                    1662   MOVE.L A1, D5
0000204C  123C 0010               1663    MOVE.B #16, D1
00002050  4E71                    1664   NOP
00002052  E3AD                    1665   LSL.L D1, D5
00002054  B885                    1666   CMP.L D5, D4
00002056  6700 1ED0               1667   BEQ ADDBDD_D
0000205A                          1668   
0000205A  43F9 0000D040           1669      LEA ADDWDD, A1 *ADD  word Dn to Dn
00002060  2A09                    1670   MOVE.L A1, D5
00002062  123C 0010               1671    MOVE.B #16, D1
00002066  4E71                    1672   NOP
00002068  E3AD                    1673   LSL.L D1, D5
0000206A  B885                    1674   CMP.L D5, D4
0000206C  6700 1EC2               1675   BEQ ADDWDD_D
00002070                          1676   
00002070  43F9 0000D080           1677    LEA ADDLDD, A1 *ADD  Long Dn to Dn
00002076  2A09                    1678   MOVE.L A1, D5
00002078  123C 0010               1679    MOVE.B #16, D1
0000207C  4E71                    1680   NOP
0000207E  E3AD                    1681   LSL.L D1, D5
00002080  B885                    1682   CMP.L D5, D4
00002082  6700 1EB4               1683   BEQ ADDLDD_D
00002086                          1684  
00002086                          1685  
00002086                          1686   
00002086  43F9 0000D048           1687      LEA ADDWAD, A1 *ADD  word An to Dn
0000208C  2A09                    1688   MOVE.L A1, D5
0000208E  123C 0010               1689    MOVE.B #16, D1
00002092  4E71                    1690   NOP
00002094  E3AD                    1691   LSL.L D1, D5
00002096  B885                    1692   CMP.L D5, D4
00002098  6700 1EEE               1693   BEQ ADDWAD_D
0000209C                          1694   
0000209C  43F9 0000D088           1695    LEA ADDLAD, A1 *ADD  Long An to Dn
000020A2  2A09                    1696   MOVE.L A1, D5
000020A4  123C 0010               1697    MOVE.B #16, D1
000020A8  4E71                    1698   NOP
000020AA  E3AD                    1699   LSL.L D1, D5
000020AC  B885                    1700   CMP.L D5, D4
000020AE  6700 1EE0               1701   BEQ ADDLAD_D
000020B2                          1702   
000020B2                          1703   
000020B2  43F9 0000D010           1704      LEA ADDBAID, A1 *ADD  byte (An) to Dn
000020B8  2A09                    1705   MOVE.L A1, D5
000020BA  123C 0010               1706    MOVE.B #16, D1
000020BE  4E71                    1707   NOP
000020C0  E3AD                    1708   LSL.L D1, D5
000020C2  B885                    1709   CMP.L D5, D4
000020C4  6700 1ED2               1710   BEQ ADDBAID_D
000020C8                          1711   
000020C8  43F9 0000D050           1712      LEA ADDWAID, A1 *ADD  word (An) to Dn
000020CE  2A09                    1713   MOVE.L A1, D5
000020D0  123C 0010               1714    MOVE.B #16, D1
000020D4  4E71                    1715   NOP
000020D6  E3AD                    1716   LSL.L D1, D5
000020D8  B885                    1717   CMP.L D5, D4
000020DA  6700 1EC4               1718   BEQ ADDWAID_D
000020DE                          1719   
000020DE  43F9 0000D080           1720    LEA ADDLAID, A1 *ADD  Long (An) to Dn
000020E4  2A09                    1721   MOVE.L A1, D5
000020E6  123C 0010               1722    MOVE.B #16, D1
000020EA  4E71                    1723   NOP
000020EC  E3AD                    1724   LSL.L D1, D5
000020EE  B885                    1725   CMP.L D5, D4
000020F0  6700 1EB6               1726   BEQ ADDLAID_D
000020F4                          1727  
000020F4                          1728  
000020F4                          1729  
000020F4                          1730  
000020F4  43F9 0000D018           1731      LEA ADDBAPD, A1 *ADD  byte (An)+ to Dn
000020FA  2A09                    1732   MOVE.L A1, D5
000020FC  123C 0010               1733    MOVE.B #16, D1
00002100  4E71                    1734   NOP
00002102  E3AD                    1735   LSL.L D1, D5
00002104  B885                    1736   CMP.L D5, D4
00002106  6700 1EA8               1737   BEQ ADDBAPD_D
0000210A                          1738   
0000210A  43F9 0000D058           1739      LEA ADDWAPD, A1 *ADD  word (An)+ to Dn
00002110  2A09                    1740   MOVE.L A1, D5
00002112  123C 0010               1741    MOVE.B #16, D1
00002116  4E71                    1742   NOP
00002118  E3AD                    1743   LSL.L D1, D5
0000211A  B885                    1744   CMP.L D5, D4
0000211C  6700 1E9A               1745   BEQ ADDWAPD_D
00002120                          1746   
00002120  43F9 0000D088           1747    LEA ADDLAPD, A1 *ADD  Long (An)+ to Dn
00002126  2A09                    1748   MOVE.L A1, D5
00002128  123C 0010               1749    MOVE.B #16, D1
0000212C  4E71                    1750   NOP
0000212E  E3AD                    1751   LSL.L D1, D5
00002130  B885                    1752   CMP.L D5, D4
00002132  6700 1E8C               1753   BEQ ADDLAPD_D
00002136                          1754  
00002136  43F9 0000D020           1755      LEA ADDBADD, A1 *ADD  byte -(An) to Dn
0000213C  2A09                    1756   MOVE.L A1, D5
0000213E  123C 0010               1757    MOVE.B #16, D1
00002142  4E71                    1758   NOP
00002144  E3AD                    1759   LSL.L D1, D5
00002146  B885                    1760   CMP.L D5, D4
00002148  6700 1E7E               1761   BEQ ADDBADD_D
0000214C                          1762   
0000214C  43F9 0000D060           1763      LEA ADDWADD, A1 *ADD  word -(An) to Dn
00002152  2A09                    1764   MOVE.L A1, D5
00002154  123C 0010               1765    MOVE.B #16, D1
00002158  4E71                    1766   NOP
0000215A  E3AD                    1767   LSL.L D1, D5
0000215C  B885                    1768   CMP.L D5, D4
0000215E  6700 1E70               1769   BEQ ADDWADD_D
00002162                          1770   
00002162  43F9 0000D0A0           1771    LEA ADDLADD, A1 *ADD  Long -(An) to Dn
00002168  2A09                    1772   MOVE.L A1, D5
0000216A  123C 0010               1773    MOVE.B #16, D1
0000216E  4E71                    1774   NOP
00002170  E3AD                    1775   LSL.L D1, D5
00002172  B885                    1776   CMP.L D5, D4
00002174  6700 1E62               1777   BEQ ADDLADD_D
00002178                          1778   
00002178                          1779  
00002178  43F9 0000D038           1780   LEA ADDBWD, A1 *ADD  byte xxx.w to Dn
0000217E  2A09                    1781   MOVE.L A1, D5
00002180  123C 0010               1782    MOVE.B #16, D1
00002184  4E71                    1783   NOP
00002186  E3AD                    1784   LSL.L D1, D5
00002188  B885                    1785   CMP.L D5, D4
0000218A  6700 1E5E               1786   BEQ ADDWWD_D
0000218E                          1787   
0000218E  43F9 0000D078           1788   LEA ADDWWD, A1 *ADD  word xxx.w to Dn
00002194  2A09                    1789   MOVE.L A1, D5
00002196  123C 0010               1790    MOVE.B #16, D1
0000219A  4E71                    1791   NOP
0000219C  E3AD                    1792   LSL.L D1, D5
0000219E  B885                    1793   CMP.L D5, D4
000021A0  6700 1E48               1794   BEQ ADDWWD_D
000021A4                          1795   
000021A4  43F9 0000D0B8           1796   LEA ADDLWD, A1 *ADD  Long xxx.w to Dn
000021AA  2A09                    1797   MOVE.L A1, D5
000021AC  123C 0010               1798    MOVE.B #16, D1
000021B0  4E71                    1799   NOP
000021B2  E3AD                    1800   LSL.L D1, D5
000021B4  B885                    1801   CMP.L D5, D4
000021B6  6700 1E3C               1802   BEQ ADDLWD_D
000021BA                          1803   
000021BA  43F9 0000D039           1804   LEA ADDBLD, A1 *ADD  byte xxx.L to Dn
000021C0  2A09                    1805   MOVE.L A1, D5
000021C2  123C 0010               1806    MOVE.B #16, D1
000021C6  4E71                    1807   NOP
000021C8  E3AD                    1808   LSL.L D1, D5
000021CA  B885                    1809   CMP.L D5, D4
000021CC  6700 1E1C               1810   BEQ ADDWWD_D
000021D0                          1811   
000021D0  43F9 0000D079           1812   LEA ADDWLD, A1 *ADD  word xxx.L to Dn
000021D6  2A09                    1813   MOVE.L A1, D5
000021D8  123C 0010               1814    MOVE.B #16, D1
000021DC  4E71                    1815   NOP
000021DE  E3AD                    1816   LSL.L D1, D5
000021E0  B885                    1817   CMP.L D5, D4
000021E2  6700 1E2E               1818   BEQ ADDLLD_D
000021E6                          1819   
000021E6  43F9 0000D0B9           1820   LEA ADDLLD, A1 *ADD  Long xxx.L to Dn
000021EC  2A09                    1821   MOVE.L A1, D5
000021EE  123C 0010               1822    MOVE.B #16, D1
000021F2  4E71                    1823   NOP
000021F4  E3AD                    1824   LSL.L D1, D5
000021F6  B885                    1825   CMP.L D5, D4
000021F8  6700 1E18               1826   BEQ ADDLLD_D
000021FC                          1827      
000021FC  544E                    1828      ADDQ.W    #2, A6      *Go to next instruction
000021FE  6000 33E4               1829       BRA IFINVADDRMODE  *The opcode is ADD, but the addressing modes are incorrect
00002202                          1830   *_________________________________________*
00002202                          1831   * ADDA
00002202                          1832  * we will mask the instruction, and if
00002202                          1833  * the result matches a pattern for ADD, we have a valid optcode :D
00002202                          1834  * if not we will have to check the rest of the optcodes
00002202  45F9 0000F000           1835  CHECK_ADDAs    LEA   GENERAL_ADD_ADDA_MASK, A2   *Get General Mask
00002208                          1836  
00002208  360A                    1837      MOVE.W A2, D3       *Move mask to D3
0000220A                          1838  
0000220A  3816                    1839      MOVE.W (A6), D4  *Get opcode from memory to D4
0000220C                          1840  
0000220C  C843                    1841      AND.W  D3, D4       *Mask Opcode
0000220E                          1842  
0000220E  45F9 0000D000           1843      LEA    GENERAL_ADD_ADDA, A2    *Get General ADDA Opcode
00002214                          1844  
00002214  3A0A                    1845      MOVE.W  A2, D5      *Move GENERAL ADDA Opcode to D5
00002216                          1846  
00002216  B845                    1847      CMP.W   D5, D4      *Compare Opcode with GENERAL ADDA
00002218                          1848  
00002218  6600 0108               1849      BNE     CHECK_ADDQs     *If not Equal, Proceed to next instruction (ADDQ)
0000221C                          1850      
0000221C                          1851      
0000221C                          1852  * Else, check MOVE varaints
0000221C                          1853  
0000221C                          1854   
0000221C                          1855  
0000221C  41F9 0000F1F8           1856      LEA ADDAMASK, A0 * the mask
00002222                          1857   
00002222                          1858  
00002222  3416                    1859    MOVE.W (A6), D2
00002224  45F9 00000007           1860   LEA MVALUEMASK1 , A2 * mask to isolate the first operand
0000222A  47F9 00000E00           1861   LEA MVALUEMASK2 , A3 * mask to isolate the second operand
00002230                          1862   
00002230  123C 0010               1863   MOVE.B #16, D1                 * we need to shift the mask so it works with longs
00002234  2A08                    1864    MOVE.L A0, D5
00002236  E3AD                    1865    LSL.L D1, D5
00002238  2045                    1866    MOVE.L D5, A0
0000223A                          1867     *perform the masking
0000223A  2608                    1868   MOVE.L A0, D3
0000223C  2802                    1869   MOVE.L D2, D4
0000223E  4E71                    1870   NOP
00002240  E3AC                    1871   LSL.L D1,D4
00002242  4E71                    1872   NOP
00002244  C883                    1873   AND.L D3, D4
00002246                          1874  
00002246                          1875   
00002246  43F9 0000D0C0           1876   LEA ADDAWDA, A1 *ADDA  word Dn to An
0000224C  2A09                    1877   MOVE.L A1, D5
0000224E  123C 0010               1878    MOVE.B #16, D1
00002252  4E71                    1879   NOP
00002254  E3AD                    1880   LSL.L D1, D5
00002256  B885                    1881   CMP.L D5, D4
00002258  6700 1DC2               1882   BEQ ADDAWDA_D
0000225C                          1883   
0000225C  43F9 0000D1C0           1884   LEA ADDALDA, A1 *ADDA  Long Dn to An
00002262  2A09                    1885   MOVE.L A1, D5
00002264  123C 0010               1886    MOVE.B #16, D1
00002268  4E71                    1887   NOP
0000226A  E3AD                    1888   LSL.L D1, D5
0000226C  B885                    1889   CMP.L D5, D4
0000226E  6700 1DB4               1890   BEQ ADDALDA_D
00002272                          1891  
00002272                          1892  
00002272  43F9 0000D0C8           1893   LEA ADDWA, A1 *ADDA  word An to An
00002278  2A09                    1894   MOVE.L A1, D5
0000227A  123C 0010               1895    MOVE.B #16, D1
0000227E  4E71                    1896   NOP
00002280  E3AD                    1897   LSL.L D1, D5
00002282  B885                    1898   CMP.L D5, D4
00002284  6700 1DA6               1899   BEQ ADDAWA_D
00002288                          1900   
00002288  43F9 0000D1C8           1901   LEA ADDLA, A1 *ADDA  Long An to An
0000228E  2A09                    1902   MOVE.L A1, D5
00002290  123C 0010               1903    MOVE.B #16, D1
00002294  4E71                    1904   NOP
00002296  E3AD                    1905   LSL.L D1, D5
00002298  B885                    1906   CMP.L D5, D4
0000229A  6700 1D98               1907   BEQ ADDALA_D
0000229E                          1908  
0000229E  43F9 0000D0D0           1909   LEA ADDWIA, A1 *ADDA  word (An) to An
000022A4  2A09                    1910   MOVE.L A1, D5
000022A6  123C 0010               1911    MOVE.B #16, D1
000022AA  4E71                    1912   NOP
000022AC  E3AD                    1913   LSL.L D1, D5
000022AE  B885                    1914   CMP.L D5, D4
000022B0  6700 1D8A               1915   BEQ ADDAWIA_D
000022B4                          1916   
000022B4  43F9 0000D1D0           1917   LEA ADDLIA, A1 *ADDA  Long (An) to An
000022BA  2A09                    1918   MOVE.L A1, D5
000022BC  123C 0010               1919    MOVE.B #16, D1
000022C0  4E71                    1920   NOP
000022C2  E3AD                    1921   LSL.L D1, D5
000022C4  B885                    1922   CMP.L D5, D4
000022C6  6700 1D7C               1923   BEQ ADDALIA_D
000022CA                          1924   
000022CA                          1925   
000022CA                          1926   
000022CA  43F9 0000D0D8           1927    LEA ADDWPA, A1 *ADDA  word (An)+ to An
000022D0  2A09                    1928   MOVE.L A1, D5
000022D2  123C 0010               1929    MOVE.B #16, D1
000022D6  4E71                    1930   NOP
000022D8  E3AD                    1931   LSL.L D1, D5
000022DA  B885                    1932   CMP.L D5, D4
000022DC  6700 1D6E               1933   BEQ ADDAWPA_D
000022E0                          1934   
000022E0  43F9 0000D1D8           1935   LEA ADDLPA, A1 *ADDA  Long (An)+ to An
000022E6  2A09                    1936   MOVE.L A1, D5
000022E8  123C 0010               1937    MOVE.B #16, D1
000022EC  4E71                    1938   NOP
000022EE  E3AD                    1939   LSL.L D1, D5
000022F0  B885                    1940   CMP.L D5, D4
000022F2  6700 1D60               1941   BEQ ADDALPA_D
000022F6                          1942   
000022F6  43F9 0000D0D8           1943     LEA ADDWPA, A1 *ADDA  word -(An) to An
000022FC  2A09                    1944   MOVE.L A1, D5
000022FE  123C 0010               1945    MOVE.B #16, D1
00002302  4E71                    1946   NOP
00002304  E3AD                    1947   LSL.L D1, D5
00002306  43F9 0000D1D8           1948   LEA ADDLPA, A1 *ADDA  Long -(An) to An
0000230C  2A09                    1949   MOVE.L A1, D5
0000230E  123C 0010               1950    MOVE.B #16, D1
00002312  4E71                    1951   NOP
00002314  E3AD                    1952   LSL.L D1, D5
00002316  B885                    1953   CMP.L D5, D4
00002318  6700 1D3A               1954   BEQ ADDALPA_D
0000231C                          1955  
0000231C  544E                    1956      ADDQ.W    #2, A6      *Go to next instruction
0000231E  6000 32C4               1957       BRA IFINVADDRMODE  *The opcode is ADDA, but the addressing modes are incorrect
00002322                          1958  
00002322                          1959   *_________________________________________*
00002322                          1960   
00002322                          1961   * ADDQ
00002322                          1962  * we will mask the instruction, and if
00002322                          1963  * the result matches a pattern for ADD, we have a valid optcode :D
00002322                          1964  * if not we will have to check the rest of the optcodes
00002322  45F9 0000F100           1965  CHECK_ADDQs    LEA   GENERAL_ADDQ_MASK, A2   *Get General Mask
00002328                          1966  
00002328  360A                    1967      MOVE.W A2, D3       *Move mask to D3
0000232A                          1968  
0000232A  3816                    1969      MOVE.W (A6), D4  *Get opcode from memory to D4
0000232C                          1970  
0000232C  C843                    1971      AND.W  D3, D4       *Mask Opcode
0000232E                          1972  
0000232E  45F9 00005000           1973      LEA    GENERAL_ADDQ, A2    *Get General ADDQ Opcode
00002334                          1974  
00002334  3A0A                    1975      MOVE.W  A2, D5      *Move GENERAL ADDQ Opcode to D5
00002336                          1976  
00002336  B845                    1977      CMP.W   D5, D4      *Compare Opcode with GENERAL ADDQ
00002338                          1978  
00002338  6600 0200               1979      BNE     CHECK_BCCs     *If not Equal, Proceed to next instruction (BCC)
0000233C                          1980      
0000233C                          1981      
0000233C                          1982  * Else, check MOVE varaints
0000233C                          1983  
0000233C                          1984  
0000233C                          1985  
0000233C  41F9 0000F038           1986      LEA ADDQMASK, A0 * the mask
00002342                          1987   
00002342                          1988  
00002342  3416                    1989    MOVE.W (A6), D2
00002344  45F9 00000007           1990   LEA ADDQDEST , A2 * mask to isolate the operand
0000234A  47F9 00000E00           1991    LEA ADDQVALUE , A3 * mask to isolate the data
00002350                          1992  
00002350                          1993   
00002350  123C 0010               1994   MOVE.B #16, D1                 * we need to shift the mask so it works with longs
00002354  2A08                    1995    MOVE.L A0, D5
00002356  E3AD                    1996    LSL.L D1, D5
00002358  2045                    1997    MOVE.L D5, A0
0000235A                          1998     *perform the masking
0000235A  2608                    1999   MOVE.L A0, D3
0000235C  2802                    2000   MOVE.L D2, D4
0000235E  4E71                    2001   NOP
00002360  E3AC                    2002   LSL.L D1,D4
00002362  4E71                    2003   NOP
00002364  C883                    2004   AND.L D3, D4
00002366                          2005   
00002366                          2006   
00002366  43F9 00005000           2007    LEA ADDQBD, A1 *ADDQ Dn Byte
0000236C  2A09                    2008   MOVE.L A1, D5
0000236E  123C 0010               2009    MOVE.B #16, D1
00002372  4E71                    2010   NOP
00002374  E3AD                    2011   LSL.L D1, D5
00002376  B885                    2012   CMP.L D5, D4
00002378  6700 1CF2               2013   BEQ ADDQBD_D
0000237C                          2014   
0000237C                          2015   
0000237C  43F9 00005040           2016    LEA ADDQWD, A1 *ADDQ Dn Word
00002382  2A09                    2017   MOVE.L A1, D5
00002384  123C 0010               2018    MOVE.B #16, D1
00002388  4E71                    2019   NOP
0000238A  E3AD                    2020   LSL.L D1, D5
0000238C  B885                    2021   CMP.L D5, D4
0000238E  6700 1CE4               2022   BEQ ADDQWD_D
00002392                          2023   
00002392                          2024   
00002392  43F9 000050C0           2025    LEA ADDQLD, A1 *ADDQ Dn Long
00002398  2A09                    2026   MOVE.L A1, D5
0000239A  123C 0010               2027    MOVE.B #16, D1
0000239E  4E71                    2028   NOP
000023A0  E3AD                    2029   LSL.L D1, D5
000023A2  B885                    2030   CMP.L D5, D4
000023A4  6700 1CD6               2031   BEQ ADDQLD_D
000023A8                          2032   
000023A8  43F9 00005008           2033     LEA ADDQBA, A1 *ADDQ An Byte
000023AE  2A09                    2034   MOVE.L A1, D5
000023B0  123C 0010               2035    MOVE.B #16, D1
000023B4  4E71                    2036   NOP
000023B6  E3AD                    2037   LSL.L D1, D5
000023B8  B885                    2038   CMP.L D5, D4
000023BA  6700 1CC8               2039   BEQ ADDQBA_D
000023BE                          2040   
000023BE                          2041   
000023BE  43F9 00005048           2042    LEA ADDQWA, A1 *ADDQ An Word
000023C4  2A09                    2043   MOVE.L A1, D5
000023C6  123C 0010               2044    MOVE.B #16, D1
000023CA  4E71                    2045   NOP
000023CC  E3AD                    2046   LSL.L D1, D5
000023CE  B885                    2047   CMP.L D5, D4
000023D0  6700 1CBA               2048   BEQ ADDQWA_D
000023D4                          2049   
000023D4                          2050   
000023D4  43F9 000050C8           2051    LEA ADDQLA, A1 *ADDQ An Long
000023DA  2A09                    2052   MOVE.L A1, D5
000023DC  123C 0010               2053    MOVE.B #16, D1
000023E0  4E71                    2054   NOP
000023E2  E3AD                    2055   LSL.L D1, D5
000023E4  B885                    2056   CMP.L D5, D4
000023E6  6700 1CAC               2057   BEQ ADDQLA_D
000023EA                          2058   
000023EA  43F9 00005010           2059     LEA ADDQBAI, A1 *ADDQ (An) Byte
000023F0  2A09                    2060   MOVE.L A1, D5
000023F2  123C 0010               2061    MOVE.B #16, D1
000023F6  4E71                    2062   NOP
000023F8  E3AD                    2063   LSL.L D1, D5
000023FA  B885                    2064   CMP.L D5, D4
000023FC  6700 1C9E               2065   BEQ ADDQBAI_D
00002400                          2066   
00002400                          2067   
00002400  43F9 00005050           2068    LEA ADDQWAI, A1 *ADDQ (An) Word
00002406  2A09                    2069   MOVE.L A1, D5
00002408  123C 0010               2070    MOVE.B #16, D1
0000240C  4E71                    2071   NOP
0000240E  E3AD                    2072   LSL.L D1, D5
00002410  B885                    2073   CMP.L D5, D4
00002412  6700 1C90               2074   BEQ ADDQWAI_D
00002416                          2075   
00002416                          2076   
00002416  43F9 00005090           2077    LEA ADDQLAI , A1 *ADDQ (An) Long
0000241C  2A09                    2078   MOVE.L A1, D5
0000241E  123C 0010               2079    MOVE.B #16, D1
00002422  4E71                    2080   NOP
00002424  E3AD                    2081   LSL.L D1, D5
00002426  B885                    2082   CMP.L D5, D4
00002428  6700 1C82               2083   BEQ ADDQLAI_D
0000242C                          2084  
0000242C                          2085  
0000242C  43F9 00005018           2086     LEA ADDQBAPI, A1 *ADDQ (An)+ Byte
00002432  2A09                    2087   MOVE.L A1, D5
00002434  123C 0010               2088    MOVE.B #16, D1
00002438  4E71                    2089   NOP
0000243A  E3AD                    2090   LSL.L D1, D5
0000243C  B885                    2091   CMP.L D5, D4
0000243E  6700 1C74               2092   BEQ ADDQBAPI_D
00002442                          2093   
00002442                          2094   
00002442  43F9 00005058           2095    LEA ADDQWAPI, A1 *ADDQ (An)+ Word
00002448  2A09                    2096   MOVE.L A1, D5
0000244A  123C 0010               2097    MOVE.B #16, D1
0000244E  4E71                    2098   NOP
00002450  E3AD                    2099   LSL.L D1, D5
00002452  B885                    2100   CMP.L D5, D4
00002454  6700 1C66               2101   BEQ ADDQWAPI_D
00002458                          2102   
00002458                          2103   
00002458  43F9 00005098           2104    LEA ADDQLAPI , A1 *ADDQ (An)+ Long
0000245E  2A09                    2105   MOVE.L A1, D5
00002460  123C 0010               2106    MOVE.B #16, D1
00002464  4E71                    2107   NOP
00002466  E3AD                    2108   LSL.L D1, D5
00002468  B885                    2109   CMP.L D5, D4
0000246A  6700 1C58               2110   BEQ ADDQLAPI_D
0000246E                          2111   
0000246E                          2112   
0000246E                          2113   
0000246E  43F9 00005018           2114     LEA ADDQBAPD, A1 *ADDQ -(An) Byte
00002474  2A09                    2115   MOVE.L A1, D5
00002476  123C 0010               2116    MOVE.B #16, D1
0000247A  4E71                    2117   NOP
0000247C  E3AD                    2118   LSL.L D1, D5
0000247E  B885                    2119   CMP.L D5, D4
00002480  6700 1C4A               2120   BEQ ADDQBAPD_D
00002484                          2121   
00002484                          2122   
00002484  43F9 00005060           2123    LEA ADDQWAPD, A1 *ADDQ -(An) Word
0000248A  2A09                    2124   MOVE.L A1, D5
0000248C  123C 0010               2125    MOVE.B #16, D1
00002490  4E71                    2126   NOP
00002492  E3AD                    2127   LSL.L D1, D5
00002494  B885                    2128   CMP.L D5, D4
00002496  6700 1C3C               2129   BEQ ADDQWAPD_D
0000249A                          2130   
0000249A                          2131   
0000249A  43F9 00005048           2132    LEA ADDQLAPD , A1 *ADDQ -(An) Long
000024A0  2A09                    2133   MOVE.L A1, D5
000024A2  123C 0010               2134    MOVE.B #16, D1
000024A6  4E71                    2135   NOP
000024A8  E3AD                    2136   LSL.L D1, D5
000024AA  B885                    2137   CMP.L D5, D4
000024AC  6700 1C2E               2138   BEQ ADDQLAPD_D
000024B0                          2139   
000024B0                          2140   
000024B0  43F9 00005038           2141     LEA ADDQBW, A1 *ADDQ word Byte
000024B6  2A09                    2142   MOVE.L A1, D5
000024B8  123C 0010               2143    MOVE.B #16, D1
000024BC  4E71                    2144   NOP
000024BE  E3AD                    2145   LSL.L D1, D5
000024C0  B885                    2146   CMP.L D5, D4
000024C2  6700 1C20               2147   BEQ ADDQBW_D
000024C6                          2148   
000024C6                          2149   
000024C6  43F9 00005078           2150    LEA ADDQWW, A1 *ADDQ word Word
000024CC  2A09                    2151   MOVE.L A1, D5
000024CE  123C 0010               2152    MOVE.B #16, D1
000024D2  4E71                    2153   NOP
000024D4  E3AD                    2154   LSL.L D1, D5
000024D6  B885                    2155   CMP.L D5, D4
000024D8  6700 1C12               2156   BEQ ADDQWW_D
000024DC                          2157   
000024DC                          2158   
000024DC  43F9 000050B8           2159    LEA ADDQLW, A1 *ADDQ word Long
000024E2  2A09                    2160   MOVE.L A1, D5
000024E4  123C 0010               2161    MOVE.B #16, D1
000024E8  4E71                    2162   NOP
000024EA  E3AD                    2163   LSL.L D1, D5
000024EC  B885                    2164   CMP.L D5, D4
000024EE  6700 1C04               2165   BEQ ADDQLW_D
000024F2                          2166   
000024F2  43F9 00005039           2167      LEA ADDQBL, A1 *ADDQ long Byte
000024F8  2A09                    2168   MOVE.L A1, D5
000024FA  123C 0010               2169    MOVE.B #16, D1
000024FE  4E71                    2170   NOP
00002500  E3AD                    2171   LSL.L D1, D5
00002502  B885                    2172   CMP.L D5, D4
00002504  6700 1BF6               2173   BEQ ADDQBL_D
00002508                          2174   
00002508                          2175   
00002508  43F9 00005079           2176    LEA ADDQWL, A1 *ADDQ long Word
0000250E  2A09                    2177   MOVE.L A1, D5
00002510  123C 0010               2178    MOVE.B #16, D1
00002514  4E71                    2179   NOP
00002516  E3AD                    2180   LSL.L D1, D5
00002518  B885                    2181   CMP.L D5, D4
0000251A  6700 1BE8               2182   BEQ ADDQWL_D
0000251E                          2183   
0000251E                          2184   
0000251E  43F9 000050B9           2185    LEA ADDQLL, A1 *ADDQ long Long
00002524  2A09                    2186   MOVE.L A1, D5
00002526  123C 0010               2187    MOVE.B #16, D1
0000252A  4E71                    2188   NOP
0000252C  E3AD                    2189   LSL.L D1, D5
0000252E  B885                    2190   CMP.L D5, D4
00002530  6700 1BDA               2191   BEQ ADDQLL_D
00002534                          2192  
00002534  544E                    2193      ADDQ.W    #2, A6      *Go to next instruction
00002536  6000 30AC               2194       BRA IFINVADDRMODE  *The opcode is ADDQ, but the addressing modes are incorrect
0000253A                          2195  
0000253A                          2196  *--------------- BCC (BRA, BEQ, BGT, BLE) ----------*   Note: there is no GENERAL code for BCC because there is no invalid addressing modes
0000253A  45F9 0000FF00           2197  CHECK_BCCs    LEA   BCCMASK, A2   *Get Mask
00002540                          2198  
00002540  360A                    2199      MOVE.W A2, D3       *Move mask to D3
00002542                          2200  
00002542  3816                    2201      MOVE.W (A6), D4  *Get opcode from memory to D4
00002544                          2202  
00002544  C843                    2203      AND.W  D3, D4       *Mask Opcode
00002546                          2204  
00002546  45F9 00006000           2205  CHECK_BRA    LEA    BRACO, A2    *Get BRA Opcode
0000254C                          2206  
0000254C  3A0A                    2207      MOVE.W  A2, D5      *Move BRA Opcode to D5
0000254E                          2208  
0000254E  B845                    2209      CMP.W   D5, D4      *Compare Opcode with BRA
00002550                          2210  
00002550  6700 0E36               2211      BEQ     BRA_D     *If Equal, Proceed to operand decoding
00002554                          2212  
00002554  45F9 00006700           2213  CHECK_BEQ    LEA    BEQCO, A2    *Get BEQ Opcode
0000255A                          2214  
0000255A  3A0A                    2215      MOVE.W  A2, D5      *Move BEQ Opcode to D5
0000255C                          2216  
0000255C  B845                    2217      CMP.W   D5, D4      *Compare Current Opcode with BEQ
0000255E                          2218  
0000255E  6700 0E30               2219      BEQ     BEQ_D     *If Equal, Proceed to operand decoding
00002562                          2220  
00002562  45F9 00006E00           2221  CHECK_BGT    LEA    BGTCO, A2    *Get BGT Opcode
00002568                          2222  
00002568  3A0A                    2223      MOVE.W  A2, D5      *Move BGT Opcode to D5
0000256A                          2224  
0000256A  B845                    2225      CMP.W   D5, D4      *Compare current Opcode with BGT
0000256C                          2226  
0000256C  6700 0E2A               2227      BEQ     BGT_D     *If Equal, Proceed to operand decoding
00002570                          2228  
00002570  45F9 00006F00           2229  CHECK_BLE    LEA    BLECO, A2    *Get BLE Opcode
00002576                          2230  
00002576  3A0A                    2231      MOVE.W  A2, D5      *Move BLE Opcode to D5
00002578                          2232  
00002578  B845                    2233      CMP.W   D5, D4      *Compare Current Opcode with BLE
0000257A                          2234  
0000257A  6700 0E24               2235      BEQ     BLE_D     *If Equal, Proceed to operand decoding
0000257E                          2236  
0000257E                          2237  *------------ JSR ------------------------*
0000257E  45F9 0000FFC0           2238  CHECK_JSRs    LEA   GENERAL_JSR_MASK, A2   *Get General Mask
00002584                          2239  
00002584  360A                    2240      MOVE.W A2, D3       *Move mask to D3
00002586                          2241  
00002586  3816                    2242      MOVE.W (A6), D4  *Get opcode from memory to D4
00002588                          2243  
00002588  C843                    2244      AND.W  D3, D4       *Mask Opcode
0000258A                          2245  
0000258A  45F9 00004E80           2246      LEA    GENERAL_JSR, A2    *Get General JSR Opcode
00002590                          2247  
00002590  3A0A                    2248      MOVE.W  A2, D5      *Move GENERAL JSR Opcode to D5
00002592                          2249  
00002592  B845                    2250      CMP.W   D5, D4      *Compare Opcode with GENERAL JSR
00002594                          2251  
00002594  6600 003E               2252      BNE     CHECK_ASdEAs     *If not Equal, Proceed to next instruction (ASdEA)
00002598                          2253      
00002598                          2254      
00002598                          2255  * Else, check JSR varaints
00002598                          2256  
00002598                          2257  
00002598                          2258  
00002598                          2259  
00002598  45F9 0000FFF8           2260      LEA   JSRMASK, A2   *Get Mask
0000259E                          2261  
0000259E  360A                    2262      MOVE.W A2, D3       *Move mask to D3
000025A0                          2263  
000025A0  3816                    2264      MOVE.W (A6), D4  *Get opcode from memory to D4
000025A2                          2265  
000025A2                          2266  CHECK_JSRWA    *Since word and long addressing needs the masked bits, the original address is used(before masking)
000025A2                          2267  
000025A2  45F9 00004EB8           2268      LEA    JSRWA, A2    *Get JSR Word Address Opcode
000025A8                          2269  
000025A8  3A0A                    2270      MOVE.W  A2, D5      *Move JSR Word Address Opcode to D5
000025AA                          2271  
000025AA  B845                    2272      CMP.W   D5, D4      *Compare current Opcode with JSR Word Address
000025AC                          2273  
000025AC  6700 0E02               2274      BEQ     JSRWA_D     *If Equal, Proceed to operand decoding
000025B0                          2275  
000025B0  45F9 00004EB9           2276  CHECK_JSRLA    LEA    JSRLA, A2    *Get JSR Long Address Opcode
000025B6                          2277  
000025B6  3A0A                    2278      MOVE.W  A2, D5      *Move JSR Long Addres Opcode to D5
000025B8                          2279  
000025B8  B845                    2280      CMP.W   D5, D4      *Compare current Opcode with JSR Long Addres
000025BA                          2281  
000025BA  6700 0DFC               2282      BEQ     JSRLA_D     *If Equal, Proceed to operand decoding
000025BE                          2283  
000025BE                          2284  
000025BE                          2285  
000025BE                          2286  
000025BE  C843                    2287      AND.W  D3, D4       *Mask Opcode
000025C0                          2288  
000025C0                          2289  
000025C0                          2290  
000025C0  45F9 00004E90           2291  CHECK_JSRAI    LEA    JSRAI, A2    *Get JSR Indirect Address Register Opcode
000025C6                          2292  
000025C6  3A0A                    2293      MOVE.W  A2, D5      *Move JSR Indirect Address Register Opcode to D5
000025C8                          2294  
000025C8  B845                    2295      CMP.W   D5, D4      *Compare current Opcode with JSR Indirect Address Register
000025CA                          2296  
000025CA  6700 0DDC               2297      BEQ     JSRAI_D     *If Equal, Proceed to operand decoding
000025CE                          2298  
000025CE  544E                    2299      ADDQ.W    #2, A6      *Go to next instruction
000025D0  6000 3012               2300       BRA IFINVADDRMODE  *The opcode is JSR, but the addressing modes are incorrect
000025D4                          2301  
000025D4                          2302  *---------------- ASL EA --------------------*
000025D4  45F9 0000FEC0           2303  CHECK_ASdEAs    LEA   GENERAL_RSEA_MASK, A2   *Get General Mask
000025DA                          2304  
000025DA  360A                    2305      MOVE.W A2, D3       *Move mask to D3
000025DC                          2306  
000025DC  3816                    2307      MOVE.W (A6), D4  *Get opcode from memory to D4
000025DE                          2308  
000025DE  C843                    2309      AND.W  D3, D4       *Mask Opcode
000025E0                          2310  
000025E0  45F9 0000E0C0           2311      LEA    GENERAL_ASdEA, A2    *Get General ASdEA Opcode
000025E6                          2312  
000025E6  3A0A                    2313      MOVE.W  A2, D5      *Move GENERAL ASdEA Opcode to D5
000025E8                          2314  
000025E8  B845                    2315      CMP.W   D5, D4      *Compare Opcode with GENERAL ASdEA
000025EA                          2316  
000025EA  6600 00AC               2317      BNE     CHECK_LSdEAs     *If not Equal, Proceed to next instruction (LSdEA)
000025EE                          2318      
000025EE                          2319      
000025EE                          2320  * Else, check ASLEA and ASREA varaints
000025EE                          2321  
000025EE                          2322      
000025EE                          2323  
000025EE  45F9 0000FFF8           2324      LEA   RSEAMASK, A2   *Get Mask
000025F4                          2325  
000025F4  360A                    2326      MOVE.W A2, D3       *Move mask to D3
000025F6                          2327  
000025F6  3816                    2328      MOVE.W (A6), D4  *Get opcode from memory to D4
000025F8                          2329  
000025F8  45F9 0000E1F8           2330  CHECK_ASLWA  LEA ASLWA, A2  *Get ASL word address opcode
000025FE                          2331  
000025FE  3A0A                    2332              MOVE.W  A2, D5  *Move ASL word address opcode to D5
00002600                          2333  
00002600  B845                    2334              CMP.W   D5, D4  *Compare current opcode with ASL word address
00002602                          2335  
00002602  6700 0DD4               2336              BEQ     ASLWA_D *If Equal, Proceed to operand decoding
00002606                          2337  
00002606                          2338  
00002606  45F9 0000E1F9           2339  CHECK_ASLLA  LEA ASLLA, A2  *Determine if opcode is ASL Long Address
0000260C                          2340  
0000260C  3A0A                    2341              MOVE.W  A2, D5
0000260E                          2342  
0000260E  B845                    2343              CMP.W   D5, D4
00002610                          2344  
00002610  6700 0DCE               2345              BEQ     ASLLA_D
00002614                          2346  
00002614                          2347  
00002614  C843                    2348              AND.W  D3, D4       *Mask Opcode
00002616                          2349  
00002616  45F9 0000E1D0           2350  CHECK_ASLAI  LEA ASLAI, A2  *Determine if opcode is ASL Indirect Address Register
0000261C                          2351  
0000261C  3A0A                    2352              MOVE.W  A2, D5
0000261E                          2353  
0000261E  B845                    2354              CMP.W   D5, D4
00002620                          2355  
00002620  6700 0D9E               2356              BEQ     ASLAI_D
00002624                          2357  
00002624  45F9 0000E1D8           2358  CHECK_ASLPI  LEA ASLPI, A2  *Determine if opcode is ASL Post Increment Address Register
0000262A                          2359  
0000262A  3A0A                    2360              MOVE.W  A2, D5
0000262C                          2361  
0000262C  B845                    2362              CMP.W   D5, D4
0000262E                          2363  
0000262E  6700 0D98               2364              BEQ     ASLPI_D
00002632                          2365  
00002632  45F9 0000E1E0           2366  CHECK_ASLPD  LEA ASLPD, A2  *Determine if opcode is ASL Pre Decrement Adress Register
00002638                          2367  
00002638  3A0A                    2368              MOVE.W  A2, D5
0000263A                          2369  
0000263A  B845                    2370              CMP.W   D5, D4
0000263C                          2371  
0000263C  6700 0D92               2372              BEQ     ASLPD_D
00002640                          2373  
00002640                          2374  *---------------- ASR EA --------------------*
00002640  45F9 0000FFF8           2375  CHECK_ASREAs    LEA   RSEAMASK, A2   *Get Mask
00002646                          2376  
00002646  360A                    2377      MOVE.W A2, D3       *Move mask to D3
00002648                          2378  
00002648  3816                    2379      MOVE.W (A6), D4  *Get opcode from memory to D4
0000264A                          2380  
0000264A  45F9 0000E0F8           2381  CHECK_ASRWA  LEA ASRWA, A2  *Determine if opcode is ASR Word Address
00002650                          2382  
00002650  3A0A                    2383              MOVE.W  A2, D5
00002652                          2384  
00002652  B845                    2385              CMP.W   D5, D4
00002654                          2386  
00002654  6700 0DDA               2387              BEQ     ASRWA_D
00002658                          2388  
00002658                          2389  
00002658  45F9 0000E0F9           2390  CHECK_ASRLA  LEA ASRLA, A2  *Determine if opcode is ASR Long Address
0000265E                          2391  
0000265E  3A0A                    2392              MOVE.W  A2, D5
00002660                          2393  
00002660  B845                    2394              CMP.W   D5, D4
00002662                          2395  
00002662  6700 0DD4               2396              BEQ     ASRLA_D
00002666                          2397  
00002666                          2398  
00002666  C843                    2399              AND.W  D3, D4       *Mask Opcode
00002668                          2400  
00002668  45F9 0000E0D0           2401  CHECK_ASRAI  LEA ASRAI, A2  *Determine if opcode is ASR Indirect Address Register
0000266E                          2402  
0000266E  3A0A                    2403              MOVE.W  A2, D5
00002670                          2404  
00002670  B845                    2405              CMP.W   D5, D4
00002672                          2406  
00002672  6700 0DA4               2407              BEQ     ASRAI_D
00002676                          2408  
00002676  45F9 0000E0D8           2409  CHECK_ASRPI  LEA ASRPI, A2  *Determine if opcode is ASR Post Increment Address Register
0000267C                          2410  
0000267C  3A0A                    2411              MOVE.W  A2, D5
0000267E                          2412  
0000267E  B845                    2413              CMP.W   D5, D4
00002680                          2414  
00002680  6700 0D9E               2415              BEQ     ASRPI_D
00002684                          2416  
00002684  45F9 0000E0E0           2417  CHECK_ASRPD  LEA ASRPD, A2  *Determine if opcode is ASR Pre Decrement Address Register
0000268A                          2418  
0000268A  3A0A                    2419              MOVE.W  A2, D5
0000268C                          2420  
0000268C  B845                    2421              CMP.W   D5, D4
0000268E                          2422  
0000268E  6700 0D98               2423              BEQ     ASRPD_D
00002692                          2424              
00002692  544E                    2425              ADDQ.W    #2, A6      *Go to next instruction
00002694  6000 2F4E               2426               BRA IFINVADDRMODE  *The opcode is ASdEA, but the addressing modes are incorrect
00002698                          2427  
00002698                          2428  *---------------- LSL EA --------------------*
00002698  45F9 0000FEC0           2429  CHECK_LSdEAs   LEA   GENERAL_RSEA_MASK, A2   *Get General Mask
0000269E                          2430  
0000269E  360A                    2431      MOVE.W A2, D3       *Move mask to D3
000026A0                          2432  
000026A0  3816                    2433      MOVE.W (A6), D4  *Get opcode from memory to D4
000026A2                          2434  
000026A2  C843                    2435      AND.W  D3, D4       *Mask Opcode
000026A4                          2436  
000026A4  45F9 0000E2C0           2437      LEA    GENERAL_LSdEA, A2    *Get General LSdEA Opcode
000026AA                          2438  
000026AA  3A0A                    2439      MOVE.W  A2, D5      *Move GENERAL LSdEA Opcode to D5
000026AC                          2440  
000026AC  B845                    2441      CMP.W   D5, D4      *Compare Opcode with GENERAL LSdEA
000026AE                          2442  
000026AE  6600 00AC               2443      BNE     CHECK_ROdEAs     *If not Equal, Proceed to next instruction (ROdEA)
000026B2                          2444      
000026B2                          2445      
000026B2                          2446  * Else, check LSLEA and LSREA varaints
000026B2                          2447  
000026B2                          2448  
000026B2                          2449  
000026B2  45F9 0000FFF8           2450      LEA   RSEAMASK, A2   *Get Mask
000026B8                          2451  
000026B8  360A                    2452      MOVE.W A2, D3       *Move mask to D3
000026BA                          2453  
000026BA  3816                    2454      MOVE.W (A6), D4  *Get opcode from memory to D4
000026BC                          2455  
000026BC  45F9 0000E3F8           2456  CHECK_LSLWA  LEA LSLWA, A2  *Determine if opcode is LSL Word Address
000026C2                          2457  
000026C2  3A0A                    2458              MOVE.W  A2, D5
000026C4                          2459  
000026C4  B845                    2460              CMP.W   D5, D4
000026C6                          2461  
000026C6  6700 0DC0               2462              BEQ     LSLWA_D
000026CA                          2463  
000026CA                          2464  
000026CA  45F9 0000E3F9           2465  CHECK_LSLLA  LEA LSLLA, A2  *Determine if opcode is LSL Long Address
000026D0                          2466  
000026D0  3A0A                    2467              MOVE.W  A2, D5
000026D2                          2468  
000026D2  B845                    2469              CMP.W   D5, D4
000026D4                          2470  
000026D4  6700 0DBA               2471              BEQ     LSLLA_D
000026D8                          2472  
000026D8                          2473  
000026D8  C843                    2474              AND.W  D3, D4       *Mask Opcode
000026DA                          2475  
000026DA  45F9 0000E3D0           2476  CHECK_LSLAI  LEA LSLAI, A2  *Determine if opcode is LSL Indirect Address Register
000026E0                          2477  
000026E0  3A0A                    2478              MOVE.W  A2, D5
000026E2                          2479  
000026E2  B845                    2480              CMP.W   D5, D4
000026E4                          2481  
000026E4  6700 0D8A               2482              BEQ     LSLAI_D
000026E8                          2483  
000026E8  45F9 0000E3D8           2484  CHECK_LSLPI  LEA LSLPI, A2  *Determine if opcode is LSL Post Increment Address Register
000026EE                          2485  
000026EE  3A0A                    2486              MOVE.W  A2, D5
000026F0                          2487  
000026F0  B845                    2488              CMP.W   D5, D4
000026F2                          2489  
000026F2  6700 0D84               2490              BEQ     LSLPI_D
000026F6                          2491  
000026F6  45F9 0000E3E0           2492  CHECK_LSLPD  LEA LSLPD, A2  *Determine if opcode is LSL Pre Decrement Address Register
000026FC                          2493  
000026FC  3A0A                    2494              MOVE.W  A2, D5
000026FE                          2495  
000026FE  B845                    2496              CMP.W   D5, D4
00002700                          2497  
00002700  6700 0D7E               2498              BEQ     LSLPD_D
00002704                          2499  
00002704                          2500  
00002704                          2501  *---------------- LSR EA --------------------*
00002704  45F9 0000FFF8           2502  CHECK_LSREAs    LEA   RSEAMASK, A2   *Get Mask
0000270A                          2503  
0000270A  360A                    2504      MOVE.W A2, D3       *Move mask to D3
0000270C                          2505  
0000270C  3816                    2506      MOVE.W (A6), D4  *Get opcode from memory to D4
0000270E                          2507  
0000270E  45F9 0000E2F8           2508  CHECK_LSRWA  LEA LSRWA, A2  *Determine if opcode is LSR Word Address
00002714                          2509  
00002714  3A0A                    2510              MOVE.W  A2, D5
00002716                          2511  
00002716  B845                    2512              CMP.W   D5, D4
00002718                          2513  
00002718  6700 0DC6               2514              BEQ     LSRWA_D
0000271C                          2515  
0000271C                          2516  
0000271C  45F9 0000E2F9           2517  CHECK_LSRLA  LEA LSRLA, A2  *Determine if opcode is LSR Long Address
00002722                          2518  
00002722  3A0A                    2519              MOVE.W  A2, D5
00002724                          2520  
00002724  B845                    2521              CMP.W   D5, D4
00002726                          2522  
00002726  6700 0DC0               2523              BEQ     LSRLA_D
0000272A                          2524  
0000272A                          2525  
0000272A  C843                    2526              AND.W  D3, D4       *Mask Opcode
0000272C                          2527  
0000272C  45F9 0000E2D0           2528  CHECK_LSRAI  LEA LSRAI, A2  *Determine if opcode is LSR Indirect Address Register
00002732                          2529  
00002732  3A0A                    2530              MOVE.W  A2, D5
00002734                          2531  
00002734  B845                    2532              CMP.W   D5, D4
00002736                          2533  
00002736  6700 0D90               2534              BEQ     LSRAI_D
0000273A                          2535  
0000273A  45F9 0000E2D8           2536  CHECK_LSRPI  LEA LSRPI, A2  *Determine if opcode is LSR Post Increment Address Register
00002740                          2537  
00002740  3A0A                    2538              MOVE.W  A2, D5
00002742                          2539  
00002742  B845                    2540              CMP.W   D5, D4
00002744                          2541  
00002744  6700 0D8A               2542              BEQ     LSRPI_D
00002748                          2543  
00002748  45F9 0000E2E0           2544  CHECK_LSRPD  LEA LSRPD, A2  *Determine if opcode is LSR Pre Decrement Address Register
0000274E                          2545  
0000274E  3A0A                    2546              MOVE.W  A2, D5
00002750                          2547  
00002750  B845                    2548              CMP.W   D5, D4
00002752                          2549  
00002752  6700 0D84               2550              BEQ     LSRPD_D
00002756                          2551  
00002756  544E                    2552              ADDQ.W    #2, A6      *Go to next instruction
00002758  6000 2E8A               2553               BRA IFINVADDRMODE  *The opcode is LSdEA, but the addressing modes are incorrect
0000275C                          2554  
0000275C                          2555  
0000275C                          2556  *---------------- ROL EA --------------------*
0000275C  45F9 0000FEC0           2557  CHECK_ROdEAs   LEA   GENERAL_RSEA_MASK, A2   *Get General Mask
00002762                          2558  
00002762  360A                    2559      MOVE.W A2, D3       *Move mask to D3
00002764                          2560  
00002764  3816                    2561      MOVE.W (A6), D4  *Get opcode from memory to D4
00002766                          2562  
00002766  C843                    2563      AND.W  D3, D4       *Mask Opcode
00002768                          2564  
00002768  45F9 0000E6C0           2565      LEA    GENERAL_ROdEA, A2    *Get General ROdEA Opcode
0000276E                          2566  
0000276E  3A0A                    2567      MOVE.W  A2, D5      *Move GENERAL MOVE Opcode to D5
00002770                          2568  
00002770  B845                    2569      CMP.W   D5, D4      *Compare Opcode with GENERAL ROdEA
00002772                          2570  
00002772  6600 00AC               2571      BNE     CHECK_ASdDIs     *If not Equal, Proceed to next instruction (ASdDI)
00002776                          2572      
00002776                          2573      
00002776                          2574  * Else, check ROLEA and ROREA varaints
00002776                          2575  
00002776                          2576  
00002776                          2577  
00002776  45F9 0000FFF8           2578       LEA   RSEAMASK, A2   *Get Mask
0000277C                          2579  
0000277C  360A                    2580      MOVE.W A2, D3       *Move mask to D3
0000277E                          2581  
0000277E  3816                    2582      MOVE.W (A6), D4  *Get opcode from memory to D4
00002780                          2583  
00002780  45F9 0000E7F8           2584  CHECK_ROLWA  LEA ROLWA, A2  *Determine if opcode is ROL Word Address
00002786                          2585  
00002786  3A0A                    2586              MOVE.W  A2, D5
00002788                          2587  
00002788  B845                    2588              CMP.W   D5, D4
0000278A                          2589  
0000278A  6700 0DAC               2590              BEQ     ROLWA_D
0000278E                          2591  
0000278E                          2592  
0000278E  45F9 0000E7F9           2593  CHECK_ROLLA  LEA ROLLA, A2  *Determine if opcode is ROL Long Address
00002794                          2594  
00002794  3A0A                    2595              MOVE.W  A2, D5
00002796                          2596  
00002796  B845                    2597              CMP.W   D5, D4
00002798                          2598  
00002798  6700 0DA6               2599              BEQ     ROLLA_D
0000279C                          2600  
0000279C                          2601  
0000279C  C843                    2602              AND.W  D3, D4       *Mask Opcode
0000279E                          2603  
0000279E  45F9 0000E7D0           2604  CHECK_ROLAI  LEA ROLAI, A2  *Determine if opcode is ROL Indirect Address Register
000027A4                          2605  
000027A4  3A0A                    2606              MOVE.W  A2, D5
000027A6                          2607  
000027A6  B845                    2608              CMP.W   D5, D4
000027A8                          2609  
000027A8  6700 0D76               2610              BEQ     ROLAI_D
000027AC                          2611  
000027AC  45F9 0000E7D8           2612  CHECK_ROLPI  LEA ROLPI, A2  *Determine if opcode is ROL Post Increment Address Register
000027B2                          2613  
000027B2  3A0A                    2614              MOVE.W  A2, D5
000027B4                          2615  
000027B4  B845                    2616              CMP.W   D5, D4
000027B6                          2617  
000027B6  6700 0D70               2618              BEQ     ROLPI_D
000027BA                          2619  
000027BA  45F9 0000E7E0           2620  CHECK_ROLPD  LEA ROLPD, A2  *Determine if opcode is ROL Pre Decrement Address Register
000027C0                          2621  
000027C0  3A0A                    2622              MOVE.W  A2, D5
000027C2                          2623  
000027C2  B845                    2624              CMP.W   D5, D4
000027C4                          2625  
000027C4  6700 0D6A               2626              BEQ     ROLPD_D
000027C8                          2627  
000027C8                          2628  
000027C8                          2629  *---------------- ROR EA --------------------*
000027C8  45F9 0000FFF8           2630  CHECK_ROREAs    LEA   RSEAMASK, A2   *Get Mask
000027CE                          2631  
000027CE  360A                    2632      MOVE.W A2, D3       *Move mask to D3
000027D0                          2633  
000027D0  3816                    2634      MOVE.W (A6), D4  *Get opcode from memory to D4
000027D2                          2635  
000027D2  45F9 0000E6F8           2636  CHECK_RORWA  LEA RORWA, A2  *Determine if opcode is ROR Word Address
000027D8                          2637  
000027D8  3A0A                    2638              MOVE.W  A2, D5
000027DA                          2639  
000027DA  B845                    2640              CMP.W   D5, D4
000027DC                          2641  
000027DC  6700 0DB2               2642              BEQ     RORWA_D
000027E0                          2643  
000027E0                          2644  
000027E0  45F9 0000E6F9           2645  CHECK_RORLA  LEA RORLA, A2  *Determine if opcode is ROR Long Address
000027E6                          2646  
000027E6  3A0A                    2647              MOVE.W  A2, D5
000027E8                          2648  
000027E8  B845                    2649              CMP.W   D5, D4
000027EA                          2650  
000027EA  6700 0DAC               2651              BEQ     RORLA_D
000027EE                          2652  
000027EE                          2653  
000027EE  C843                    2654              AND.W  D3, D4       *Mask Opcode
000027F0                          2655  
000027F0  45F9 0000E6D0           2656  CHECK_RORAI  LEA RORAI, A2  *Determine if opcode is ROR Indirect Address Register
000027F6                          2657  
000027F6  3A0A                    2658              MOVE.W  A2, D5
000027F8                          2659  
000027F8  B845                    2660              CMP.W   D5, D4
000027FA                          2661  
000027FA  6700 0D7C               2662              BEQ     RORAI_D
000027FE                          2663  
000027FE  45F9 0000E6D8           2664  CHECK_RORPI  LEA RORPI, A2  *Determine if opcode is ROR Post Increment Address Register
00002804                          2665  
00002804  3A0A                    2666              MOVE.W  A2, D5
00002806                          2667  
00002806  B845                    2668              CMP.W   D5, D4
00002808                          2669  
00002808  6700 0D76               2670              BEQ     RORPI_D
0000280C                          2671  
0000280C  45F9 0000E6E0           2672  CHECK_RORPD  LEA RORPD, A2  *Determine if opcode is ROR Pre Decrement Address Register
00002812                          2673  
00002812  3A0A                    2674              MOVE.W  A2, D5
00002814                          2675  
00002814  B845                    2676              CMP.W   D5, D4
00002816                          2677  
00002816  6700 0D70               2678              BEQ     RORPD_D
0000281A                          2679              
0000281A  544E                    2680              ADDQ.W    #2, A6      *Go to next instruction
0000281C  6000 2DC6               2681               BRA IFINVADDRMODE  *The opcode is ROdEA, but the addressing modes are incorrect
00002820                          2682  
00002820                          2683  *---------------- ASL Data/Immediate --------------------*
00002820  45F9 0000F018           2684  CHECK_ASdDIs    LEA   GENERAL_RSDI_MASK, A2   *Get General Mask
00002826                          2685  
00002826  360A                    2686      MOVE.W A2, D3       *Move mask to D3
00002828                          2687  
00002828  3816                    2688      MOVE.W (A6), D4  *Get opcode from memory to D4
0000282A                          2689  
0000282A  C843                    2690      AND.W  D3, D4       *Mask Opcode
0000282C                          2691  
0000282C  45F9 0000E000           2692      LEA    GENERAL_ASdDI, A2    *Get General ASdDI Opcode
00002832                          2693  
00002832  3A0A                    2694      MOVE.W  A2, D5      *Move GENERAL ASdDI Opcode to D5
00002834                          2695  
00002834  B845                    2696      CMP.W   D5, D4      *Compare Opcode with GENERAL ASdDI
00002836                          2697  
00002836  6600 00C8               2698      BNE     CHECK_LSdDIs     *If not Equal, Proceed to next instruction (LSdDI)
0000283A                          2699      
0000283A                          2700      
0000283A                          2701  * Else, check ASLDI and ASRDI varaints
0000283A                          2702  
0000283A                          2703  
0000283A                          2704  
0000283A  45F9 0000F1F8           2705      LEA   RSDIMASK, A2   *Get Mask
00002840                          2706  
00002840  360A                    2707      MOVE.W A2, D3       *Move mask to D3
00002842                          2708  
00002842  3816                    2709      MOVE.W (A6), D4  *Get opcode from memory to D4
00002844                          2710  
00002844  C843                    2711      AND.W  D3, D4       *Mask Opcode
00002846                          2712  
00002846  45F9 0000E120           2713  CHECK_ASLBD  LEA ASLBD, A2  *Determine if opcode is ASL.B Data Register
0000284C                          2714  
0000284C  3A0A                    2715              MOVE.W  A2, D5
0000284E                          2716  
0000284E  B845                    2717              CMP.W   D5, D4
00002850                          2718  
00002850  6700 0B96               2719              BEQ     ASLBD_D
00002854                          2720  
00002854  45F9 0000E160           2721  CHECK_ASLWD  LEA ASLWD, A2   *Determine if opcode is ASL.W Data Register
0000285A                          2722  
0000285A  3A0A                    2723              MOVE.W  A2, D5
0000285C                          2724  
0000285C  B845                    2725              CMP.W   D5, D4
0000285E                          2726  
0000285E  6700 0B90               2727              BEQ     ASLWD_D
00002862                          2728  
00002862  45F9 0000E1A0           2729  CHECK_ASLLD  LEA ASLLD, A2  *Determine if opcode is ASL.L Data Register
00002868                          2730  
00002868  3A0A                    2731              MOVE.W  A2, D5
0000286A                          2732  
0000286A  B845                    2733              CMP.W   D5, D4
0000286C                          2734  
0000286C  6700 0B8A               2735              BEQ     ASLLD_D
00002870                          2736  
00002870  45F9 0000E100           2737  CHECK_ASLBI  LEA ASLBI, A2  *Determine if opcode is ASL.B Immediate Value
00002876                          2738  
00002876  3A0A                    2739              MOVE.W  A2, D5
00002878                          2740  
00002878  B845                    2741              CMP.W   D5, D4
0000287A                          2742  
0000287A  6700 0B84               2743              BEQ     ASLBI_D
0000287E                          2744  
0000287E  45F9 0000E140           2745  CHECK_ASLWI  LEA ASLWI, A2  *Determine if opcode is ASL.W Immediate Value
00002884                          2746  
00002884  3A0A                    2747              MOVE.W  A2, D5
00002886                          2748  
00002886  B845                    2749              CMP.W   D5, D4
00002888                          2750  
00002888  6700 0B7E               2751              BEQ     ASLWI_D
0000288C                          2752  
0000288C  45F9 0000E180           2753  CHECK_ASLLI  LEA ASLLI, A2  *Determine if opcode is ASL.L Immediate Value
00002892                          2754  
00002892  3A0A                    2755              MOVE.W  A2, D5
00002894                          2756  
00002894  B845                    2757              CMP.W   D5, D4
00002896                          2758  
00002896  6700 0B78               2759              BEQ     ASLLI_D
0000289A                          2760  
0000289A                          2761  *---------------- ASR Data/Immediate --------------------*
0000289A  45F9 0000F1F8           2762  CHECK_ASRDIs    LEA   RSDIMASK, A2   *Get Mask
000028A0                          2763  
000028A0  360A                    2764      MOVE.W A2, D3       *Move mask to D3
000028A2                          2765  
000028A2  3816                    2766      MOVE.W (A6), D4  *Get opcode from memory to D4
000028A4                          2767  
000028A4  C843                    2768      AND.W  D3, D4       *Mask Opcode
000028A6                          2769  
000028A6  45F9 0000E020           2770  CHECK_ASRBD  LEA ASRBD, A2  *Determine if opcode is ASR.B Data Register
000028AC                          2771  
000028AC  3A0A                    2772              MOVE.W  A2, D5
000028AE                          2773  
000028AE  B845                    2774              CMP.W   D5, D4
000028B0                          2775  
000028B0  6700 0B8E               2776              BEQ     ASRBD_D
000028B4                          2777  
000028B4  45F9 0000E060           2778  CHECK_ASRWD  LEA ASRWD, A2  *Determine if opcode is ASR.W Data Register
000028BA                          2779  
000028BA  3A0A                    2780              MOVE.W  A2, D5
000028BC                          2781  
000028BC  B845                    2782              CMP.W   D5, D4
000028BE                          2783  
000028BE  6700 0B88               2784              BEQ     ASRWD_D
000028C2                          2785  
000028C2  45F9 0000E0A0           2786  CHECK_ASRLD  LEA ASRLD, A2  *Determine if opcode is ASR.L Data Register
000028C8                          2787  
000028C8  3A0A                    2788              MOVE.W  A2, D5
000028CA                          2789  
000028CA  B845                    2790              CMP.W   D5, D4
000028CC                          2791  
000028CC  6700 0B82               2792              BEQ     ASRLD_D
000028D0                          2793  
000028D0  45F9 0000E000           2794  CHECK_ASRBI  LEA ASRBI, A2  *Determine if opcode is ASR.B Immediate Value
000028D6                          2795  
000028D6  3A0A                    2796              MOVE.W  A2, D5
000028D8                          2797  
000028D8  B845                    2798              CMP.W   D5, D4
000028DA                          2799  
000028DA  6700 0B7C               2800              BEQ     ASRBI_D
000028DE                          2801  
000028DE  45F9 0000E040           2802  CHECK_ASRWI  LEA ASRWI, A2  *Determine if opcode is ASR.W Immediate Value
000028E4                          2803  
000028E4  3A0A                    2804              MOVE.W  A2, D5
000028E6                          2805  
000028E6  B845                    2806              CMP.W   D5, D4
000028E8                          2807  
000028E8  6700 0B76               2808              BEQ     ASRWI_D
000028EC                          2809  
000028EC  45F9 0000E080           2810  CHECK_ASRLI  LEA ASRLI, A2  *Determine if opcode is ASR.L Immediate Value
000028F2                          2811  
000028F2  3A0A                    2812              MOVE.W  A2, D5
000028F4                          2813  
000028F4  B845                    2814              CMP.W   D5, D4
000028F6                          2815  
000028F6  6700 0B70               2816              BEQ     ASRLI_D
000028FA                          2817              
000028FA  544E                    2818              ADDQ.W    #2, A6      *Go to next instruction
000028FC  6000 2CE6               2819               BRA IFINVADDRMODE  *The opcode is ASdDI, but the addressing modes are incorrect
00002900                          2820  
00002900                          2821  *---------------- LSL Data/Immediate --------------------*
00002900  45F9 0000F018           2822  CHECK_LSdDIs    LEA   GENERAL_RSDI_MASK, A2   *Get General Mask
00002906                          2823  
00002906  360A                    2824      MOVE.W A2, D3       *Move mask to D3
00002908                          2825  
00002908  3816                    2826      MOVE.W (A6), D4  *Get opcode from memory to D4
0000290A                          2827  
0000290A  C843                    2828      AND.W  D3, D4       *Mask Opcode
0000290C                          2829  
0000290C  45F9 0000E008           2830      LEA    GENERAL_LSdDI, A2    *Get General LSdDI Opcode
00002912                          2831  
00002912  3A0A                    2832      MOVE.W  A2, D5      *Move GENERAL LSdDI Opcode to D5
00002914                          2833  
00002914  B845                    2834      CMP.W   D5, D4      *Compare Opcode with GENERAL LSdDI
00002916                          2835  
00002916  6600 00C8               2836      BNE     CHECK_ROdDIs     *If not Equal, Proceed to next instruction (ROdDI)
0000291A                          2837      
0000291A                          2838      
0000291A                          2839  * Else, check LSLDI and LSRDI varaints
0000291A                          2840  
0000291A                          2841  
0000291A                          2842  
0000291A  45F9 0000F1F8           2843      LEA   RSDIMASK, A2   *Get Mask
00002920                          2844  
00002920  360A                    2845      MOVE.W A2, D3       *Move mask to D3
00002922                          2846  
00002922  3816                    2847      MOVE.W (A6), D4  *Get opcode from memory to D4
00002924                          2848  
00002924  C843                    2849      AND.W  D3, D4       *Mask Opcode
00002926                          2850  
00002926  45F9 0000E128           2851  CHECK_LSLBD  LEA LSLBD, A2  *Determine if opcode is LSL.B Data Register
0000292C                          2852  
0000292C  3A0A                    2853              MOVE.W  A2, D5
0000292E                          2854  
0000292E  B845                    2855              CMP.W   D5, D4
00002930                          2856  
00002930  6700 0B66               2857              BEQ     LSLBD_D
00002934                          2858  
00002934  45F9 0000E168           2859  CHECK_LSLWD  LEA LSLWD, A2  *Determine if opcode is LSL.W Data Register
0000293A                          2860  
0000293A  3A0A                    2861              MOVE.W  A2, D5
0000293C                          2862  
0000293C  B845                    2863              CMP.W   D5, D4
0000293E                          2864  
0000293E  6700 0B60               2865              BEQ     LSLWD_D
00002942                          2866  
00002942  45F9 0000E1A8           2867  CHECK_LSLLD  LEA LSLLD, A2  *Determine if opcode is LSL.L Data Register
00002948                          2868  
00002948  3A0A                    2869              MOVE.W  A2, D5
0000294A                          2870  
0000294A  B845                    2871              CMP.W   D5, D4
0000294C                          2872  
0000294C  6700 0B5A               2873              BEQ     LSLLD_D
00002950                          2874  
00002950  45F9 0000E108           2875  CHECK_LSLBI  LEA LSLBI, A2  *Determine if opcode is LSL.B Immediate Value
00002956                          2876  
00002956  3A0A                    2877              MOVE.W  A2, D5
00002958                          2878  
00002958  B845                    2879              CMP.W   D5, D4
0000295A                          2880  
0000295A  6700 0B54               2881              BEQ     LSLBI_D
0000295E                          2882  
0000295E  45F9 0000E148           2883  CHECK_LSLWI  LEA LSLWI, A2  *Determine if opcode is LSL.W Immediate Value
00002964                          2884  
00002964  3A0A                    2885              MOVE.W  A2, D5
00002966                          2886  
00002966  B845                    2887              CMP.W   D5, D4
00002968                          2888  
00002968  6700 0B4E               2889              BEQ     LSLWI_D
0000296C                          2890  
0000296C  45F9 0000E188           2891  CHECK_LSLLI  LEA LSLLI, A2  *Determine if opcode is LSL.L Immediate Value
00002972                          2892  
00002972  3A0A                    2893              MOVE.W  A2, D5
00002974                          2894  
00002974  B845                    2895              CMP.W   D5, D4
00002976                          2896  
00002976  6700 0B48               2897              BEQ     LSLLI_D
0000297A                          2898  
0000297A                          2899  
0000297A                          2900  *---------------- LSR Data/Immediate --------------------*
0000297A  45F9 0000F1F8           2901  CHECK_LSRDIs    LEA   RSDIMASK, A2   *Get Mask
00002980                          2902  
00002980  360A                    2903      MOVE.W A2, D3       *Move mask to D3
00002982                          2904  
00002982  3816                    2905      MOVE.W (A6), D4  *Get opcode from memory to D4
00002984                          2906  
00002984  C843                    2907      AND.W  D3, D4       *Mask Opcode
00002986                          2908  
00002986  45F9 0000E028           2909  CHECK_LSRBD  LEA LSRBD, A2  *Determine if opcode is LSR.B Data Register
0000298C                          2910  
0000298C  3A0A                    2911              MOVE.W  A2, D5
0000298E                          2912  
0000298E  B845                    2913              CMP.W   D5, D4
00002990                          2914  
00002990  6700 0B5E               2915              BEQ     LSRBD_D
00002994                          2916  
00002994  45F9 0000E068           2917  CHECK_LSRWD  LEA LSRWD, A2  *Determine if opcode is LSR.W Data Register
0000299A                          2918  
0000299A  3A0A                    2919              MOVE.W  A2, D5
0000299C                          2920  
0000299C  B845                    2921              CMP.W   D5, D4
0000299E                          2922  
0000299E  6700 0B58               2923              BEQ     LSRWD_D
000029A2                          2924  
000029A2  45F9 0000E0A8           2925  CHECK_LSRLD  LEA LSRLD, A2  *Determine if opcode is LSR.L Data Register
000029A8                          2926  
000029A8  3A0A                    2927              MOVE.W  A2, D5
000029AA                          2928  
000029AA  B845                    2929              CMP.W   D5, D4
000029AC                          2930  
000029AC  6700 0B52               2931              BEQ     LSRLD_D
000029B0                          2932  
000029B0  45F9 0000E008           2933  CHECK_LSRBI  LEA LSRBI, A2  *Determine if opcode is LSR.B Immediate Value
000029B6                          2934  
000029B6  3A0A                    2935              MOVE.W  A2, D5
000029B8                          2936  
000029B8  B845                    2937              CMP.W   D5, D4
000029BA                          2938  
000029BA  6700 0B4C               2939              BEQ     LSRBI_D
000029BE                          2940  
000029BE  45F9 0000E048           2941  CHECK_LSRWI  LEA LSRWI, A2  *Determine if opcode is LSR.W Immediate Value
000029C4                          2942  
000029C4  3A0A                    2943              MOVE.W  A2, D5
000029C6                          2944  
000029C6  B845                    2945              CMP.W   D5, D4
000029C8                          2946  
000029C8  6700 0B46               2947              BEQ     LSRWI_D
000029CC                          2948  
000029CC  45F9 0000E088           2949  CHECK_LSRLI  LEA LSRLI, A2  *Determine if opcode is LSR.L Immediate Value
000029D2                          2950  
000029D2  3A0A                    2951              MOVE.W  A2, D5
000029D4                          2952  
000029D4  B845                    2953              CMP.W   D5, D4
000029D6                          2954  
000029D6  6700 0B40               2955              BEQ     LSRLI_D
000029DA                          2956              
000029DA  544E                    2957              ADDQ.W    #2, A6      *Go to next instruction
000029DC  6000 2C06               2958               BRA IFINVADDRMODE  *The opcode is LSdDI, but the addressing modes are incorrect
000029E0                          2959  
000029E0                          2960  *---------------- ROL Data/Immediate --------------------*
000029E0  45F9 0000F018           2961  CHECK_ROdDIs    LEA   GENERAL_RSDI_MASK, A2   *Get General Mask
000029E6                          2962  
000029E6  360A                    2963      MOVE.W A2, D3       *Move mask to D3
000029E8                          2964  
000029E8  3816                    2965      MOVE.W (A6), D4  *Get opcode from memory to D4
000029EA                          2966  
000029EA  C843                    2967      AND.W  D3, D4       *Mask Opcode
000029EC                          2968  
000029EC  45F9 0000E018           2969      LEA    GENERAL_ROdDI, A2    *Get General ROdDI Opcode
000029F2                          2970  
000029F2  3A0A                    2971      MOVE.W  A2, D5      *Move GENERAL ROdDI Opcode to D5
000029F4                          2972  
000029F4  B845                    2973      CMP.W   D5, D4      *Compare Opcode with GENERAL ROdDI
000029F6                          2974  
000029F6  6600 00C8               2975      BNE     CHECK_ANDs     *If not Equal, Proceed to next instruction (AND)
000029FA                          2976      
000029FA                          2977      
000029FA                          2978  * Else, check ROLDI and RORDI varaints
000029FA                          2979  
000029FA                          2980  
000029FA                          2981  
000029FA  45F9 0000F1F8           2982      LEA   RSDIMASK, A2   *Get Mask
00002A00                          2983  
00002A00  360A                    2984      MOVE.W A2, D3       *Move mask to D3
00002A02                          2985  
00002A02  3816                    2986      MOVE.W (A6), D4  *Get opcode from memory to D4
00002A04                          2987  
00002A04  C843                    2988      AND.W  D3, D4       *Mask Opcode
00002A06                          2989  
00002A06  45F9 0000E138           2990  CHECK_ROLBD  LEA ROLBD, A2  *Determine if opcode is ROL.B Data Register
00002A0C                          2991  
00002A0C  3A0A                    2992              MOVE.W  A2, D5
00002A0E                          2993  
00002A0E  B845                    2994              CMP.W   D5, D4
00002A10                          2995  
00002A10  6700 0B36               2996              BEQ     ROLBD_D
00002A14                          2997  
00002A14  45F9 0000E178           2998  CHECK_ROLWD  LEA ROLWD, A2 *Determine if opcode is ROL.W Data Register
00002A1A                          2999  
00002A1A  3A0A                    3000              MOVE.W  A2, D5
00002A1C                          3001  
00002A1C  B845                    3002              CMP.W   D5, D4
00002A1E                          3003  
00002A1E  6700 0B30               3004              BEQ     ROLWD_D
00002A22                          3005  
00002A22  45F9 0000E1B8           3006  CHECK_ROLLD  LEA ROLLD, A2  *Determine if opcode is ROL.L Data Register
00002A28                          3007  
00002A28  3A0A                    3008              MOVE.W  A2, D5
00002A2A                          3009  
00002A2A  B845                    3010              CMP.W   D5, D4
00002A2C                          3011  
00002A2C  6700 0B2A               3012              BEQ     ROLLD_D
00002A30                          3013  
00002A30  45F9 0000E118           3014  CHECK_ROLBI  LEA ROLBI, A2  *Determine if opcode is ROL.B Immediate Value
00002A36                          3015  
00002A36  3A0A                    3016              MOVE.W  A2, D5
00002A38                          3017  
00002A38  B845                    3018              CMP.W   D5, D4
00002A3A                          3019  
00002A3A  6700 0B24               3020              BEQ     ROLBI_D
00002A3E                          3021  
00002A3E  45F9 0000E158           3022  CHECK_ROLWI  LEA ROLWI, A2  *Determine if opcode is ROL.W Immediate Value
00002A44                          3023  
00002A44  3A0A                    3024              MOVE.W  A2, D5
00002A46                          3025  
00002A46  B845                    3026              CMP.W   D5, D4
00002A48                          3027  
00002A48  6700 0B1E               3028              BEQ     ROLWI_D
00002A4C                          3029  
00002A4C  45F9 0000E198           3030  CHECK_ROLLI  LEA ROLLI, A2  *Determine if opcode is ROL.L Immediate Value
00002A52                          3031  
00002A52  3A0A                    3032              MOVE.W  A2, D5
00002A54                          3033  
00002A54  B845                    3034              CMP.W   D5, D4
00002A56                          3035  
00002A56  6700 0B18               3036              BEQ     ROLLI_D
00002A5A                          3037  
00002A5A                          3038  *---------------- ROR Data/Immediate --------------------*
00002A5A  45F9 0000F1F8           3039  CHECK_RORDIs    LEA   RSDIMASK, A2   *Get Mask
00002A60                          3040  
00002A60  360A                    3041      MOVE.W A2, D3       *Move mask to D3
00002A62                          3042  
00002A62  3816                    3043      MOVE.W (A6), D4  *Get opcode from memory to D4
00002A64                          3044  
00002A64  C843                    3045      AND.W  D3, D4       *Mask Opcode
00002A66                          3046  
00002A66  45F9 0000E038           3047  CHECK_RORBD  LEA RORBD, A2  *Determine if opcode is ROR.B Data Register
00002A6C                          3048  
00002A6C  3A0A                    3049              MOVE.W  A2, D5
00002A6E                          3050  
00002A6E  B845                    3051              CMP.W   D5, D4
00002A70                          3052  
00002A70  6700 0B2E               3053              BEQ     RORBD_D
00002A74                          3054  
00002A74  45F9 0000E078           3055  CHECK_RORWD  LEA RORWD, A2  *Determine if opcode is ROR.W Data Register
00002A7A                          3056  
00002A7A  3A0A                    3057              MOVE.W  A2, D5
00002A7C                          3058  
00002A7C  B845                    3059              CMP.W   D5, D4
00002A7E                          3060  
00002A7E  6700 0B28               3061              BEQ     RORWD_D
00002A82                          3062  
00002A82  45F9 0000E0B8           3063  CHECK_RORLD  LEA RORLD, A2  *Determine if opcode is ROR.L Data Register
00002A88                          3064  
00002A88  3A0A                    3065              MOVE.W  A2, D5
00002A8A                          3066  
00002A8A  B845                    3067              CMP.W   D5, D4
00002A8C                          3068  
00002A8C  6700 0B22               3069              BEQ     RORLD_D
00002A90                          3070  
00002A90  45F9 0000E018           3071  CHECK_RORBI  LEA RORBI, A2  *Determine if opcode is ROR.B Immediate Value
00002A96                          3072  
00002A96  3A0A                    3073              MOVE.W  A2, D5
00002A98                          3074  
00002A98  B845                    3075              CMP.W   D5, D4
00002A9A                          3076  
00002A9A  6700 0B1C               3077              BEQ     RORBI_D
00002A9E                          3078  
00002A9E  45F9 0000E058           3079  CHECK_RORWI  LEA RORWI, A2  *Determine if opcode is ROR.W Immediate Value
00002AA4                          3080  
00002AA4  3A0A                    3081              MOVE.W  A2, D5
00002AA6                          3082  
00002AA6  B845                    3083              CMP.W   D5, D4
00002AA8                          3084  
00002AA8  6700 0B16               3085              BEQ     RORWI_D
00002AAC                          3086  
00002AAC  45F9 0000E098           3087  CHECK_RORLI  LEA RORLI, A2  *Determine if opcode is ROR.L Immediate Value
00002AB2                          3088  
00002AB2  3A0A                    3089              MOVE.W  A2, D5
00002AB4                          3090  
00002AB4  B845                    3091              CMP.W   D5, D4
00002AB6                          3092  
00002AB6  6700 0B10               3093              BEQ     RORLI_D
00002ABA                          3094              
00002ABA  544E                    3095              ADDQ.W    #2, A6      *Go to next instruction
00002ABC  6000 2B26               3096               BRA IFINVADDRMODE  *The opcode is ROdDI, but the addressing modes are incorrect
00002AC0                          3097  
00002AC0                          3098  *---------------- AND --------------------*
00002AC0  45F9 0000F000           3099  CHECK_ANDs    LEA   GENERAL_AND_MASK, A2   *Get General Mask
00002AC6                          3100  
00002AC6  360A                    3101      MOVE.W A2, D3       *Move mask to D3
00002AC8                          3102  
00002AC8  3816                    3103      MOVE.W (A6), D4  *Get opcode from memory to D4
00002ACA                          3104  
00002ACA  C843                    3105      AND.W  D3, D4       *Mask Opcode
00002ACC                          3106  
00002ACC  45F9 0000C000           3107      LEA    GENERAL_AND, A2    *Get General AND Opcode
00002AD2                          3108  
00002AD2  3A0A                    3109      MOVE.W  A2, D5      *Move GENERAL AND Opcode to D5
00002AD4                          3110  
00002AD4  B845                    3111      CMP.W   D5, D4      *Compare Opcode with GENERAL AND
00002AD6                          3112  
00002AD6  6600 00E4               3113      BNE     CHECK_ORs     *If not Equal, Proceed to next instruction (OR)
00002ADA                          3114      
00002ADA                          3115      
00002ADA                          3116  * Else, check AND varaints
00002ADA                          3117  
00002ADA                          3118  
00002ADA                          3119  
00002ADA  45F9 0000F1FF           3120      LEA   ANDORWLIMASK, A2   *Get Mask
00002AE0                          3121  
00002AE0  360A                    3122      MOVE.W A2, D3       *Move mask to D3
00002AE2                          3123  
00002AE2  3816                    3124      MOVE.W (A6), D4  *Get opcode from memory to D4
00002AE4                          3125  
00002AE4  C843                    3126      AND.W  D3, D4
00002AE6                          3127  
00002AE6                          3128  *------------ AND.B Word Address, Long Address, and Immediate Data---*
00002AE6                          3129  
00002AE6  45F9 0000C038           3130  CHECK_ANDBWAD  LEA ANDBWAD, A2  *Determine if opcode is AND.B Word Address to Data Register
00002AEC                          3131  
00002AEC  3A0A                    3132              MOVE.W  A2, D5
00002AEE                          3133  
00002AEE  B845                    3134              CMP.W   D5, D4
00002AF0                          3135  
00002AF0  6700 0B32               3136              BEQ     ANDBWAD_D
00002AF4                          3137  
00002AF4                          3138  
00002AF4  45F9 0000C039           3139  CHECK_ANDBLAD  LEA ANDBLAD, A2  *Determine if opcode is AND.B Long Address to Data Register
00002AFA                          3140  
00002AFA  3A0A                    3141              MOVE.W  A2, D5
00002AFC                          3142  
00002AFC  B845                    3143              CMP.W   D5, D4
00002AFE                          3144  
00002AFE  6700 0B30               3145              BEQ     ANDBLAD_D
00002B02                          3146  
00002B02  45F9 0000C138           3147  CHECK_ANDBDWA  LEA ANDBDWA, A2  *Determine if opcode is AND.B Data Register to Word Address
00002B08                          3148  
00002B08  3A0A                    3149              MOVE.W  A2, D5
00002B0A                          3150  
00002B0A  B845                    3151              CMP.W   D5, D4
00002B0C                          3152  
00002B0C  6700 0B2E               3153              BEQ     ANDBDWA_D
00002B10                          3154  
00002B10                          3155  
00002B10  45F9 0000C139           3156  CHECK_ANDBDLA  LEA ANDBDLA, A2  *Determine if opcode is AND.B Data Register to Long Address
00002B16                          3157  
00002B16  3A0A                    3158              MOVE.W  A2, D5
00002B18                          3159  
00002B18  B845                    3160              CMP.W   D5, D4
00002B1A                          3161  
00002B1A  6700 0B2C               3162              BEQ     ANDBDLA_D
00002B1E                          3163  
00002B1E  45F9 0000C03C           3164  CHECK_ANDBDAD  LEA ANDBDAD, A2  *Determine if opcode is AND.B Immediate Value to Data Register
00002B24                          3165  
00002B24  3A0A                    3166              MOVE.W  A2, D5
00002B26                          3167  
00002B26  B845                    3168              CMP.W   D5, D4
00002B28                          3169  
00002B28  6700 0B2A               3170              BEQ     ANDBDAD_D
00002B2C                          3171  
00002B2C                          3172  *------------ AND.W Word Address, Long Address, and Immediate Data---*
00002B2C                          3173  
00002B2C  45F9 0000C078           3174  CHECK_ANDWWAD  LEA ANDWWAD, A2  *Determine if opcode is AND.W Word Address to Data Register
00002B32                          3175  
00002B32  3A0A                    3176              MOVE.W  A2, D5
00002B34                          3177  
00002B34  B845                    3178              CMP.W   D5, D4
00002B36                          3179  
00002B36  6700 0B7C               3180              BEQ     ANDWWAD_D
00002B3A                          3181  
00002B3A                          3182  
00002B3A  45F9 0000C079           3183  CHECK_ANDWLAD  LEA ANDWLAD, A2  *Determine if opcode is AND.W Long Address to Data Register
00002B40                          3184  
00002B40  3A0A                    3185              MOVE.W  A2, D5
00002B42                          3186  
00002B42  B845                    3187              CMP.W   D5, D4
00002B44                          3188  
00002B44  6700 0B7A               3189              BEQ     ANDWLAD_D
00002B48                          3190  
00002B48  45F9 0000C178           3191  CHECK_ANDWDWA  LEA ANDWDWA, A2  *Determine if opcode is AND.W Data Register to Word Address
00002B4E                          3192  
00002B4E  3A0A                    3193              MOVE.W  A2, D5
00002B50                          3194  
00002B50  B845                    3195              CMP.W   D5, D4
00002B52                          3196  
00002B52  6700 0B78               3197              BEQ     ANDWDWA_D
00002B56                          3198  
00002B56                          3199  
00002B56  45F9 0000C179           3200  CHECK_ANDWDLA  LEA ANDWDLA, A2  *Determine if opcode is AND.W Data Register to Long Address
00002B5C                          3201  
00002B5C  3A0A                    3202              MOVE.W  A2, D5
00002B5E                          3203  
00002B5E  B845                    3204              CMP.W   D5, D4
00002B60                          3205  
00002B60  6700 0B76               3206              BEQ     ANDWDLA_D
00002B64                          3207  
00002B64  45F9 0000C07C           3208  CHECK_ANDWDAD  LEA ANDWDAD, A2  *Determine if opcode is AND.W Immediate Value to Data Register
00002B6A                          3209  
00002B6A  3A0A                    3210              MOVE.W  A2, D5
00002B6C                          3211  
00002B6C  B845                    3212              CMP.W   D5, D4
00002B6E                          3213  
00002B6E  6700 0B74               3214              BEQ     ANDWDAD_D
00002B72                          3215  
00002B72                          3216  *------------ AND.L Word Address, Long Address, and Immediate Data---*
00002B72                          3217  
00002B72  45F9 0000C0B8           3218  CHECK_ANDLWAD  LEA ANDLWAD, A2  *Determine if opcode is AND.L Word Address to Data Register
00002B78                          3219  
00002B78  3A0A                    3220              MOVE.W  A2, D5
00002B7A                          3221  
00002B7A  B845                    3222              CMP.W   D5, D4
00002B7C                          3223  
00002B7C  6700 0BC6               3224              BEQ     ANDLWAD_D
00002B80                          3225  
00002B80                          3226  
00002B80  45F9 0000C0B9           3227  CHECK_ANDLLAD  LEA ANDLLAD, A2  *Determine if opcode is AND.L Long Address to Data Register
00002B86                          3228  
00002B86  3A0A                    3229              MOVE.W  A2, D5
00002B88                          3230  
00002B88  B845                    3231              CMP.W   D5, D4
00002B8A                          3232  
00002B8A  6700 0BC4               3233              BEQ     ANDLLAD_D
00002B8E                          3234  
00002B8E  45F9 0000C1B8           3235  CHECK_ANDLDWA  LEA ANDLDWA, A2  *Determine if opcode is AND.L Data Register to Word Address
00002B94                          3236  
00002B94  3A0A                    3237              MOVE.W  A2, D5
00002B96                          3238  
00002B96  B845                    3239              CMP.W   D5, D4
00002B98                          3240  
00002B98  6700 0BC2               3241              BEQ     ANDLDWA_D
00002B9C                          3242  
00002B9C                          3243  
00002B9C  45F9 0000C1B9           3244  CHECK_ANDLDLA  LEA ANDLDLA, A2  *Determine if opcode is AND.L Data Register to Long Address
00002BA2                          3245  
00002BA2  3A0A                    3246              MOVE.W  A2, D5
00002BA4                          3247  
00002BA4  B845                    3248              CMP.W   D5, D4
00002BA6                          3249  
00002BA6  6700 0BC0               3250              BEQ     ANDLDLA_D
00002BAA                          3251  
00002BAA                          3252  
00002BAA  45F9 0000C0BC           3253  CHECK_ANDLDAD  LEA ANDLDAD, A2  *Determine if opcode is AND.L Immediate Value to Data Register
00002BB0                          3254  
00002BB0  3A0A                    3255              MOVE.W  A2, D5
00002BB2                          3256  
00002BB2  B845                    3257              CMP.W   D5, D4
00002BB4                          3258  
00002BB4  6700 0BBE               3259              BEQ     ANDLDAD_D
00002BB8                          3260  
00002BB8  6000 00FE               3261              BRA     CHECK_ANDsCONT      *Move on to the rest of AND
00002BBC                          3262  
00002BBC                          3263  *---------------- OR --------------------*
00002BBC  45F9 0000F000           3264  CHECK_ORs    LEA   GENERAL_OR_MASK, A2   *Get General Mask
00002BC2                          3265  
00002BC2  360A                    3266      MOVE.W A2, D3       *Move mask to D3
00002BC4                          3267  
00002BC4  3816                    3268      MOVE.W (A6), D4  *Get opcode from memory to D4
00002BC6                          3269  
00002BC6  C843                    3270      AND.W  D3, D4       *Mask Opcode
00002BC8                          3271  
00002BC8  45F9 00008000           3272      LEA    GENERAL_OR, A2    *Get General OR Opcode
00002BCE                          3273  
00002BCE  3A0A                    3274      MOVE.W  A2, D5      *Move GENERAL OR Opcode to D5
00002BD0                          3275  
00002BD0  B845                    3276      CMP.W   D5, D4      *Compare Opcode with GENERAL OR
00002BD2                          3277  
00002BD2  6600 0354               3278      BNE     CHECK_NOP     *If not Equal, Proceed to next instruction (NOP)
00002BD6                          3279      
00002BD6                          3280      
00002BD6                          3281  * Else, check OR varaints
00002BD6                          3282  
00002BD6                          3283  
00002BD6                          3284  
00002BD6  45F9 0000F1FF           3285      LEA   ANDORWLIMASK, A2   *Get Mask
00002BDC                          3286  
00002BDC  360A                    3287      MOVE.W A2, D3       *Move mask to D3
00002BDE                          3288  
00002BDE  3816                    3289      MOVE.W (A6), D4  *Get opcode from memory to D4
00002BE0                          3290  
00002BE0  C843                    3291      AND.W  D3, D4
00002BE2                          3292  
00002BE2                          3293  *------------ OR.B Word Address, Long Address, and Immediate Data---*
00002BE2                          3294  
00002BE2  45F9 00008038           3295  CHECK_ORBWAD  LEA ORBWD, A2 *Determine if opcode is OR.B Word Address to Data Register
00002BE8                          3296  
00002BE8  3A0A                    3297              MOVE.W  A2, D5
00002BEA                          3298  
00002BEA  B845                    3299              CMP.W   D5, D4
00002BEC                          3300  
00002BEC  6700 0BE6               3301              BEQ     ORBWAD_D
00002BF0                          3302  
00002BF0                          3303  
00002BF0  45F9 00008039           3304  CHECK_ORBLAD  LEA ORBLD, A2 *Determine if opcode is OR.B Long Address to Data Register
00002BF6                          3305  
00002BF6  3A0A                    3306              MOVE.W  A2, D5
00002BF8                          3307  
00002BF8  B845                    3308              CMP.W   D5, D4
00002BFA                          3309  
00002BFA  6700 0BE4               3310              BEQ     ORBLAD_D
00002BFE                          3311  
00002BFE  45F9 00008138           3312  CHECK_ORBDWA  LEA ORBDW, A2 *Determine if opcode is OR.B Data Register to Word Address
00002C04                          3313  
00002C04  3A0A                    3314              MOVE.W  A2, D5
00002C06                          3315  
00002C06  B845                    3316              CMP.W   D5, D4
00002C08                          3317  
00002C08  6700 0BE2               3318              BEQ     ORBDWA_D
00002C0C                          3319  
00002C0C                          3320  
00002C0C  45F9 00008139           3321  CHECK_ORBDLA  LEA ORBDL, A2 *Determine if opcode is OR.B Data Register to Long Address
00002C12                          3322  
00002C12  3A0A                    3323              MOVE.W  A2, D5
00002C14                          3324  
00002C14  B845                    3325              CMP.W   D5, D4
00002C16                          3326  
00002C16  6700 0BE0               3327              BEQ     ORBDLA_D
00002C1A                          3328  
00002C1A  45F9 0000803C           3329  CHECK_ORBDID  LEA ORBID, A2 *Determine if opcode is OR.B Immediate Value to Data Register
00002C20                          3330  
00002C20  3A0A                    3331              MOVE.W  A2, D5
00002C22                          3332  
00002C22  B845                    3333              CMP.W   D5, D4
00002C24                          3334  
00002C24  6700 0BDE               3335              BEQ     ORBDID_D
00002C28                          3336  
00002C28                          3337  *------------ OR.W Word Address, Long Address, and Immediate Data---*
00002C28                          3338  
00002C28  45F9 00008078           3339  CHECK_ORWWAD  LEA ORWWD, A2 *Determine if opcode is OR.W Word Address to Data Register
00002C2E                          3340  
00002C2E  3A0A                    3341              MOVE.W  A2, D5
00002C30                          3342  
00002C30  B845                    3343              CMP.W   D5, D4
00002C32                          3344  
00002C32  6700 0C30               3345              BEQ     ORWWAD_D
00002C36                          3346  
00002C36                          3347  
00002C36  45F9 00008079           3348  CHECK_ORWLAD  LEA ORWLD, A2 *Determine if opcode is OR.W Long Address to Data Register
00002C3C                          3349  
00002C3C  3A0A                    3350              MOVE.W  A2, D5
00002C3E                          3351  
00002C3E  B845                    3352              CMP.W   D5, D4
00002C40                          3353  
00002C40  6700 0C2E               3354              BEQ     ORWLAD_D
00002C44                          3355  
00002C44  45F9 00008178           3356  CHECK_ORWDWA  LEA ORWDW, A2 *Determine if opcode is OR.W Data Register to Word Address
00002C4A                          3357  
00002C4A  3A0A                    3358              MOVE.W  A2, D5
00002C4C                          3359  
00002C4C  B845                    3360              CMP.W   D5, D4
00002C4E                          3361  
00002C4E  6700 0C2C               3362              BEQ     ORWDWA_D
00002C52                          3363  
00002C52                          3364  
00002C52  45F9 00008179           3365  CHECK_ORWDLA  LEA ORWDL, A2 *Determine if opcode is OR.W Data Register to Long Address
00002C58                          3366  
00002C58  3A0A                    3367              MOVE.W  A2, D5
00002C5A                          3368  
00002C5A  B845                    3369              CMP.W   D5, D4
00002C5C                          3370  
00002C5C  6700 0C2A               3371              BEQ     ORWDLA_D
00002C60                          3372  
00002C60  45F9 0000807C           3373  CHECK_ORWDID  LEA ORWID, A2 *Determine if opcode is OR.W Immediate Value to Data Register
00002C66                          3374  
00002C66  3A0A                    3375              MOVE.W  A2, D5
00002C68                          3376  
00002C68  B845                    3377              CMP.W   D5, D4
00002C6A                          3378  
00002C6A  6700 0C28               3379              BEQ     ORWDID_D
00002C6E                          3380  
00002C6E                          3381  *------------ OR.L Word Address, Long Address, and Immediate Data---*
00002C6E                          3382  
00002C6E  45F9 000080B8           3383  CHECK_ORLWAD  LEA ORLWD, A2 *Determine if opcode is OR.L Word Address to Data Register
00002C74                          3384  
00002C74  3A0A                    3385              MOVE.W  A2, D5
00002C76                          3386  
00002C76  B845                    3387              CMP.W   D5, D4
00002C78                          3388  
00002C78  6700 0C7A               3389              BEQ     ORLWAD_D
00002C7C                          3390  
00002C7C                          3391  
00002C7C  45F9 000080B9           3392  CHECK_ORLLAD  LEA ORLLD, A2 *Determine if opcode is OR.L Long Address to Data Register
00002C82                          3393  
00002C82  3A0A                    3394              MOVE.W  A2, D5
00002C84                          3395  
00002C84  B845                    3396              CMP.W   D5, D4
00002C86                          3397  
00002C86  6700 0C78               3398              BEQ     ORLLAD_D
00002C8A                          3399  
00002C8A  45F9 000081B8           3400  CHECK_ORLDWA  LEA ORLDW, A2 *Determine if opcode is OR.L Data Register to Word Address
00002C90                          3401  
00002C90  3A0A                    3402              MOVE.W  A2, D5
00002C92                          3403  
00002C92  B845                    3404              CMP.W   D5, D4
00002C94                          3405  
00002C94  6700 0C76               3406              BEQ     ORLDWA_D
00002C98                          3407  
00002C98                          3408  
00002C98  45F9 000081B9           3409  CHECK_ORLDLA  LEA ORLDL, A2 *Determine if opcode is OR.L Data Register to Long Address
00002C9E                          3410  
00002C9E  3A0A                    3411              MOVE.W  A2, D5
00002CA0                          3412  
00002CA0  B845                    3413              CMP.W   D5, D4
00002CA2                          3414  
00002CA2  6700 0C74               3415              BEQ     ORLDLA_D
00002CA6                          3416  
00002CA6                          3417  
00002CA6  45F9 000080BC           3418  CHECK_ORLDID  LEA ORLID, A2 *Determine if opcode is OR.L Immediate Value to Data Register
00002CAC                          3419  
00002CAC  3A0A                    3420              MOVE.W  A2, D5
00002CAE                          3421  
00002CAE  B845                    3422              CMP.W   D5, D4
00002CB0                          3423  
00002CB0  6700 0C72               3424              BEQ     ORLDID_D
00002CB4                          3425              
00002CB4  6000 013A               3426              BRA     CHECK_ORsCONT       *Move on to the rest of OR
00002CB8                          3427  
00002CB8                          3428  *---------------- AND CONTINUED --------------------*
00002CB8  45F9 0000F1F8           3429  CHECK_ANDsCONT    LEA   ANDORMASK, A2   *Get Mask
00002CBE                          3430  
00002CBE  360A                    3431      MOVE.W A2, D3       *Move mask to D3
00002CC0                          3432  
00002CC0  3816                    3433      MOVE.W (A6), D4  *Get opcode from memory to D4
00002CC2                          3434  
00002CC2  C843                    3435      AND.W  D3, D4
00002CC4                          3436  
00002CC4                          3437  
00002CC4                          3438  *------------ AND.B Registers---*
00002CC4                          3439  
00002CC4  45F9 0000C000           3440  CHECK_ANDBDD  LEA ANDBDD, A2    *Determine if opcode is AND.B Data Register to Data Register
00002CCA                          3441  
00002CCA  3A0A                    3442              MOVE.W  A2, D5
00002CCC                          3443  
00002CCC  B845                    3444              CMP.W   D5, D4
00002CCE                          3445  
00002CCE  6700 0900               3446              BEQ     ANDBDD_D
00002CD2                          3447  
00002CD2  45F9 0000C010           3448  CHECK_ANDBAID  LEA ANDBAID, A2  *Determine if opcode is AND.B Indirect Address Register to Data Register
00002CD8                          3449  
00002CD8  3A0A                    3450              MOVE.W  A2, D5
00002CDA                          3451  
00002CDA  B845                    3452              CMP.W   D5, D4
00002CDC                          3453  
00002CDC  6700 08FE               3454              BEQ     ANDBAID_D
00002CE0                          3455  
00002CE0  45F9 0000C018           3456  CHECK_ANDBAPID  LEA ANDBAPID, A2    *Determine if opcode is AND.B Post Increment Address Register to Data Register
00002CE6                          3457  
00002CE6  3A0A                    3458              MOVE.W  A2, D5
00002CE8                          3459  
00002CE8  B845                    3460              CMP.W   D5, D4
00002CEA                          3461  
00002CEA  6700 08FC               3462              BEQ     ANDBAPID_D
00002CEE                          3463  
00002CEE  45F9 0000C020           3464  CHECK_ANDBAPDD  LEA ANDBAPDD, A2    *Determine if opcode is AND.B Pre Decrement Address Register to Data Register
00002CF4                          3465  
00002CF4  3A0A                    3466              MOVE.W  A2, D5
00002CF6                          3467  
00002CF6  B845                    3468              CMP.W   D5, D4
00002CF8                          3469  
00002CF8  6700 08FA               3470              BEQ     ANDBAPDD_D
00002CFC                          3471  
00002CFC  45F9 0000C110           3472  CHECK_ANDBDAI  LEA ANDBDAI, A2  *Determine if opcode is AND.B Data Register to Indirect Address Register
00002D02                          3473  
00002D02  3A0A                    3474              MOVE.W  A2, D5
00002D04                          3475  
00002D04  B845                    3476              CMP.W   D5, D4
00002D06                          3477  
00002D06  6700 08F8               3478              BEQ     ANDBDAI_D
00002D0A                          3479  
00002D0A  45F9 0000C118           3480  CHECK_ANDBDAPI  LEA ANDBDAPI, A2    *Determine if opcode is AND.B Data Register to Post Increment Address Register
00002D10                          3481  
00002D10  3A0A                    3482              MOVE.W  A2, D5
00002D12                          3483  
00002D12  B845                    3484              CMP.W   D5, D4
00002D14                          3485  
00002D14  6700 08F6               3486              BEQ     ANDBDAPI_D
00002D18                          3487  
00002D18  45F9 0000C120           3488  CHECK_ANDBDAPD  LEA ANDBDAPD, A2    *Determine if opcode is AND.B Data Register to Pre Decrement Address Register
00002D1E                          3489  
00002D1E  3A0A                    3490              MOVE.W  A2, D5
00002D20                          3491  
00002D20  B845                    3492              CMP.W   D5, D4
00002D22                          3493  
00002D22  6700 08F4               3494              BEQ     ANDBDAPD_D
00002D26                          3495  
00002D26                          3496  *------------ AND.W Registers---*
00002D26                          3497  
00002D26  45F9 0000C040           3498  CHECK_ANDWDD  LEA ANDWDD, A2    *Determine if opcode is AND.W Data Register to Data Register
00002D2C                          3499  
00002D2C  3A0A                    3500              MOVE.W  A2, D5
00002D2E                          3501  
00002D2E  B845                    3502              CMP.W   D5, D4
00002D30                          3503  
00002D30  6700 092E               3504              BEQ     ANDWDD_D
00002D34                          3505  
00002D34  45F9 0000C050           3506  CHECK_ANDWAID  LEA ANDWAID, A2  *Determine if opcode is AND.W Indirect Address Register to Data Register
00002D3A                          3507  
00002D3A  3A0A                    3508              MOVE.W  A2, D5
00002D3C                          3509  
00002D3C  B845                    3510              CMP.W   D5, D4
00002D3E                          3511  
00002D3E  6700 092C               3512              BEQ     ANDWAID_D
00002D42                          3513  
00002D42  45F9 0000C058           3514  CHECK_ANDWAPID  LEA ANDWAPID, A2    *Determine if opcode is AND.W Post Increment Address Register to Data Register
00002D48                          3515  
00002D48  3A0A                    3516              MOVE.W  A2, D5
00002D4A                          3517  
00002D4A  B845                    3518              CMP.W   D5, D4
00002D4C                          3519  
00002D4C  6700 092A               3520              BEQ     ANDWAPID_D
00002D50                          3521  
00002D50  45F9 0000C060           3522  CHECK_ANDWAPDD  LEA ANDWAPDD, A2    *Determine if opcode is AND.W Pre Decrement Address Register to Data Register
00002D56                          3523  
00002D56  3A0A                    3524              MOVE.W  A2, D5
00002D58                          3525  
00002D58  B845                    3526              CMP.W   D5, D4
00002D5A                          3527  
00002D5A  6700 0928               3528              BEQ     ANDWAPDD_D
00002D5E                          3529  
00002D5E  45F9 0000C150           3530  CHECK_ANDWDAI  LEA ANDWDAI, A2      *Determine if opcode is AND.W Data Register to Indirect Address Register
00002D64                          3531  
00002D64  3A0A                    3532              MOVE.W  A2, D5
00002D66                          3533  
00002D66  B845                    3534              CMP.W   D5, D4
00002D68                          3535  
00002D68  6700 0926               3536              BEQ     ANDWDAI_D
00002D6C                          3537  
00002D6C  45F9 0000C158           3538  CHECK_ANDWDAPI  LEA ANDWDAPI, A2    *Determine if opcode is AND.W Data Register to Post Increment Address Register
00002D72                          3539  
00002D72  3A0A                    3540              MOVE.W  A2, D5
00002D74                          3541  
00002D74  B845                    3542              CMP.W   D5, D4
00002D76                          3543  
00002D76  6700 0924               3544              BEQ     ANDWDAPI_D
00002D7A                          3545  
00002D7A  45F9 0000C160           3546  CHECK_ANDWDAPD  LEA ANDWDAPD, A2    *Determine if opcode is AND.W Data Register to Pre Decrement Address Register
00002D80                          3547  
00002D80  3A0A                    3548              MOVE.W  A2, D5
00002D82                          3549  
00002D82  B845                    3550              CMP.W   D5, D4
00002D84                          3551  
00002D84  6700 0922               3552              BEQ     ANDWDAPD_D
00002D88                          3553  
00002D88                          3554  *------------ AND.L Registers---*
00002D88                          3555  
00002D88  45F9 0000C080           3556  CHECK_ANDLDD  LEA ANDLDD, A2    *Determine if opcode is AND.L Data Register to Data Register
00002D8E                          3557  
00002D8E  3A0A                    3558              MOVE.W  A2, D5
00002D90                          3559  
00002D90  B845                    3560              CMP.W   D5, D4
00002D92                          3561  
00002D92  6700 095C               3562              BEQ     ANDLDD_D
00002D96                          3563  
00002D96  45F9 0000C090           3564  CHECK_ANDLAID  LEA ANDLAID, A2  *Determine if opcode is AND.L Indirect Address Register to Data Register
00002D9C                          3565  
00002D9C  3A0A                    3566              MOVE.W  A2, D5
00002D9E                          3567  
00002D9E  B845                    3568              CMP.W   D5, D4
00002DA0                          3569  
00002DA0  6700 095A               3570              BEQ     ANDLAID_D
00002DA4                          3571  
00002DA4  45F9 0000C098           3572  CHECK_ANDLAPID  LEA ANDLAPID, A2    *Determine if opcode is AND.L Post Increment Address Register to Data Register
00002DAA                          3573  
00002DAA  3A0A                    3574              MOVE.W  A2, D5
00002DAC                          3575  
00002DAC  B845                    3576              CMP.W   D5, D4
00002DAE                          3577  
00002DAE  6700 0958               3578              BEQ     ANDLAPID_D
00002DB2                          3579  
00002DB2  45F9 0000C0A0           3580  CHECK_ANDLAPDD  LEA ANDLAPDD, A2    *Determine if opcode is AND.L Pre Decrement Register to Data Register
00002DB8                          3581  
00002DB8  3A0A                    3582              MOVE.W  A2, D5
00002DBA                          3583  
00002DBA  B845                    3584              CMP.W   D5, D4
00002DBC                          3585  
00002DBC  6700 0956               3586              BEQ     ANDLAPDD_D
00002DC0                          3587  
00002DC0  45F9 0000C190           3588  CHECK_ANDLDAI  LEA ANDLDAI, A2      *Determine if opcode is AND.L Data Register to Indirect Address Register
00002DC6                          3589  
00002DC6  3A0A                    3590              MOVE.W  A2, D5
00002DC8                          3591  
00002DC8  B845                    3592              CMP.W   D5, D4
00002DCA                          3593  
00002DCA  6700 0954               3594              BEQ     ANDLDAI_D
00002DCE                          3595  
00002DCE  45F9 0000C198           3596  CHECK_ANDLDAPI  LEA ANDLDAPI, A2    *Determine if opcode is AND.L Data Register to Post Increment Address Register
00002DD4                          3597  
00002DD4  3A0A                    3598              MOVE.W  A2, D5
00002DD6                          3599  
00002DD6  B845                    3600              CMP.W   D5, D4
00002DD8                          3601  
00002DD8  6700 0952               3602              BEQ     ANDLDAPI_D
00002DDC                          3603  
00002DDC  45F9 0000C1A0           3604  CHECK_ANDLDAPD  LEA ANDLDAPD, A2    *Determine if opcode is AND.L Data Register to Pre Decrement Address Register
00002DE2                          3605  
00002DE2  3A0A                    3606              MOVE.W  A2, D5
00002DE4                          3607  
00002DE4  B845                    3608              CMP.W   D5, D4
00002DE6                          3609  
00002DE6  6700 0950               3610              BEQ     ANDLDAPD_D
00002DEA                          3611              
00002DEA  544E                    3612              ADDQ.W    #2, A6      *Go to next instruction
00002DEC  6000 27F6               3613               BRA IFINVADDRMODE  *The opcode is AND, but the addressing modes are incorrect
00002DF0                          3614  
00002DF0                          3615  
00002DF0                          3616  *---------------- OR CONTINUED --------------------*
00002DF0  45F9 0000F1F8           3617  CHECK_ORsCONT    LEA   ANDORMASK, A2   *Get Mask
00002DF6                          3618  
00002DF6  360A                    3619      MOVE.W A2, D3       *Move mask to D3
00002DF8                          3620  
00002DF8  3816                    3621      MOVE.W (A6), D4  *Get opcode from memory to D4
00002DFA                          3622  
00002DFA  C843                    3623      AND.W  D3, D4
00002DFC                          3624  
00002DFC                          3625  
00002DFC                          3626  *------------ OR.B Registers---*
00002DFC                          3627  
00002DFC  45F9 00008000           3628  CHECK_ORBDD  LEA ORBDD, A2  *Determine if opcode is OR.B Data Register to Data Register
00002E02                          3629  
00002E02  3A0A                    3630              MOVE.W  A2, D5
00002E04                          3631  
00002E04  B845                    3632              CMP.W   D5, D4
00002E06                          3633  
00002E06  6700 0978               3634              BEQ     ORBDD_D
00002E0A                          3635  
00002E0A  45F9 00008010           3636  CHECK_ORBAID  LEA ORBAID, A2    *Determine if opcode is OR.B Indirect Address Register to Data Register
00002E10                          3637  
00002E10  3A0A                    3638              MOVE.W  A2, D5
00002E12                          3639  
00002E12  B845                    3640              CMP.W   D5, D4
00002E14                          3641  
00002E14  6700 0976               3642              BEQ     ORBAID_D
00002E18                          3643  
00002E18  45F9 00008018           3644  CHECK_ORBAPD  LEA ORBAPD, A2    *Determine if opcode is OR.B Post Increment Address Register to Data Register
00002E1E                          3645  
00002E1E  3A0A                    3646              MOVE.W  A2, D5
00002E20                          3647  
00002E20  B845                    3648              CMP.W   D5, D4
00002E22                          3649  
00002E22  6700 0974               3650              BEQ     ORBAPD_D
00002E26                          3651  
00002E26  45F9 00008020           3652  CHECK_ORBADD  LEA ORBADD, A2    *Determine if opcode is OR.B Pre Decrement Address Register to Data Register
00002E2C                          3653  
00002E2C  3A0A                    3654              MOVE.W  A2, D5
00002E2E                          3655  
00002E2E  B845                    3656              CMP.W   D5, D4
00002E30                          3657  
00002E30  6700 0972               3658              BEQ     ORBADD_D
00002E34                          3659  
00002E34  45F9 00008110           3660  CHECK_ORBDAI  LEA ORBDAI, A2    *Determine if opcode is OR.B Data Register to Indirect Address Register
00002E3A                          3661  
00002E3A  3A0A                    3662              MOVE.W  A2, D5
00002E3C                          3663  
00002E3C  B845                    3664              CMP.W   D5, D4
00002E3E                          3665  
00002E3E  6700 0970               3666              BEQ     ORBDAI_D
00002E42                          3667  
00002E42  45F9 00008118           3668  CHECK_ORBDAP  LEA ORBDAP, A2    *Determine if opcode is OR.B Data Register to Post Increment Address Register
00002E48                          3669  
00002E48  3A0A                    3670              MOVE.W  A2, D5
00002E4A                          3671  
00002E4A  B845                    3672              CMP.W   D5, D4
00002E4C                          3673  
00002E4C  6700 096E               3674              BEQ     ORBDAP_D
00002E50                          3675  
00002E50  45F9 00008120           3676  CHECK_ORBDAD  LEA ORBDAD, A2    *Determine if opcode is OR.B Data Register to Pre Decrement Address Register
00002E56                          3677  
00002E56  3A0A                    3678              MOVE.W  A2, D5
00002E58                          3679  
00002E58  B845                    3680              CMP.W   D5, D4
00002E5A                          3681  
00002E5A  6700 096C               3682              BEQ     ORBDAD_D
00002E5E                          3683  
00002E5E                          3684  *------------ OR.W Registers---*
00002E5E                          3685  
00002E5E  45F9 00008040           3686  CHECK_ORWDD  LEA ORWDD, A2      *Determine if opcode is OR.W Data Register to Data Register
00002E64                          3687  
00002E64  3A0A                    3688              MOVE.W  A2, D5
00002E66                          3689  
00002E66  B845                    3690              CMP.W   D5, D4
00002E68                          3691  
00002E68  6700 09A6               3692              BEQ     ORWDD_D
00002E6C                          3693  
00002E6C  45F9 00008050           3694  CHECK_ORWAID  LEA ORWAID, A2    *Determine if opcode is OR.W Indirect Address Register to Data Register
00002E72                          3695  
00002E72  3A0A                    3696              MOVE.W  A2, D5
00002E74                          3697  
00002E74  B845                    3698              CMP.W   D5, D4
00002E76                          3699  
00002E76  6700 09A4               3700              BEQ     ORWAID_D
00002E7A                          3701  
00002E7A  45F9 00008058           3702  CHECK_ORWAPD  LEA ORWAPD, A2    *Determine if opcode is OR.W Post Increment Address Register to Data Register
00002E80                          3703  
00002E80  3A0A                    3704              MOVE.W  A2, D5
00002E82                          3705  
00002E82  B845                    3706              CMP.W   D5, D4
00002E84                          3707  
00002E84  6700 09A2               3708              BEQ     ORWAPD_D
00002E88                          3709  
00002E88  45F9 00008060           3710  CHECK_ORWADD  LEA ORWADD, A2    *Determine if opcode is OR.W Pre Decrement Register to Data Register
00002E8E                          3711  
00002E8E  3A0A                    3712              MOVE.W  A2, D5
00002E90                          3713  
00002E90  B845                    3714              CMP.W   D5, D4
00002E92                          3715  
00002E92  6700 09A0               3716              BEQ     ORWADD_D
00002E96                          3717  
00002E96  45F9 00008150           3718  CHECK_ORWDAI  LEA ORWDAI, A2    *Determine if opcode is OR.W Data Register to Indirect Address Register
00002E9C                          3719  
00002E9C  3A0A                    3720              MOVE.W  A2, D5
00002E9E                          3721  
00002E9E  B845                    3722              CMP.W   D5, D4
00002EA0                          3723  
00002EA0  6700 099E               3724              BEQ     ORWDAI_D
00002EA4                          3725  
00002EA4  45F9 00008158           3726  CHECK_ORWDAP  LEA ORWDAP, A2    *Determine if opcode is OR.W Data Register to Post Increment Address Register
00002EAA                          3727  
00002EAA  3A0A                    3728              MOVE.W  A2, D5
00002EAC                          3729  
00002EAC  B845                    3730              CMP.W   D5, D4
00002EAE                          3731  
00002EAE  6700 099C               3732              BEQ     ORWDAP_D
00002EB2                          3733  
00002EB2  45F9 00008160           3734  CHECK_ORWDAD  LEA ORWDAD, A2    *Determine if opcode is OR.W Data Register to Pre Decrement Address Register
00002EB8                          3735  
00002EB8  3A0A                    3736              MOVE.W  A2, D5
00002EBA                          3737  
00002EBA  B845                    3738              CMP.W   D5, D4
00002EBC                          3739  
00002EBC  6700 099A               3740              BEQ     ORWDAD_D
00002EC0                          3741  
00002EC0                          3742  *------------ OR.L Registers---*
00002EC0                          3743  
00002EC0  45F9 00008080           3744  CHECK_ORLDD  LEA ORLDD, A2  *Determine if opcode is OR.L Data Register to Data Register
00002EC6                          3745  
00002EC6  3A0A                    3746              MOVE.W  A2, D5
00002EC8                          3747  
00002EC8  B845                    3748              CMP.W   D5, D4
00002ECA                          3749  
00002ECA  6700 09D4               3750              BEQ     ORLDD_D
00002ECE                          3751  
00002ECE  45F9 00008090           3752  CHECK_ORLAID  LEA ORLAID, A2    *Determine if opcode is OR.L Indirect Address Register to Data Register
00002ED4                          3753  
00002ED4  3A0A                    3754              MOVE.W  A2, D5
00002ED6                          3755  
00002ED6  B845                    3756              CMP.W   D5, D4
00002ED8                          3757  
00002ED8  6700 09D2               3758              BEQ     ORLAID_D
00002EDC                          3759  
00002EDC  45F9 00008098           3760  CHECK_ORLAPD  LEA ORLAPD, A2    *Determine if opcode is OR.L Post Increment Address Register to Data Register
00002EE2                          3761  
00002EE2  3A0A                    3762              MOVE.W  A2, D5
00002EE4                          3763  
00002EE4  B845                    3764              CMP.W   D5, D4
00002EE6                          3765  
00002EE6  6700 09D0               3766              BEQ     ORLAPD_D
00002EEA                          3767  
00002EEA  45F9 000080A0           3768  CHECK_ORLADD  LEA ORLADD, A2    *Determine if opcode is OR.L Pre Decrement Address Register to Data Register
00002EF0                          3769  
00002EF0  3A0A                    3770              MOVE.W  A2, D5
00002EF2                          3771  
00002EF2  B845                    3772              CMP.W   D5, D4
00002EF4                          3773  
00002EF4  6700 09CE               3774              BEQ     ORLADD_D
00002EF8                          3775  
00002EF8  45F9 00008190           3776  CHECK_ORLDAI  LEA ORLDAI, A2    *Determine if opcode is OR.L Data Register to Indirect Address Register
00002EFE                          3777  
00002EFE  3A0A                    3778              MOVE.W  A2, D5
00002F00                          3779  
00002F00  B845                    3780              CMP.W   D5, D4
00002F02                          3781  
00002F02  6700 09CC               3782              BEQ     ORLDAI_D
00002F06                          3783  
00002F06  45F9 00008198           3784  CHECK_ORLDAP  LEA ORLDAP, A2    *Determine if opcode is OR.L Data Register to Post Increment Address Register
00002F0C                          3785  
00002F0C  3A0A                    3786              MOVE.W  A2, D5
00002F0E                          3787  
00002F0E  B845                    3788              CMP.W   D5, D4
00002F10                          3789  
00002F10  6700 09CA               3790              BEQ     ORLDAP_D
00002F14                          3791  
00002F14  45F9 000081A0           3792  CHECK_ORLDAD  LEA ORLDAD, A2    *Determine if opcode is OR.L Data Register to Pre Decrement Address Register
00002F1A                          3793  
00002F1A  3A0A                    3794              MOVE.W  A2, D5
00002F1C                          3795  
00002F1C  B845                    3796              CMP.W   D5, D4
00002F1E                          3797  
00002F1E  6700 09C8               3798              BEQ     ORLDAD_D
00002F22                          3799              
00002F22  544E                    3800              ADDQ.W    #2, A6      *Go to next instruction
00002F24  6000 26BE               3801               BRA IFINVADDRMODE  *The opcode is OR, but the addressing modes are incorrect
00002F28                          3802  
00002F28                          3803  *---------------- NOP and RTS --------------------* Note: there is no GENERAL code for NOP and RTS because there is no invalid addressing modes
00002F28  45F9 00004E71           3804  CHECK_NOP    LEA   NOPCO, A2   *Get Mask
00002F2E                          3805  
00002F2E  3816                    3806      MOVE.W (A6), D4  *Get opcode from memory to D4
00002F30                          3807  
00002F30  3A0A                    3808      MOVE.W  A2, D5
00002F32                          3809  
00002F32  B845                    3810      CMP.W   D5, D4  *Determine if opcode is NOP
00002F34                          3811  
00002F34  6700 09FA               3812      BEQ     NOP_D
00002F38                          3813  
00002F38  45F9 00004E75           3814  CHECK_RTS    LEA   RTSCO, A2   *Get Mask
00002F3E                          3815  
00002F3E  3816                    3816      MOVE.W (A6), D4  *Get opcode from memory to D4
00002F40                          3817  
00002F40  3A0A                    3818      MOVE.W  A2, D5
00002F42                          3819  
00002F42  B845                    3820      CMP.W   D5, D4  *Determine if opcode is RTS
00002F44                          3821  
00002F44  6700 09F0               3822      BEQ     RTS_D
00002F48                          3823  
00002F48                          3824  *---------------- LEA --------------------*
00002F48                          3825  
00002F48  45F9 0000F1C0           3826  CHECKLEAs   LEA   GENERAL_LEA_MASK, A2   *Get General Mask
00002F4E                          3827  
00002F4E  360A                    3828      MOVE.W A2, D3       *Move mask to D3
00002F50                          3829  
00002F50  3816                    3830      MOVE.W (A6), D4  *Get opcode from memory to D4
00002F52                          3831  
00002F52  C843                    3832      AND.W  D3, D4       *Mask Opcode
00002F54                          3833  
00002F54  45F9 000041C0           3834      LEA    GENERAL_LEA, A2    *Get General LEA Opcode
00002F5A                          3835  
00002F5A  3A0A                    3836      MOVE.W  A2, D5      *Move GENERAL LEA Opcode to D5
00002F5C                          3837  
00002F5C  B845                    3838      CMP.W   D5, D4      *Compare Opcode with GENERAL LEA
00002F5E                          3839  
00002F5E  6600 004C               3840      BNE     CHECK_NOTs     *If not Equal, Proceed to next instruction (NOT)
00002F62                          3841      
00002F62                          3842      
00002F62                          3843  * Else, check LEA varaints
00002F62                          3844  
00002F62                          3845   
00002F62                          3846  
00002F62  45F9 0000F1F8           3847      LEA   LEAMASK, A2   *Mask
00002F68                          3848      
00002F68  360A                    3849      MOVE.W A2, D3       *Move mask to D3
00002F6A                          3850      
00002F6A  3816                    3851      MOVE.W (A6),D4  *Get opcode from memory to D4
00002F6C                          3852      
00002F6C  C843                    3853      AND.W   D3,D4
00002F6E                          3854          
00002F6E                          3855      
00002F6E  45F9 000041D0           3856  CHECKLEAAI    LEA    LEAAI, A2    *Get LEA Indirect address Opcode
00002F74                          3857      
00002F74  3A0A                    3858      MOVE.W  A2, D5      *Move BRA Opcode to D5
00002F76                          3859      
00002F76                          3860      
00002F76  B845                    3861      CMP.W   D5, D4      *Compare Opcode with BRA
00002F78                          3862      
00002F78  6700 034A               3863      BEQ     LEAAI_D     *If Equal, Proceed
00002F7C                          3864      
00002F7C  3816                    3865  CHECKLEAWA    MOVE.W (A6),D4     *Since word and long addressing needs the masked bits, the original address is used 
00002F7E                          3866  
00002F7E  45F9 000041F9           3867      LEA    LEALA, A2            * Mask fix because yall forgor that address register dest exists
00002F84  360A                    3868      MOVE.W  A2, D3
00002F86  4E71                    3869      NOP
00002F88  C843                    3870      AND.W   D3,D4
00002F8A                          3871  
00002F8A  45F9 000041F8           3872      LEA    LEAWA, A2    *Get BRA Opcode
00002F90                          3873      
00002F90  3A0A                    3874      MOVE.W  A2, D5      *Move BRA Opcode to D5
00002F92                          3875      
00002F92  B845                    3876      CMP.W   D5, D4      *Compare Opcode with BRA
00002F94                          3877      
00002F94  6700 033A               3878      BEQ     LEAWA_D     *If Equal, Proceed
00002F98                          3879      
00002F98  45F9 000041F9           3880  CHECKLEALA    LEA    LEALA, A2    *Get LEA Long Address Opcode
00002F9E                          3881      
00002F9E  3A0A                    3882      MOVE.W  A2, D5      *Move BRA Opcode to D5
00002FA0                          3883      
00002FA0  B845                    3884      CMP.W   D5, D4      *Compare Opcode with BRA
00002FA2                          3885      
00002FA2  6700 0340               3886      BEQ     LEALA_D     *If Equal, Proceed
00002FA6                          3887      
00002FA6                          3888      
00002FA6  544E                    3889      ADDQ.W    #2, A6      *Go to next instruction
00002FA8  6000 263A               3890       BRA IFINVADDRMODE  *The opcode is LEA, but the addressing modes are incorrect
00002FAC                          3891       
00002FAC                          3892       
00002FAC                          3893  *---------------- NOT --------------------*
00002FAC  45F9 0000FF00           3894  CHECK_NOTs    LEA   GENERAL_NOT_MASK, A2   *Get General Mask
00002FB2                          3895  
00002FB2  360A                    3896      MOVE.W A2, D3       *Move mask to D3
00002FB4                          3897  
00002FB4  3816                    3898      MOVE.W (A6), D4  *Get opcode from memory to D4
00002FB6                          3899  
00002FB6  C843                    3900      AND.W  D3, D4       *Mask Opcode
00002FB8                          3901  
00002FB8  45F9 00004600           3902      LEA    GENERAL_NOT, A2    *Get General NOT Opcode
00002FBE                          3903  
00002FBE  3A0A                    3904      MOVE.W  A2, D5      *Move GENERAL NOT Opcode to D5
00002FC0                          3905  
00002FC0  B845                    3906      CMP.W   D5, D4      *Compare Opcode with GENERAL NOT
00002FC2                          3907  
00002FC2  6600 0110               3908      BNE     DATA_B     *If not Equal, Proceed to next instruction (DATA)
00002FC6                          3909      
00002FC6                          3910      
00002FC6                          3911  * Else, check NOT varaints
00002FC6                          3912  
00002FC6                          3913  
00002FC6                          3914  
00002FC6  45F9 0000FFF8           3915      LEA   NOTMASK, A2   *Get Mask
00002FCC                          3916  
00002FCC  360A                    3917      MOVE.W A2, D3       *Move mask to D3
00002FCE                          3918  
00002FCE  3816                    3919      MOVE.W (A6),D4  *Get opcode from memory to D4
00002FD0                          3920  
00002FD0  C843                    3921      AND.W  D3, D4   *Mask D3 and D4
00002FD2                          3922  
00002FD2                          3923              
00002FD2                          3924              
00002FD2                          3925        
00002FD2                          3926  *---------------- NOT.B EA--------------------*
00002FD2  45F9 00004600           3927  CHECK_NOTBD LEA NOTBDR, A2     *NOTB Data register         
00002FD8  3A0A                    3928              MOVE.W  A2, D5
00002FDA                          3929              
00002FDA  B845                    3930              CMP.W   D5, D4
00002FDC                          3931              
00002FDC  6700 031A               3932              BEQ     NOTBD_D
00002FE0                          3933  
00002FE0  45F9 00004610           3934  CHECK_NOTBAI LEA NOTBAI , A2   *NOTB Indirect Address        
00002FE6  3A0A                    3935              MOVE.W  A2, D5
00002FE8                          3936              
00002FE8  B845                    3937              CMP.W   D5, D4
00002FEA                          3938              
00002FEA  6700 0324               3939              BEQ     NOTBAI_D
00002FEE                          3940  
00002FEE  45F9 00004618           3941  CHECK_NOTBPO LEA NOTBP , A2   *NOTB Post Increment              
00002FF4  3A0A                    3942              MOVE.W  A2, D5
00002FF6                          3943              
00002FF6  B845                    3944              CMP.W   D5, D4
00002FF8                          3945              
00002FF8  6700 032E               3946              BEQ     NOTBPO_D
00002FFC                          3947  
00002FFC  45F9 00004620           3948  CHECK_NOTBPR LEA NOTBD , A2    *NOTB pre Decrement         
00003002  3A0A                    3949              MOVE.W  A2, D5
00003004                          3950              
00003004  B845                    3951              CMP.W   D5, D4
00003006                          3952              
00003006  6700 0338               3953              BEQ     NOTBPR_D
0000300A                          3954  
0000300A  45F9 00004638           3955  CHECK_NOTBWA LEA NOTBWA , A2   *NOTB Word Address              
00003010  3A0A                    3956              MOVE.W  A2, D5
00003012                          3957              
00003012  B845                    3958              CMP.W   D5, D4
00003014                          3959              
00003014  6700 0342               3960              BEQ     NOTBWA_D
00003018                          3961  
00003018  45F9 00004639           3962  CHECK_NOTBLA LEA NOTBLA, A2   *NOTB Long Address   
0000301E                          3963              
0000301E  3A0A                    3964              MOVE.W  A2, D5
00003020                          3965              
00003020  B845                    3966              CMP.W   D5, D4
00003022                          3967              
00003022  6700 034C               3968              BEQ     NOTBLA_D
00003026                          3969  
00003026                          3970  
00003026                          3971  *---------------- NOT.W EA--------------------*
00003026  45F9 00004640           3972  CHECK_NOTWD LEA NOTWDR , A2      *NOTW Data Register           
0000302C  3A0A                    3973              MOVE.W  A2, D5
0000302E                          3974              
0000302E  B845                    3975              CMP.W   D5, D4
00003030                          3976              
00003030  6700 02CE               3977              BEQ     NOTWD_D
00003034                          3978  
00003034  45F9 00004650           3979  CHECK_NOTWAI LEA NOTWAI , A2      *NOTW Indirect Address             
0000303A  3A0A                    3980              MOVE.W  A2, D5
0000303C                          3981              
0000303C  B845                    3982              CMP.W   D5, D4
0000303E                          3983              
0000303E  6700 02D8               3984              BEQ     NOTWAI_D
00003042                          3985  
00003042  45F9 00004658           3986  CHECK_NOTWPO LEA NOTWP , A2      *NOTW Post Increment 
00003048                          3987              
00003048  3A0A                    3988              MOVE.W  A2, D5
0000304A                          3989              
0000304A  B845                    3990              CMP.W   D5, D4
0000304C                          3991              
0000304C  6700 02E2               3992              BEQ     NOTWPO_D
00003050                          3993  
00003050  45F9 00004658           3994  CHECK_NOTWPR LEA NOTWP , A2      *NOTW Pre Decrement             
00003056  3A0A                    3995              MOVE.W  A2, D5
00003058                          3996              
00003058  B845                    3997              CMP.W   D5, D4
0000305A                          3998              
0000305A  6700 02EC               3999              BEQ     NOTWPR_D
0000305E                          4000  
0000305E  45F9 00004678           4001  CHECK_NOTWWA LEA NOTWWA, A2      *NOTW Word Address              
00003064  3A0A                    4002              MOVE.W  A2, D5
00003066                          4003              
00003066  B845                    4004              CMP.W   D5, D4
00003068                          4005              
00003068  6700 02F6               4006              BEQ     NOTWWA_D
0000306C                          4007  
0000306C  45F9 00004679           4008  CHECK_NOTWLA LEA NOTWLA, A2      *NOTW Long Address            
00003072  3A0A                    4009              MOVE.W  A2, D5
00003074                          4010              
00003074  B845                    4011              CMP.W   D5, D4
00003076                          4012              
00003076  6700 0300               4013              BEQ     NOTWLA_D
0000307A                          4014  
0000307A                          4015  *---------------- NOT.L EA--------------------*
0000307A  45F9 00004680           4016  CHECK_NOTLD LEA NOTLDR, A2      *NOTL Data Register              
00003080  3A0A                    4017              MOVE.W  A2, D5
00003082                          4018              
00003082  B845                    4019              CMP.W   D5, D4
00003084                          4020              
00003084  6700 0282               4021              BEQ     NOTLD_D
00003088                          4022  
00003088  45F9 00004690           4023  CHECK_NOTLAI LEA NOTLAI, A2      *NOTL Indirect Address             
0000308E  3A0A                    4024              MOVE.W  A2, D5
00003090                          4025              
00003090  B845                    4026              CMP.W   D5, D4
00003092                          4027              
00003092  6700 028C               4028              BEQ     NOTLAI_D
00003096                          4029  
00003096  45F9 00004698           4030  CHECK_NOTLPO LEA NOTLP, A2      *NOTL Post Increment  
0000309C                          4031              
0000309C  3A0A                    4032              MOVE.W  A2, D5
0000309E                          4033              
0000309E  B845                    4034              CMP.W   D5, D4
000030A0                          4035              
000030A0  6700 0296               4036              BEQ     NOTLPO_D
000030A4                          4037  
000030A4  45F9 000046A0           4038  CHECK_NOTLPR LEA NOTLD, A2      *NOTL Pre Decrement              
000030AA  3A0A                    4039              MOVE.W  A2, D5
000030AC                          4040              
000030AC  B845                    4041              CMP.W   D5, D4
000030AE                          4042              
000030AE  6700 02A0               4043              BEQ     NOTLPR_D
000030B2                          4044  
000030B2  45F9 000046B8           4045  CHECK_NOTLWA LEA NOTLWA, A2      *NOTL Word Address             
000030B8  3A0A                    4046              MOVE.W  A2, D5
000030BA                          4047              
000030BA  B845                    4048              CMP.W   D5, D4
000030BC                          4049              
000030BC  6700 02AA               4050              BEQ     NOTLWA_D
000030C0                          4051  
000030C0  45F9 000046B9           4052  CHECK_NOTLLA LEA NOTLLA, A2      *NOTL Long Address              
000030C6  3A0A                    4053              MOVE.W  A2, D5
000030C8                          4054              
000030C8  B845                    4055              CMP.W   D5, D4
000030CA                          4056              
000030CA  6700 02B4               4057              BEQ     NOTLLA_D
000030CE                          4058              
000030CE  544E                    4059              ADDQ.W    #2, A6      *Go to next instruction
000030D0  6000 2512               4060               BRA IFINVADDRMODE  *The opcode is NOT, but the addressing modes are incorrect
000030D4                          4061  
000030D4                          4062  
000030D4                          4063  
000030D4  6000 0866               4064  DATA_B    BRA     DATA_D  *No opcodes match, Go to Data
000030D8                          4065  
000030D8                          4066  
000030D8                          4067  
000030D8                          4068  *----------- GENERAL DECODERS -------------*
000030D8  363C 0007               4069  BASIC_SOURCE_REG_D MOVE.W  #$0007, D3   *Mask for register
000030DC                          4070  
000030DC  3C1E                    4071              MOVE.W  (A6)+, D6   *Move opcode to D6 and set A6 to next instruction
000030DE                          4072  
000030DE  CC43                    4073              AND.W   D3, D6      *Mask Opcode to get register
000030E0                          4074  
000030E0  4E75                    4075              RTS
000030E2                          4076  
000030E2  544E                    4077  BASIC_SOURCE_WA_D  ADDQ.W  #2, A6   *Move Pointer (A6) to word operand
000030E4                          4078  
000030E4  3C1E                    4079              MOVE.W  (A6)+, D6       *Move word operand to D6 and set A6 to next instruction
000030E6                          4080  
000030E6  4E75                    4081              RTS
000030E8                          4082  
000030E8  548E                    4083  BASIC_SOURCE_LA_D  ADDQ.L  #2, A6   *Move A6 to Long operand
000030EA                          4084  
000030EA  2C1E                    4085              MOVE.L  (A6)+, D6       * Move Long operand to D6 and set A6 to next instruction
000030EC                          4086  
000030EC  4E75                    4087              RTS
000030EE                          4088  
000030EE  544E                    4089  BASIC_IMMEDATA_BW_D ADDQ.W  #2, A6  *Move A6 to word-sized immediate value
000030F0                          4090  
000030F0  3C1E                    4091              MOVE.W  (A6)+, D6       *Move word-sized immediate value to D6 and set A6 to next instruction
000030F2                          4092  
000030F2  4E75                    4093              RTS
000030F4                          4094  
000030F4                          4095  
000030F4  548E                    4096  BASIC_IMMEDATA_L_D ADDQ.L  #2, A6   *Move A6 to long-sized immediate value
000030F6                          4097  
000030F6  2C1E                    4098              MOVE.L  (A6)+, D6       *Move long-sized immediate value to D6 and set A6 to next instruction
000030F8                          4099  
000030F8  4E75                    4100              RTS
000030FA                          4101  
000030FA                          4102  *NOTE: These three are not to be used when the source is either a Word address, Long address, or immediate data
000030FA                          4103  
000030FA  363C 0007               4104  BASIC_DEST_REG_D MOVE.W  #$0007, D3 *Mask for register
000030FE                          4105  
000030FE  3E1E                    4106              MOVE.W  (A6)+, D7   *Move opcode to D7 and set A6 to next instruction
00003100                          4107  
00003100  CE43                    4108              AND.W   D3, D7  *Mask Opcode to get register
00003102                          4109  
00003102  4E75                    4110              RTS
00003104                          4111  
00003104  544E                    4112  BASIC_DEST_WA_D  ADDQ.W    #2, A6   *Move Pointer (A6) to word operand
00003106                          4113  
00003106  3E1E                    4114              MOVE.W  (A6)+, D7       *Move word operand to D7 and set A6 to next instruction
00003108                          4115  
00003108  4E75                    4116              RTS
0000310A                          4117  
0000310A  548E                    4118  BASIC_DEST_LA_D  ADDQ.L    #2, A6   *Move A6 to Long operand
0000310C                          4119  
0000310C  2E1E                    4120              MOVE.L  (A6)+, D7       * Move Long operand to D7 and set A6 to next instruction
0000310E                          4121  
0000310E  4E75                    4122              RTS
00003110                          4123  
00003110                          4124      
00003110                          4125  
00003110                          4126  
00003110                          4127  
00003110                          4128  
00003110                          4129  
00003110                          4130  ADVANCED_DECODER_2:
00003110  163C 0002               4131   MOVE.B #2, D3 
00003114  4E71                    4132   NOP
00003116  DCC3                    4133   ADDA D3, A6
00003118  4E71                    4134   NOP
0000311A  2C16                    4135   MOVE.L (A6), D6
0000311C                          4136    
0000311C  163C 0004               4137   MOVE.B #4, D3
00003120  4E71                    4138   NOP 
00003122  DCC1                    4139   ADDA D1, A6
00003124  4E71                    4140   NOP
00003126  2E16                    4141   MOVE.L (A6), D7
00003128  4E75                    4142    RTS
0000312A                          4143  
0000312A                          4144  
0000312A                          4145  * If we have immidiate data in the instruction, 
0000312A                          4146  * we need to figure out how long the immidiate data is
0000312A                          4147  * for this to work make sure the offset is in D5
0000312A                          4148  * after this subroutine the instruction address will 
0000312A                          4149  * increase by a certain number, 
0000312A                          4150  CALC_ADDR_OFFSET:
0000312A                          4151  
0000312A  DDC5                    4152    ADD.L D5, A6
0000312C  4E75                    4153   RTS
0000312E                          4154   
0000312E                          4155  ADVANCED_DECODER:*Mask again to get the operands, the last operand is stored in D6, and the first operand is in D7* 
0000312E                          4156     
0000312E  123C 0010               4157   MOVE.B #16, D1 * we need to shift right 16 bits so the instruction lines up with the mask
00003132  2C02                    4158   MOVE.L D2, D6 * get a copy of the instruction
00003134  4E71                    4159   NOP
00003136  2E02                    4160   MOVE.L D2, D7  * get a copy of the instruction
00003138  4E71                    4161   NOP
0000313A                          4162   *first op*
0000313A                          4163   *LSR.L D1, D7   * align it
0000313A  2A0A                    4164   MOVE.L A2, D5 * move our first data mask 
0000313C  4E71                    4165   NOP
0000313E  CC85                    4166   AND.L D5, D6  * mask it
00003140                          4167   
00003140                          4168  *last op*
00003140  123C 0010               4169   MOVE.B #16, D1 * we need to shift right 16 bits to line stuff up
00003144                          4170   * LSR.L D1, D6   * align it
00003144  2A0B                    4171   MOVE.L A3, D5 * move our second data mask 
00003146  4E71                    4172   NOP
00003148  CE85                    4173   AND.L D5, D7  * mask it
0000314A  123C 0009               4174    MOVE.B #9, D1 * we need to shift right 10 bits so the first operand ends at the LSB
0000314E  E2AF                    4175      LSR.L D1, D7   * align it
00003150                          4176  
00003150  103C 0002               4177   MOVE.B #2, D0 
00003154  DCC0                    4178   ADDA D0, A6
00003156  4E71                    4179   NOP
00003158  3C16                    4180   MOVE.W (A6), D6
0000315A  9CC0                    4181   SUBA D0, A6
0000315C  4E75                    4182   RTS
0000315E                          4183  
0000315E                          4184  ADVANCED_DECODER_L:*Mask again to get the operands, the last operand is stored in D6, and the first operand is in D7* 
0000315E  123C 0010               4185   MOVE.B #16, D1 * we need to shift right 16 bits so the instruction lines up with the mask
00003162  2C02                    4186   MOVE.L D2, D6 * get a copy of the instruction
00003164  4E71                    4187   NOP
00003166  2E02                    4188   MOVE.L D2, D7  * get a copy of the instruction
00003168  4E71                    4189   NOP
0000316A                          4190   *first op*
0000316A                          4191   *LSR.L D1, D7   * align it
0000316A  2A0A                    4192   MOVE.L A2, D5 * move our first data mask 
0000316C  4E71                    4193   NOP
0000316E  CC85                    4194   AND.L D5, D6  * mask it
00003170                          4195   
00003170                          4196  *last op*
00003170  123C 0010               4197   MOVE.B #16, D1 * we need to shift right 16 bits to line stuff up
00003174                          4198   * LSR.L D1, D6   * align it
00003174  2A0B                    4199   MOVE.L A3, D5 * move our second data mask 
00003176  4E71                    4200   NOP
00003178  CC85                    4201   AND.L D5, D6  * mask it
0000317A  123C 0009               4202    MOVE.B #9, D1 * we need to shift right 10 bits so the first operand ends at the LSB
0000317E  E2AF                    4203      LSR.L D1, D7   * align it
00003180                          4204  
00003180  103C 0002               4205   MOVE.B #2, D0 
00003184  DCC0                    4206   ADDA D0, A6
00003186  4E71                    4207   NOP
00003188  2E16                    4208   MOVE.L (A6), D7
0000318A  9CC0                    4209    SUBA D0, A6
0000318C  4E75                    4210   RTS
0000318E                          4211  
0000318E                          4212  
0000318E                          4213  AQ_DECODER:
0000318E                          4214  *Mask again to get the operands, the last operand is stored in D6, and the first operand is in D7*
0000318E                          4215   
0000318E  123C 0010               4216   MOVE.B #16, D1 * we need to shift right 16 bits so the instruction lines up with the mask
00003192  2C02                    4217   MOVE.L D2, D6 * get a copy of the instruction
00003194  4E71                    4218   NOP
00003196  2E02                    4219   MOVE.L D2, D7  * get a copy of the instruction
00003198  4E71                    4220   NOP
0000319A                          4221   *first op*
0000319A                          4222   *LSR.L D1, D7   * align it
0000319A  2A0A                    4223   MOVE.L A2, D5 * move our first data mask 
0000319C  4E71                    4224   NOP
0000319E  CC85                    4225   AND.L D5, D6  * mask it
000031A0                          4226   *last op*
000031A0                          4227   
000031A0  123C 0010               4228   MOVE.B #16, D1 * we need to shift right 16 bits to line stuff up
000031A4                          4229  
000031A4  2A0B                    4230   MOVE.L A3, D5 * move our second data mask 
000031A6  4E71                    4231   NOP
000031A8  CE85                    4232   AND.L D5, D7  * mask it
000031AA  123C 0009               4233    MOVE.B #9, D1 * we need to shift right 12 bits so the data ends at the LSB
000031AE  E2AF                    4234      LSR.L D1, D7   * align it
000031B0  163C 0000               4235      MOVE.B #0, D3
000031B4  B606                    4236     CMP.B D6, D3 * if the data bits are 0 that means we have 8. 000 is reserved for 8 which is really weird lol. If we dont have 000 we can just go to the output
000031B6  544E                    4237     ADDQ #2, A6 
000031B8  6D00 109A               4238     BLT OUTPUT
000031BC  1E3C 0008               4239     MOVE.B #8, D7
000031C0  6000 1092               4240   BRA OUTPUT
000031C4                          4241  
000031C4                          4242  MQ_DECODER:
000031C4                          4243  *Mask again to get the operands, the last operand is stored in D6, and the first operand is in D7*
000031C4                          4244   
000031C4  123C 0010               4245   MOVE.B #16, D1 * we need to shift right 16 bits so the instruction lines up with the mask
000031C8  2C02                    4246   MOVE.L D2, D6 * get a copy of the instruction
000031CA  4E71                    4247   NOP
000031CC  2E02                    4248   MOVE.L D2, D7  * get a copy of the instruction
000031CE  4E71                    4249   NOP
000031D0                          4250   *first op*
000031D0                          4251   *LSR.L D1, D7   * align it
000031D0  2A0A                    4252   MOVE.L A2, D5 * move our first data mask 
000031D2  4E71                    4253   NOP
000031D4  CC85                    4254   AND.L D5, D6  * mask it
000031D6                          4255   *last op*
000031D6                          4256   
000031D6  123C 0010               4257   MOVE.B #16, D1 * we need to shift right 16 bits to line stuff up
000031DA                          4258  
000031DA  2A0B                    4259   MOVE.L A3, D5 * move our second data mask 
000031DC  4E71                    4260   NOP
000031DE  CE85                    4261   AND.L D5, D7  * mask it
000031E0  123C 0009               4262    MOVE.B #9, D1 * we need to shift right 10 bits so the first operand ends at the LSB
000031E4  E2AF                    4263      LSR.L D1, D7   * align it
000031E6  544E                    4264   ADDQ #2, A6 
000031E8  4E75                    4265   RTS
000031EA                          4266  
000031EA                          4267  
000031EA                          4268  BASIC_DECODER:
000031EA                          4269  *Mask again to get the operands, the last operand is stored in D6, and the first operand is in D7*
000031EA                          4270   
000031EA  123C 0010               4271   MOVE.B #16, D1 * we need to shift right 16 bits so the instruction lines up with the mask
000031EE  2C02                    4272   MOVE.L D2, D6 * get a copy of the instruction
000031F0  4E71                    4273   NOP
000031F2  2E02                    4274   MOVE.L D2, D7  * get a copy of the instruction
000031F4  4E71                    4275   NOP
000031F6                          4276   *first op*
000031F6                          4277   *LSR.L D1, D7   * align it
000031F6  2A0A                    4278   MOVE.L A2, D5 * move our first data mask 
000031F8  4E71                    4279   NOP
000031FA  CC85                    4280   AND.L D5, D6  * mask it
000031FC                          4281   *last op*
000031FC                          4282   
000031FC  123C 0010               4283   MOVE.B #16, D1 * we need to shift right 16 bits to line stuff up
00003200                          4284  
00003200  2A0B                    4285   MOVE.L A3, D5 * move our second data mask 
00003202  4E71                    4286   NOP
00003204  CE85                    4287   AND.L D5, D7  * mask it
00003206  123C 0009               4288    MOVE.B #9, D1 * we need to shift right 10 bits so the first operand ends at the LSB
0000320A  E2AF                    4289      LSR.L D1, D7   * align it
0000320C  544E                    4290   ADDQ #2, A6 
0000320E  4E75                    4291   RTS
00003210                          4292  
00003210                          4293  
00003210                          4294  *----------- DECODERS -------------*
00003210  363C 0007               4295  SOURCE_REG_D MOVE.W  #$0007, D3   *Mask for register
00003214                          4296  
00003214  3C1E                    4297              MOVE.W  (A6)+, D6   *Move opcode to D6 and set A6 to next instruction
00003216                          4298          
00003216  CC43                    4299              AND.W   D3, D6      *Mask Opcode to get register
00003218                          4300              
00003218  4E75                    4301              RTS
0000321A                          4302  
0000321A  544E                    4303  SOURCE_WA_D  ADDQ.W  #2, A6   *Move Pointer (A6) to word operand
0000321C                          4304  
0000321C  3C1E                    4305              MOVE.W  (A6)+, D6       *Move word operand to D6 and set A6 to next instruction
0000321E                          4306              
0000321E  4E75                    4307              RTS
00003220                          4308              
00003220  548E                    4309  SOURCE_LA_D  ADDQ.L  #2, A6   *Move A6 to Long operand
00003222                          4310  
00003222  2C1E                    4311              MOVE.L  (A6)+, D6       * Move Long operand to D6 and set A6 to next instruction
00003224                          4312              
00003224  4E75                    4313              RTS
00003226                          4314              
00003226                          4315              
00003226  3C16                    4316  SOURCE_DREG_D MOVE.W  (A6), D6    *Move opcode to D6
00003228                          4317  
00003228  363C 0E00               4318              MOVE.W  #$0E00, D3          *Mask for source
0000322C                          4319              
0000322C  CC43                    4320              AND.W   D3, D6              *Mask opcode
0000322E                          4321                          
0000322E  EF5E                    4322              ROL.W   #7, D6              *Rotate opcode to get correct value
00003230                          4323              
00003230                          4324              
00003230  4E75                    4325              RTS
00003232                          4326  
00003232                          4327  
00003232  3E16                    4328  DEST_DREG_D   MOVE.W  (A6), D7    *Move opcode to D7
00003234                          4329  
00003234  363C 0E00               4330              MOVE.W  #$0E00, D3          *Mask for destination
00003238                          4331              
00003238  CE43                    4332              AND.W   D3, D7              *Mask opcode
0000323A                          4333                          
0000323A  EF5F                    4334              ROL.W   #7, D7              *Rotate opcode to get correct value
0000323C                          4335              
0000323C                          4336              
0000323C  4E75                    4337              RTS
0000323E                          4338              
0000323E  363C 0007               4339  DEST_REG_D MOVE.W  #$0007, D3 *Mask for register
00003242                          4340  
00003242  3E1E                    4341              MOVE.W  (A6)+, D7   *Move opcode to D7 and set A6 to next instruction
00003244                          4342          
00003244  CE43                    4343              AND.W   D3, D7  *Mask Opcode to get register
00003246                          4344              
00003246  4E75                    4345              RTS
00003248                          4346              
00003248                          4347   
00003248                          4348  
00003248                          4349  
00003248                          4350  
00003248  3C1E                    4351  BASIC_BCC_D MOVE.W (A6)+, D6    *Move opcode to D6 and set A6 to next instruction
0000324A                          4352  
0000324A  364E                    4353              MOVEA.W  A6, A3     *Save current address to A3
0000324C                          4354  
0000324C  363C 00FF               4355              MOVE.W  #$00FF, D3  *Set up mask
00003250                          4356  
00003250  CC43                    4357              AND.W   D3, D6      *Mask D6 to get displacement value
00003252                          4358  
00003252  BC3C 0000               4359              CMP.B   #$00, D6    *If least significant byte is $00, then the displacement is in the next word
00003256                          4360  
00003256  6700 000E               4361              BEQ     WDIS        *Decode word displacement
0000325A                          4362  
0000325A  BC3C 00FF               4363              CMP.B   #$FF, D6    *If least significant byte is $FF, then the displacement is in the next long
0000325E                          4364  
0000325E  6700 000C               4365              BEQ     LDIS        *Decode Long displacement
00003262                          4366  
00003262  DC4B                    4367              ADD.W   A3, D6      *Add current address to displacement to get branching address.
00003264                          4368  
00003264  4E75                    4369              RTS
00003266                          4370  
00003266  3C1E                    4371  WDIS        MOVE.W (A6)+, D6    *Move word displacement to D6 and set A6 to next instruction
00003268                          4372  
00003268  DC4B                    4373              ADD.W   A3, D6      *Add current address to displacement to get branching address.
0000326A                          4374  
0000326A  4E75                    4375              RTS
0000326C                          4376  
0000326C  2C1E                    4377  LDIS        MOVE.L (A6)+, D6    *Move long displacement to D6 and set A6 to next instruction
0000326E                          4378  
0000326E  DC8B                    4379              ADD.L   A3, D6      *Add current address to displacement to get branching address.
00003270                          4380  
00003270  4E75                    4381              RTS
00003272                          4382  
00003272                          4383  *----------- General Decoder for Rotate/Shift Data/Immediate---*
00003272  341E                    4384  BASIC_RSData_D MOVE.W  (A6)+, D2    *Move opcode to D2 and set A6 to next instruction
00003274                          4385  
00003274  363C 0E07               4386              MOVE.W  #$0E07, D3      *Prepare register mask
00003278                          4387  
00003278  C443                    4388              AND.W   D3, D2          *Mask opcode
0000327A                          4389  
0000327A  1E02                    4390              MOVE.B  D2, D7          *Move destination operand to D7
0000327C                          4391  
0000327C  EF5A                    4392              ROL.W   #7, D2          *Rotate opcode to get source operand
0000327E                          4393  
0000327E  163C 0007               4394              MOVE.B  #$07, D3        *prepare source mask
00003282                          4395  
00003282  C403                    4396              AND.B   D3, D2          *mask opcode
00003284                          4397  
00003284  1C02                    4398              MOVE.B  D2, D6          *Move source operand to D6
00003286                          4399  
00003286  4E75                    4400              RTS
00003288                          4401  
00003288  341E                    4402  BASIC_RSImmediate_D MOVE.W  (A6)+, D2   *Move opcode to D2 and set A6 to next instruction
0000328A                          4403  
0000328A  363C 0E07               4404              MOVE.W  #$0E07, D3          *Prepare register mask
0000328E                          4405  
0000328E  C443                    4406              AND.W   D3, D2              *Mask opcode
00003290                          4407  
00003290  1E02                    4408              MOVE.B  D2, D7              *Move destination operand to D7
00003292                          4409  
00003292  EF5A                    4410              ROL.W   #7, D2              *Rotate opcode to get source operand
00003294                          4411  
00003294  163C 0007               4412              MOVE.B  #$07, D3            *prepare source mask
00003298                          4413  
00003298  C403                    4414              AND.B   D3, D2              *mask opcode
0000329A                          4415  
0000329A  B43C 0000               4416              CMP.B   #$00, D2            *Check if the source is $00
0000329E                          4417  
0000329E  6700 0006               4418              BEQ     PRINT8              *If the source is $00, then source is 8
000032A2                          4419  
000032A2  1C02                    4420              MOVE.B  D2, D6              *Move source operand to D6
000032A4                          4421  
000032A4  4E75                    4422              RTS
000032A6                          4423  
000032A6  1C3C 0008               4424  PRINT8      MOVE.B  #$08, D6            *Move 8 to D6
000032AA                          4425  
000032AA  4E75                    4426              RTS
000032AC                          4427  
000032AC                          4428  *-------- General Decoder for data register for AND and OR
000032AC                          4429  
000032AC  3C16                    4430  BASIC_SOURCE_DREG_D MOVE.W  (A6), D6    *Move opcode to D6
000032AE                          4431  
000032AE  363C 0E00               4432              MOVE.W  #$0E00, D3          *Mask for source
000032B2                          4433  
000032B2  CC43                    4434              AND.W   D3, D6              *Mask opcode
000032B4                          4435  
000032B4  EF5E                    4436              ROL.W   #7, D6              *Rotate opcode to get correct value
000032B6                          4437  
000032B6                          4438  
000032B6  4E75                    4439              RTS
000032B8                          4440  
000032B8                          4441  
000032B8  3E16                    4442  BASIC_DEST_DREG_D   MOVE.W  (A6), D7    *Move opcode to D7
000032BA                          4443  
000032BA  363C 0E00               4444              MOVE.W  #$0E00, D3          *Mask for destination
000032BE                          4445  
000032BE  CE43                    4446              AND.W   D3, D7              *Mask opcode
000032C0                          4447  
000032C0  EF5F                    4448              ROL.W   #7, D7              *Rotate opcode to get correct value
000032C2                          4449  
000032C2                          4450  
000032C2  4E75                    4451              RTS
000032C4                          4452  
000032C4                          4453  
000032C4                          4454  *---------------- LEA Variants-------------*
000032C4  6100 FF4A               4455  LEAAI_D BSR SOURCE_REG_D *Decode LEA Indirect Address to Address Register
000032C8  6100 FF74               4456          BSR DEST_REG_D
000032CC                          4457          
000032CC  6000 1C3A               4458          BRA IFLEAAIXA      *Print LEA and operands
000032D0                          4459  
000032D0                          4460  
000032D0  6100 FF48               4461  LEAWA_D BSR SOURCE_WA_D  *Decode LEA Indirect Address to Address Register
000032D4                          4462          *BSR DEST_REG_D
000032D4  3E02                    4463          MOVE.W  D2,D7
000032D6  363C 0E00               4464          MOVE.W  #$0E00,D3
000032DA  CE43                    4465          AND.W   D3,D7
000032DC  E087                    4466          ASR.L   #8,D7 *cant be bothered to deal with big boi numbers rn
000032DE  E287                    4467          ASR.L   #1,D7 
000032E0  6000 1C32               4468          BRA IFLEAAAXA      *Print LEA and operands
000032E4                          4469  
000032E4                          4470  
000032E4  6100 FF3A               4471  LEALA_D BSR SOURCE_LA_D  *Decode LEA Indirect Address to Address Register
000032E8                          4472          *BSR DEST_REG_D
000032E8  3E02                    4473          MOVE.W  D2,D7
000032EA  363C 0E00               4474          MOVE.W  #$0E00,D3
000032EE  CE43                    4475          AND.W   D3,D7
000032F0  E087                    4476          ASR.L   #8,D7 *cant be bothered to deal with big boi numbers rn
000032F2  E287                    4477          ASR.L   #1,D7 
000032F4  6000 1C1E               4478          BRA IFLEAAAXA       *Print LEA and operands
000032F8                          4479           
000032F8                          4480  
000032F8                          4481  *---------------- NOT Variants --------------------*
000032F8                          4482              
000032F8  6100 FF2C               4483  NOTBD_D BSR SOURCE_DREG_D     *Decode NOT.B Data Register
000032FC                          4484  
000032FC  6000 1C2E               4485              BRA IFNOTBEAXD      *Print NOT.B and operand
00003300                          4486              
00003300  6100 FF24               4487  NOTWD_D BSR SOURCE_DREG_D     *Decode NOT.W Data Register
00003304                          4488  
00003304  6000 1C62               4489              BRA IFNOTWEAXD      *Print NOT.B and operand
00003308                          4490              
00003308  6100 FF1C               4491  NOTLD_D BSR SOURCE_DREG_D     *Decode NOT.L Data Register
0000330C                          4492   
0000330C  6000 1C96               4493              BRA IFNOTLEAXD      *Print NOT.L and operand
00003310                          4494              
00003310  6100 FEFE               4495  NOTBAI_D  BSR SOURCE_REG_D *Decode NOT.B Indirect Address
00003314                          4496             
00003314  6000 1C22               4497              BRA IFNOTBEAXAI     *Print NOT.B and operand
00003318                          4498     
00003318  6100 FEF6               4499  NOTWAI_D BSR SOURCE_REG_D *Decode NOT.W Data Register
0000331C                          4500  
0000331C  6000 1C56               4501              BRA IFNOTWEAXAI     *Print NOT.W and operand
00003320                          4502              
00003320  6100 FEEE               4503  NOTLAI_D  BSR SOURCE_REG_D *Decode NOT.L Data Register
00003324                          4504              
00003324  6000 1C8A               4505              BRA IFNOTLEAXAI     *Print NOT.L and operand
00003328                          4506              
00003328  6100 FEE6               4507  NOTBPO_D   BSR SOURCE_REG_D *Decode NOT.B Post increment
0000332C                          4508  
0000332C  6000 1C22               4509              BRA IFNOTBEAXPO     *Print NOT.B and operand
00003330                          4510              
00003330  6100 FEDE               4511  NOTWPO_D   BSR SOURCE_REG_D *Decode NOT.W Post increment
00003334                          4512  
00003334  6000 1C56               4513              BRA IFNOTWEAXPO     *Print NOT.W and operand
00003338                          4514              
00003338  6100 FED6               4515  NOTLPO_D     BSR SOURCE_REG_D *Decode NOT.L Post increment
0000333C                          4516  
0000333C  6000 1C8A               4517              BRA IFNOTLEAXPO     *Print NOT.L and operand
00003340                          4518              
00003340  6100 FECE               4519  NOTBPR_D    BSR SOURCE_REG_D *Decode NOT.B Post decrement
00003344                          4520  
00003344  6000 1BFE               4521              BRA IFNOTBEAXPR     *Print NOT.B and operand
00003348                          4522              
00003348  6100 FEC6               4523  NOTWPR_D    BSR SOURCE_REG_D *Decode NOT.W Post decrement
0000334C                          4524  
0000334C  6000 1C32               4525              BRA IFNOTWEAXPR     *Print NOT.W and operand
00003350                          4526              
00003350  6100 FEBE               4527  NOTLPR_D     BSR SOURCE_REG_D *Decode NOT.L Post decrement
00003354                          4528              
00003354  6000 1C66               4529              BRA IFNOTLEAXPR     *Print NOT.L and operand
00003358                          4530              
00003358  6100 FEC0               4531  NOTBWA_D    BSR SOURCE_WA_D *Decode NOT.B Word address
0000335C                          4532              
0000335C  6000 1BC2               4533              BRA IFNOTBEA        *Print NOT.B and operand
00003360                          4534              
00003360  6100 FEB8               4535  NOTWWA_D    BSR SOURCE_WA_D *Decode NOT.W Word address
00003364                          4536              
00003364  6000 1BF6               4537              BRA IFNOTWEA        *Print NOT.W and operand
00003368                          4538              
00003368  6100 FEB0               4539  NOTLWA_D    BSR SOURCE_WA_D *Decode NOT.L Word address
0000336C                          4540              
0000336C  6000 1C2A               4541              BRA IFNOTLEA        *Print NOT.L and operand
00003370                          4542              
00003370  6100 FEAE               4543  NOTBLA_D    BSR SOURCE_LA_D *Decode NOT.B Long address
00003374                          4544              
00003374  6000 1BAA               4545              BRA IFNOTBEA        *Print NOT.B and operand
00003378                          4546              
00003378  6100 FEA6               4547  NOTWLA_D    BSR SOURCE_LA_D *Decode NOT.W Long address
0000337C                          4548              
0000337C  6000 1BDE               4549              BRA IFNOTWEA        *Print NOT.W and operand
00003380                          4550              
00003380  6100 FE9E               4551  NOTLLA_D    BSR SOURCE_LA_D *Decode NOT.L Long address
00003384                          4552              
00003384  6000 1C12               4553              BRA IFNOTLEA        *Print NOT.L and operand
00003388                          4554  
00003388                          4555  
00003388                          4556  *---------------- BCC Variants-------------*
00003388  6100 FEBE               4557  BRA_D     BSR BASIC_BCC_D   *Decode BRA operand
0000338C                          4558            
0000338C  6000 1F40               4559            BRA   IFBRA    *Print BRA and operand
00003390                          4560            
00003390                          4561  
00003390  6100 FEB6               4562  BEQ_D     BSR   BASIC_BCC_D *Decode BEQ operand
00003394                          4563            
00003394  6000 1F5C               4564            BRA   IFBEQ     *Print BEQ and operand
00003398                          4565            
00003398                          4566  
00003398  6100 FEAE               4567  BGT_D       BSR BASIC_BCC_D *Decode BGT operand
0000339C                          4568              
0000339C  6000 1F3C               4569              BRA IFBGT   *Print BGT and operand
000033A0                          4570  
000033A0  6100 FEA6               4571  BLE_D       BSR BASIC_BCC_D *Decode BLE operand
000033A4                          4572              
000033A4  6000 1F40               4573              BRA IFBLE   *Print BLE and operand
000033A8                          4574              
000033A8                          4575  
000033A8                          4576  
000033A8                          4577  *---------------- JSR Variants-------------*
000033A8  6100 FD2E               4578  JSRAI_D BSR BASIC_SOURCE_REG_D  *Decode JSR Indirect Address Register Operand
000033AC                          4579  
000033AC  6000 1F02               4580          BRA IFJSRAXAI     *Print JSR and operand
000033B0                          4581  
000033B0                          4582  
000033B0  6100 FD30               4583  JSRWA_D BSR BASIC_SOURCE_WA_D   *Decode JSR Word Address Operand
000033B4                          4584  
000033B4  6000 1EEE               4585          BRA IFJSREA     *Print JSR and operand
000033B8                          4586  
000033B8                          4587  
000033B8  6100 FD2E               4588  JSRLA_D BSR BASIC_SOURCE_LA_D   *Decode JSR Long Address Operand
000033BC                          4589  
000033BC  6000 1EE6               4590           BRA IFJSREA     *Print JSR and operand
000033C0                          4591  
000033C0                          4592  
000033C0                          4593  *------------ ASL Variants --------------*
000033C0  6100 FD16               4594  ASLAI_D   BSR BASIC_SOURCE_REG_D    *Decode ASL Indirect Address Register Operand
000033C4                          4595  
000033C4  6000 1F44               4596            BRA   IFASLEAXAI      *Print ASL and operand
000033C8                          4597  
000033C8  6100 FD0E               4598  ASLPI_D   BSR BASIC_SOURCE_REG_D    *Decode ASL Post Increment Address Register Operand
000033CC                          4599  
000033CC  6000 1F54               4600            BRA   IFASLEAXPO      *Print ASL and operand
000033D0                          4601  
000033D0  6100 FD06               4602  ASLPD_D   BSR BASIC_SOURCE_REG_D    *Decode ASL Pre Decrement Address Register Operand
000033D4                          4603  
000033D4  6000 1F40               4604            BRA   IFASLEAXPR      *Print ASL and operand
000033D8                          4605  
000033D8  6100 FD08               4606  ASLWA_D   BSR BASIC_SOURCE_WA_D     *Decode ASL Word Address Operand
000033DC                          4607  
000033DC  6000 1F20               4608            BRA   IFASLEA         *Print ASL and operand
000033E0                          4609  
000033E0  6100 FD06               4610  ASLLA_D   BSR BASIC_SOURCE_LA_D *Decode ASL Long Address Operand
000033E4                          4611  
000033E4  6000 1F18               4612            BRA   IFASLEA         *Print ASL and operand
000033E8                          4613  
000033E8  6100 FE88               4614  ASLBD_D   BSR BASIC_RSData_D    *Decode ASL.B Data Register Operand
000033EC                          4615  
000033EC  6000 1F40               4616            BRA   IFASLBDXD     *Print ASL.B and operands
000033F0                          4617  
000033F0  6100 FE80               4618  ASLWD_D   BSR BASIC_RSData_D    *Decode ASL.W Data Register Operand
000033F4                          4619  
000033F4  6000 1F50               4620            BRA   IFASLWDXD       *Print ASL.W and operands
000033F8                          4621            
000033F8  6100 FE78               4622  ASLLD_D   BSR BASIC_RSData_D    *Decode ASL.L Data Register Operand
000033FC                          4623  
000033FC  6000 1F60               4624            BRA   IFASLLDXD       *Print ASL.L and operands
00003400                          4625  
00003400  6100 FE86               4626  ASLBI_D   BSR BASIC_RSImmediate_D   *Decode ASL.B Immediate Value Operand
00003404                          4627  
00003404  6000 1F34               4628            BRA   IFASLBIXD       *Print ASL.B and operands
00003408                          4629  
00003408  6100 FE7E               4630  ASLWI_D   BSR BASIC_RSImmediate_D   *Decode ASL.W Immediate Value Operand
0000340C                          4631  
0000340C  6000 1F44               4632            BRA   IFASLWIXD       *Print ASL.W and operands
00003410                          4633  
00003410  6100 FE76               4634  ASLLI_D   BSR BASIC_RSImmediate_D   *Decode ASL.L Immediate Value Operand
00003414                          4635  
00003414  6000 1F54               4636            BRA   IFASLLIXD       *Print ASL.L and operands
00003418                          4637  
00003418                          4638  
00003418                          4639  
00003418                          4640  *------------ ASR Variants --------------*
00003418  6100 FCBE               4641  ASRAI_D   BSR BASIC_SOURCE_REG_D    *Decode ASR Indirect Address Register Operand
0000341C                          4642  
0000341C  6000 1F64               4643            BRA   IFASREAXAI      *Print ASR and operand
00003420                          4644            
00003420  6100 FCB6               4645  ASRPI_D   BSR BASIC_SOURCE_REG_D    *Decode ASR Post Increment Address Register Operand
00003424                          4646  
00003424  6000 1F74               4647            BRA   IFASREAXPO      *Print ASR and operand
00003428                          4648  
00003428  6100 FCAE               4649  ASRPD_D   BSR BASIC_SOURCE_REG_D    *Decode ASR Pre Decrement Address Register Operand
0000342C                          4650  
0000342C  6000 1F60               4651            BRA   IFASREAXPR      *Print ASR and operand
00003430                          4652  
00003430  6100 FCB0               4653  ASRWA_D   BSR BASIC_SOURCE_WA_D     *Decode ASR Word Address Operand
00003434                          4654  
00003434  6000 1F40               4655            BRA   IFASREA         *Print ASR and operand
00003438                          4656  
00003438  6100 FCAE               4657  ASRLA_D   BSR BASIC_SOURCE_LA_D     *Decode ASR Long Address Operand
0000343C                          4658  
0000343C  6000 1F38               4659            BRA   IFASREA         *Print ASR and oeprand
00003440                          4660  
00003440  6100 FE30               4661  ASRBD_D   BSR BASIC_RSData_D        *Decode ASR.B Data Register Operand
00003444                          4662  
00003444  6000 1F60               4663            BRA   IFASRBDXD       *Print ASR.B and operands
00003448                          4664  
00003448  6100 FE28               4665  ASRWD_D   BSR BASIC_RSData_D        *Decode ASR.W Data Register Operand
0000344C                          4666  
0000344C  6000 1F70               4667            BRA   IFASRWDXD       *Print ASR.W and operands
00003450                          4668            
00003450  6100 FE20               4669  ASRLD_D   BSR BASIC_RSData_D        *Decode ASR.L Data Register Operand
00003454                          4670  
00003454  6000 1F80               4671            BRA   IFASRLDXD       *Print ASR.L and operands
00003458                          4672  
00003458  6100 FE2E               4673  ASRBI_D   BSR BASIC_RSImmediate_D   *Decode ASR.B Immediate Value Operand
0000345C                          4674  
0000345C  6000 1F54               4675            BRA   IFASRBIXD       *Print ASR.B and operands
00003460                          4676  
00003460  6100 FE26               4677  ASRWI_D   BSR BASIC_RSImmediate_D   *Decode ASR.W Immediate Value Operand
00003464                          4678  
00003464  6000 1F64               4679            BRA   IFASRWIXD       *Print ASR.W and operands
00003468                          4680  
00003468  6100 FE1E               4681  ASRLI_D   BSR BASIC_RSImmediate_D   *Decode ASR.L Immediate Value Operand
0000346C                          4682  
0000346C  6000 1F74               4683            BRA   IFASRLIXD       *Print ASR.L and operands
00003470                          4684  
00003470                          4685  
00003470                          4686  *------------ LSL Variants --------------*
00003470  6100 FC66               4687  LSLAI_D   BSR BASIC_SOURCE_REG_D    *Decode LSL Indirect Address Register Operand
00003474                          4688  
00003474  6000 1F84               4689            BRA   IFLSLEAXAI      *Print LSL and operand
00003478                          4690  
00003478  6100 FC5E               4691  LSLPI_D   BSR BASIC_SOURCE_REG_D    *Decode LSL Post Increment Address Register Operand
0000347C                          4692  
0000347C  6000 1F94               4693            BRA   IFLSLEAXPO      *Print LSL and operand
00003480                          4694  
00003480  6100 FC56               4695  LSLPD_D   BSR BASIC_SOURCE_REG_D    *Decode LSL Pre Decrement Address Register Operand
00003484                          4696  
00003484  6000 1F80               4697            BRA   IFLSLEAXPR      *Print LSL and operand
00003488                          4698  
00003488  6100 FC58               4699  LSLWA_D   BSR BASIC_SOURCE_WA_D     *Decode LSL Word Address Operand
0000348C                          4700  
0000348C  6000 1F60               4701            BRA   IFLSLEA         *Print LSL and operand
00003490                          4702  
00003490  6100 FC56               4703  LSLLA_D   BSR BASIC_SOURCE_LA_D     *Decode LSL Long Address Operand
00003494                          4704  
00003494  6000 1F58               4705            BRA   IFLSLEA         *Print LSL and operand
00003498                          4706  
00003498  6100 FDD8               4707  LSLBD_D   BSR BASIC_RSData_D        *Decode LSL.B Data Register Operand
0000349C                          4708  
0000349C  6000 1F80               4709            BRA   IFLSLBDXD       *Print LSL.B and operands
000034A0                          4710  
000034A0  6100 FDD0               4711  LSLWD_D   BSR BASIC_RSData_D        *Decode LSL.W Data Register Operand
000034A4                          4712  
000034A4  6000 1F90               4713            BRA   IFLSLWDXD       *Print LSL.W and operands
000034A8                          4714            
000034A8  6100 FDC8               4715  LSLLD_D   BSR BASIC_RSData_D        *Decode LSL.L Data Register Operand
000034AC                          4716  
000034AC  6000 1FA0               4717            BRA   IFLSLLDXD       *Print LSL.L and operands
000034B0                          4718  
000034B0  6100 FDD6               4719  LSLBI_D   BSR BASIC_RSImmediate_D   *Decode LSL.B Immediate Value Operand
000034B4                          4720  
000034B4  6000 1F74               4721            BRA   IFLSLBIXD       *Print LSL.B and operands
000034B8                          4722  
000034B8  6100 FDCE               4723  LSLWI_D   BSR BASIC_RSImmediate_D   *Decode LSL.W Immediate Value Operand
000034BC                          4724  
000034BC  6000 1F84               4725            BRA   IFLSLWIXD       *Print LSL.W and operands
000034C0                          4726  
000034C0  6100 FDC6               4727  LSLLI_D   BSR BASIC_RSImmediate_D   *Decode LSL.L Immediate Value Operand
000034C4                          4728  
000034C4  6000 1F94               4729            BRA   IFLSLLIXD       *Print LSL.L and operands
000034C8                          4730  
000034C8                          4731  
000034C8                          4732  *------------ LSR Variants --------------*
000034C8  6100 FC0E               4733  LSRAI_D   BSR BASIC_SOURCE_REG_D    *Decode LSR Indirect Address Register Operand
000034CC                          4734  
000034CC  6000 1FA4               4735            BRA   IFLSREAXAI       *Print LSR and operand
000034D0                          4736  
000034D0  6100 FC06               4737  LSRPI_D   BSR BASIC_SOURCE_REG_D    *Decode LSR Post Increment Address Register Operand
000034D4                          4738  
000034D4  6000 1FB4               4739            BRA   IFLSREAXPO      *Print LSR and oeprand
000034D8                          4740  
000034D8  6100 FBFE               4741  LSRPD_D   BSR BASIC_SOURCE_REG_D    *Decode LSR Pre Decrement Address Register Operand
000034DC                          4742  
000034DC  6000 1FA0               4743            BRA   IFLSREAXPR      *Print LSR and operand
000034E0                          4744  
000034E0  6100 FC00               4745  LSRWA_D   BSR BASIC_SOURCE_WA_D     *Decode LSR Word Address Operand
000034E4                          4746  
000034E4  6000 1F80               4747            BRA   IFLSREA         *Print LSR and operand
000034E8                          4748  
000034E8  6100 FBFE               4749  LSRLA_D   BSR BASIC_SOURCE_LA_D     *Decode LSR Long Address Operand
000034EC                          4750  
000034EC  6000 1F78               4751            BRA   IFLSREA         *Print LSR and operand
000034F0                          4752  
000034F0  6100 FD80               4753  LSRBD_D   BSR BASIC_RSData_D        *Decode LSR.B Data Register Operand
000034F4                          4754  
000034F4  6000 1FA0               4755            BRA   IFLSRBDXD       *Print LSR.B and operands
000034F8                          4756  
000034F8  6100 FD78               4757  LSRWD_D   BSR BASIC_RSData_D        *Decode LSR.W Data Register Operand
000034FC                          4758  
000034FC  6000 1FB0               4759            BRA   IFLSRWDXD       *Print LSR.W and operands
00003500                          4760            
00003500  6100 FD70               4761  LSRLD_D   BSR BASIC_RSData_D        *Decode LSR.L Data Register Operand
00003504                          4762  
00003504  6000 1FC0               4763            BRA   IFLSRLDXD       *Print LSR.L and operands
00003508                          4764  
00003508  6100 FD7E               4765  LSRBI_D   BSR BASIC_RSImmediate_D   *Decode LSR.B Immediate Value Operand
0000350C                          4766  
0000350C  6000 1F94               4767            BRA   IFLSRBIXD       *Print LSR.B and operands
00003510                          4768  
00003510  6100 FD76               4769  LSRWI_D   BSR BASIC_RSImmediate_D   *Decode LSR.W Immediate Value Operand
00003514                          4770  
00003514  6000 1FA4               4771            BRA   IFLSRWIXD       *Print LSR.W and operands
00003518                          4772  
00003518  6100 FD6E               4773  LSRLI_D   BSR BASIC_RSImmediate_D   *Decode LSR.L Immediate Value Operand
0000351C                          4774  
0000351C  6000 1FB4               4775            BRA   IFLSRLIXD       *Print LSR.L and operands
00003520                          4776  
00003520                          4777  
00003520                          4778  *------------ ROL Variants --------------*
00003520  6100 FBB6               4779  ROLAI_D   BSR BASIC_SOURCE_REG_D    *Decode ROL Indirect Address Register Operand
00003524                          4780  
00003524  6000 1FC4               4781            BRA   IFROLEAXAI      *Print ROL and operand
00003528                          4782  
00003528  6100 FBAE               4783  ROLPI_D   BSR BASIC_SOURCE_REG_D    *Decode ROL Post Increment Address Register Operand
0000352C                          4784  
0000352C  6000 1FD4               4785            BRA   IFROLEAXPO      *Print ROL and operand
00003530                          4786  
00003530  6100 FBA6               4787  ROLPD_D   BSR BASIC_SOURCE_REG_D    *Decode ROL Pre Decrement Address Register Operand
00003534                          4788  
00003534  6000 1FC0               4789            BRA   IFROLEAXPR      *Print ROL and operand
00003538                          4790  
00003538  6100 FBA8               4791  ROLWA_D   BSR BASIC_SOURCE_WA_D     *Decode ROL Word Address Operand
0000353C                          4792  
0000353C  6000 1FA0               4793            BRA   IFROLEA         *Print ROL and operand
00003540                          4794  
00003540  6100 FBA6               4795  ROLLA_D   BSR BASIC_SOURCE_LA_D     *Decode ROL Long Address Operand
00003544                          4796  
00003544  6000 1F98               4797            BRA   IFROLEA         *Print ROL and operand
00003548                          4798  
00003548  6100 FD28               4799  ROLBD_D   BSR BASIC_RSData_D        *Decode ROL.B Data Register Operand
0000354C                          4800  
0000354C  6000 1FC0               4801            BRA   IFROLBDXD       *Print ROL.B and operands
00003550                          4802  
00003550  6100 FD20               4803  ROLWD_D   BSR BASIC_RSData_D        *Decode ROL.W Data Register Operand
00003554                          4804  
00003554  6000 1FD0               4805            BRA   IFROLWDXD       *Print ROL.W and operands
00003558                          4806            
00003558  6100 FD18               4807  ROLLD_D   BSR BASIC_RSData_D        *Decode ROL.L Data Register Operand
0000355C                          4808  
0000355C  6000 1FE0               4809            BRA   IFROLLDXD       *Print ROL.L and operands
00003560                          4810  
00003560  6100 FD26               4811  ROLBI_D   BSR BASIC_RSImmediate_D   *Decode ROL.B Immediate Value Operand
00003564                          4812  
00003564  6000 1FB4               4813            BRA   IFROLBIXD       *Print ROL.B and operands
00003568                          4814  
00003568  6100 FD1E               4815  ROLWI_D   BSR BASIC_RSImmediate_D   *Decode ROL.W Immediate Value Operand
0000356C                          4816  
0000356C  6000 1FC4               4817            BRA   IFROLWIXD       *Print ROL.W and operands
00003570                          4818  
00003570  6100 FD16               4819  ROLLI_D   BSR BASIC_RSImmediate_D   *Decode ROL.L Immediate Value Operand
00003574                          4820  
00003574  6000 1FD4               4821            BRA   IFROLLIXD       *Print ROL.L and operands
00003578                          4822  
00003578                          4823  
00003578                          4824  *------------ ROR Variants --------------*
00003578  6100 FB5E               4825  RORAI_D   BSR BASIC_SOURCE_REG_D    *Decode ROR Indirect Address Register Operand
0000357C                          4826  
0000357C  6000 1FE4               4827            BRA   IFROREAXAI      *Print ROR and operand
00003580                          4828  
00003580  6100 FB56               4829  RORPI_D   BSR BASIC_SOURCE_REG_D    *Decode ROR Post Increment Address Register Operand
00003584                          4830  
00003584  6000 1FF4               4831            BRA   IFROREAXPO      *Print ROR and operand
00003588                          4832  
00003588  6100 FB4E               4833  RORPD_D   BSR BASIC_SOURCE_REG_D    *Decode ROR Pre Decrement Address Register Operand
0000358C                          4834  
0000358C  6000 1FE0               4835            BRA   IFROREAXPR      *Print ROR and operand
00003590                          4836  
00003590  6100 FB50               4837  RORWA_D   BSR BASIC_SOURCE_WA_D     *Decode ROR Word Address Operand
00003594                          4838  
00003594  6000 1FC0               4839            BRA   IFROREA         *Print ROR and operand
00003598                          4840  
00003598  6100 FB4E               4841  RORLA_D   BSR BASIC_SOURCE_LA_D     *Decode ROR Long Address Operand
0000359C                          4842  
0000359C  6000 1FB8               4843            BRA   IFROREA         *Print ROR and operand
000035A0                          4844  
000035A0  6100 FCD0               4845  RORBD_D   BSR BASIC_RSData_D        *Decode ROR.B Data Register Operand
000035A4                          4846  
000035A4  6000 1FE0               4847            BRA   IFRORBDXD       *Print ROR.B and operands
000035A8                          4848  
000035A8  6100 FCC8               4849  RORWD_D   BSR BASIC_RSData_D        *Decode ROR.W Data Register Operand
000035AC                          4850  
000035AC  6000 1FF0               4851            BRA   IFRORWDXD       *Print ROR.W and operands
000035B0                          4852            
000035B0  6100 FCC0               4853  RORLD_D   BSR BASIC_RSData_D        *Decode ROR.L Data Register Operand
000035B4                          4854  
000035B4  6000 2000               4855            BRA   IFRORLDXD       *Print ROR.L and operands
000035B8                          4856  
000035B8  6100 FCCE               4857  RORBI_D   BSR BASIC_RSImmediate_D   *Decode ROR.B Immediate Value Operand
000035BC                          4858  
000035BC  6000 1FD4               4859            BRA   IFRORBIXD       *Print ROR.B and operands
000035C0                          4860  
000035C0  6100 FCC6               4861  RORWI_D   BSR BASIC_RSImmediate_D   *Decode ROR.W Immediate Value Operand
000035C4                          4862  
000035C4  6000 1FE4               4863            BRA   IFRORWIXD       *Print ROR.W and operands
000035C8                          4864  
000035C8  6100 FCBE               4865  RORLI_D   BSR BASIC_RSImmediate_D   *Decode ROR.L Immediate Value Operand
000035CC                          4866  
000035CC  6000 1FF4               4867            BRA   IFRORLIXD       *Print ROR.L and operands
000035D0                          4868  
000035D0                          4869  
000035D0                          4870  
000035D0                          4871  
000035D0                          4872  
000035D0                          4873  *---------------- AND Variants-------------*
000035D0                          4874  
000035D0                          4875  *AND.B Variants
000035D0  6100 FCE6               4876  ANDBDD_D    BSR BASIC_DEST_DREG_D   *Decode AND.B Data Register to Data Register
000035D4                          4877  
000035D4  6100 FB02               4878              BSR BASIC_SOURCE_REG_D
000035D8                          4879  
000035D8                          4880  
000035D8  6000 19FA               4881              BRA IFANDBDXD       *Print AND.B and operands
000035DC                          4882  
000035DC                          4883  
000035DC  6100 FCDA               4884  ANDBAID_D   BSR BASIC_DEST_DREG_D   *Decode AND.B Indirect Address Register to Data Register
000035E0                          4885  
000035E0  6100 FAF6               4886              BSR BASIC_SOURCE_REG_D
000035E4                          4887  
000035E4                          4888  
000035E4  6000 19FA               4889              BRA IFANDBAIXD      *Print AND.B and operands
000035E8                          4890  
000035E8                          4891  
000035E8  6100 FCCE               4892  ANDBAPID_D  BSR BASIC_DEST_DREG_D   *Decode AND.B Post Increment Address Register to Data Register
000035EC                          4893  
000035EC  6100 FAEA               4894              BSR BASIC_SOURCE_REG_D
000035F0                          4895  
000035F0                          4896  
000035F0  6000 1A1E               4897              BRA IFANDBPOXD      *Print AND.B and operands
000035F4                          4898  
000035F4                          4899  
000035F4  6100 FCC2               4900  ANDBAPDD_D BSR BASIC_DEST_DREG_D    *Decode AND.B Pre Decrement Address Register to Data Register
000035F8                          4901  
000035F8  6100 FADE               4902              BSR BASIC_SOURCE_REG_D
000035FC                          4903  
000035FC                          4904  
000035FC  6000 1A06               4905              BRA IFANDBPRXD      *Print AND.B and operands
00003600                          4906  
00003600                          4907  
00003600  6100 FCAA               4908  ANDBDAI_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.B Data Register to Indirect Address Register
00003604                          4909  
00003604  6100 FAF4               4910              BSR BASIC_DEST_REG_D
00003608                          4911  
00003608  6000 1A12               4912              BRA IFANDBDXAI      *Print AND.B and operands
0000360C                          4913  
0000360C                          4914  
0000360C  6100 FC9E               4915  ANDBDAPI_D  BSR BASIC_SOURCE_DREG_D     *Decode AND.B Data Register to Post Increment Address Register
00003610                          4916  
00003610  6100 FAE8               4917              BSR BASIC_DEST_REG_D
00003614                          4918  
00003614  6000 1A2A               4919              BRA IFANDBDXPO      *Print AND.B and operands
00003618                          4920              
00003618                          4921  
00003618  6100 FC92               4922  ANDBDAPD_D  BSR BASIC_SOURCE_DREG_D     *Decode AND.B Data Register to Pre Decrement Address Register
0000361C                          4923  
0000361C  6100 FADC               4924              BSR BASIC_DEST_REG_D
00003620                          4925  
00003620  6000 1A12               4926              BRA IFANDBDXPR      *Print AND.B and operands
00003624                          4927  
00003624                          4928  
00003624  6100 FC92               4929  ANDBWAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.B Word Address to Data Register
00003628                          4930  
00003628  6100 FAB8               4931              BSR BASIC_SOURCE_WA_D
0000362C                          4932  
0000362C                          4933  
0000362C  6000 19CA               4934              BRA IFANDBAAXD      *Print AND.B and operands
00003630                          4935              
00003630                          4936  
00003630  6100 FC86               4937  ANDBLAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.B Long Address to Data Register
00003634                          4938  
00003634  6100 FAB2               4939              BSR BASIC_SOURCE_LA_D
00003638                          4940  
00003638  6000 19BE               4941              BRA IFANDBAAXD      *Print AND.B and operands
0000363C                          4942              
0000363C                          4943  
0000363C  6100 FC6E               4944  ANDBDWA_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.B Data Register to Word Address
00003640                          4945  
00003640  6100 FAC2               4946              BSR BASIC_DEST_WA_D
00003644                          4947  
00003644  6000 19E2               4948              BRA IFANDBDXAA      *Print AND.B and operands
00003648                          4949  
00003648  6100 FC62               4950  ANDBDLA_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.B Data Register to Long Address
0000364C                          4951  
0000364C  6100 FABC               4952              BSR BASIC_DEST_LA_D
00003650                          4953  
00003650  6000 19D6               4954              BRA IFANDBDXAA      *Print AND.B and operands
00003654                          4955  
00003654  6100 FC62               4956  ANDBDAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.B Immediate Value to Data Register
00003658                          4957  
00003658  6100 FA94               4958              BSR BASIC_IMMEDATA_BW_D
0000365C                          4959  
0000365C  6000 198E               4960              BRA IFANDBIXD       *Print AND.B and operands
00003660                          4961  
00003660                          4962  *AND.W Variants
00003660  6100 FC56               4963  ANDWDD_D    BSR BASIC_DEST_DREG_D       *Decode AND.W Data Register to Data Register
00003664                          4964  
00003664  6100 FA72               4965              BSR BASIC_SOURCE_REG_D
00003668                          4966  
00003668                          4967  
00003668  6000 19E2               4968              BRA IFANDWDXD       *Print AND.W and operands
0000366C                          4969  
0000366C                          4970  
0000366C  6100 FC4A               4971  ANDWAID_D   BSR BASIC_DEST_DREG_D       *Decode AND.W Indirect Address Register to Data Register
00003670                          4972  
00003670  6100 FA66               4973              BSR BASIC_SOURCE_REG_D
00003674                          4974  
00003674                          4975  
00003674  6000 19E2               4976              BRA IFANDWAIXD      *Print AND.W and operands
00003678                          4977  
00003678                          4978  
00003678  6100 FC3E               4979  ANDWAPID_D  BSR BASIC_DEST_DREG_D       *Decode AND.W Post Increment Address Register to Data Register
0000367C                          4980  
0000367C  6100 FA5A               4981              BSR BASIC_SOURCE_REG_D
00003680                          4982  
00003680                          4983  
00003680  6000 1A06               4984              BRA IFANDWPOXD      *Print AND.W and operands
00003684                          4985  
00003684                          4986  
00003684  6100 FC32               4987  ANDWAPDD_D  BSR BASIC_DEST_DREG_D       *Decode AND.W Pre Decrement Address Register to Data Register
00003688                          4988  
00003688  6100 FA4E               4989              BSR BASIC_SOURCE_REG_D
0000368C                          4990  
0000368C                          4991  
0000368C  6000 19EE               4992              BRA IFANDWPRXD      *Print AND.W and operands
00003690                          4993  
00003690                          4994  
00003690  6100 FC1A               4995  ANDWDAI_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.W Data Register to Indirect Address Register
00003694                          4996  
00003694  6100 FA64               4997              BSR BASIC_DEST_REG_D
00003698                          4998  
00003698  6000 19FA               4999              BRA IFANDWDXAI      *Print AND.W and operands
0000369C                          5000  
0000369C  6100 FC0E               5001  ANDWDAPI_D  BSR BASIC_SOURCE_DREG_D     *Decode AND.W Data Register to Post Increment Address Register
000036A0                          5002  
000036A0  6100 FA58               5003              BSR BASIC_DEST_REG_D
000036A4                          5004  
000036A4  6000 19E2               5005              BRA IFANDWPOXD       *Print AND.W and operands
000036A8                          5006  
000036A8  6100 FC02               5007  ANDWDAPD_D  BSR BASIC_SOURCE_DREG_D     *Decode AND.W Data Register to Pre Decrement Address Register
000036AC                          5008  
000036AC  6100 FA4C               5009              BSR BASIC_DEST_REG_D
000036B0                          5010  
000036B0  6000 19CA               5011              BRA IFANDWPRXD      *Print AND.W and operands
000036B4                          5012  
000036B4  6100 FC02               5013  ANDWWAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.W Word Address to Data Register
000036B8                          5014  
000036B8  6100 FA28               5015              BSR BASIC_SOURCE_WA_D
000036BC                          5016  
000036BC  6000 19B2               5017              BRA IFANDWAAXD      *Print AND.W and operands
000036C0                          5018  
000036C0  6100 FBF6               5019  ANDWLAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.W Long Address to Data Register
000036C4                          5020  
000036C4  6100 FA22               5021              BSR BASIC_SOURCE_LA_D
000036C8                          5022  
000036C8  6000 19A6               5023              BRA IFANDWAAXD      *Print AND.W and operands
000036CC                          5024  
000036CC  6100 FBDE               5025  ANDWDWA_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.W Data Register to Word Address
000036D0                          5026  
000036D0  6100 FA32               5027              BSR BASIC_DEST_WA_D
000036D4                          5028  
000036D4  6000 19CA               5029              BRA IFANDWDXAA      *Print AND.W and operands
000036D8                          5030  
000036D8  6100 FBD2               5031  ANDWDLA_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.W Data Register to Long Address
000036DC                          5032  
000036DC  6100 FA2C               5033              BSR BASIC_DEST_LA_D
000036E0                          5034  
000036E0  6000 19BE               5035              BRA IFANDWDXAA      *Print AND.W and operands
000036E4                          5036  
000036E4  6100 FBD2               5037  ANDWDAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.W Immediate Value to Data Register
000036E8                          5038  
000036E8  6100 FA04               5039              BSR BASIC_IMMEDATA_BW_D
000036EC                          5040  
000036EC  6000 1976               5041              BRA IFANDWIXD       *Print AND.W and operands
000036F0                          5042  
000036F0                          5043  
000036F0                          5044  *AND.L Variants
000036F0  6100 FBC6               5045  ANDLDD_D    BSR BASIC_DEST_DREG_D       *Decode AND.L Data Register to Data Register
000036F4                          5046  
000036F4  6100 F9E2               5047              BSR BASIC_SOURCE_REG_D
000036F8                          5048  
000036F8                          5049  
000036F8  6000 19CA               5050              BRA IFANDLDXD       *Print AND.L and operands
000036FC                          5051  
000036FC                          5052  
000036FC  6100 FBBA               5053  ANDLAID_D   BSR BASIC_DEST_DREG_D       *Decode AND.L Indirect Address Register to Data Register
00003700                          5054  
00003700  6100 F9D6               5055              BSR BASIC_SOURCE_REG_D
00003704                          5056  
00003704                          5057  
00003704  6000 19CA               5058              BRA IFANDLAIXD      *Print AND.L and operands
00003708                          5059  
00003708                          5060  
00003708  6100 FBAE               5061  ANDLAPID_D  BSR BASIC_DEST_DREG_D       *Decode AND.L Post Increment Address Register to Data Register
0000370C                          5062  
0000370C  6100 F9CA               5063              BSR BASIC_SOURCE_REG_D
00003710                          5064  
00003710                          5065  
00003710  6000 19EE               5066              BRA IFANDLPOXD      *Print AND.L and operands
00003714                          5067  
00003714                          5068  
00003714  6100 FBA2               5069  ANDLAPDD_D  BSR BASIC_DEST_DREG_D       *Decode AND.L Pre Decrement Address Register to Data Register
00003718                          5070  
00003718  6100 F9BE               5071              BSR BASIC_SOURCE_REG_D
0000371C                          5072  
0000371C                          5073  
0000371C  6000 19D6               5074              BRA IFANDLPRXD      *Print AND.L and operands
00003720                          5075  
00003720                          5076  
00003720  6100 FB8A               5077  ANDLDAI_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.L Data Register to Indirect Address Register
00003724                          5078  
00003724  6100 F9D4               5079              BSR BASIC_DEST_REG_D
00003728                          5080  
00003728  6000 19E2               5081              BRA IFANDLDXAI      *Print AND.L and operands
0000372C                          5082  
0000372C  6100 FB7E               5083  ANDLDAPI_D  BSR BASIC_SOURCE_DREG_D     *Decode AND.L Data Register to Post Increment Address Register
00003730                          5084  
00003730  6100 F9C8               5085              BSR BASIC_DEST_REG_D
00003734                          5086  
00003734  6000 19FA               5087              BRA IFANDLDXPO      *Print AND.L and operands
00003738                          5088  
00003738  6100 FB72               5089  ANDLDAPD_D  BSR BASIC_SOURCE_DREG_D     *Decode AND.L Data Register to Pre Decrement Register
0000373C                          5090  
0000373C  6100 F9BC               5091              BSR BASIC_DEST_REG_D
00003740                          5092  
00003740  6000 19E2               5093              BRA IFANDLDXPR      *Print AND.L and operands
00003744                          5094  
00003744  6100 FB72               5095  ANDLWAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.L Word Address to Data Register
00003748                          5096  
00003748  6100 F998               5097              BSR BASIC_SOURCE_WA_D
0000374C                          5098  
0000374C  6000 199A               5099              BRA IFANDLAAXD      *Print AND.L and operands
00003750                          5100  
00003750  6100 FB66               5101  ANDLLAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.L Long Address to Data Register
00003754                          5102  
00003754  6100 F992               5103              BSR BASIC_SOURCE_LA_D
00003758                          5104  
00003758  6000 198E               5105              BRA IFANDLAAXD      *Print AND.L and operands
0000375C                          5106  
0000375C  6100 FB4E               5107  ANDLDWA_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.L Data Register to Word Address
00003760                          5108  
00003760  6100 F9A2               5109              BSR BASIC_DEST_WA_D
00003764                          5110  
00003764  6000 19B2               5111              BRA IFANDLDXAA      *Print AND.L and operands
00003768                          5112  
00003768                          5113  
00003768  6100 FB42               5114  ANDLDLA_D   BSR BASIC_SOURCE_DREG_D     *Decode AND.L Data Register to Long Address
0000376C                          5115  
0000376C  6100 F99C               5116              BSR BASIC_DEST_LA_D
00003770                          5117  
00003770  6000 19A6               5118              BRA IFANDLDXAA      *Print AND.L and operands
00003774                          5119  
00003774  6100 FB42               5120  ANDLDAD_D   BSR BASIC_DEST_DREG_D       *Decode AND.L Immediate Value to Data Register
00003778                          5121  
00003778  6100 F97A               5122              BSR BASIC_IMMEDATA_L_D
0000377C                          5123  
0000377C  6000 195E               5124              BRA IFANDLIXD       *Print AND.L and operands
00003780                          5125  
00003780                          5126  *---------------- OR Variants-------------*
00003780                          5127  
00003780                          5128  *OR.B Variants
00003780  6100 FB36               5129  ORBDD_D    BSR BASIC_DEST_DREG_D        *Decode OR.B Data Register to Data Register
00003784                          5130  
00003784  6100 F952               5131              BSR BASIC_SOURCE_REG_D
00003788                          5132  
00003788                          5133  
00003788  6000 19B2               5134              BRA IFORBDXD        *Print OR.B and operands
0000378C                          5135  
0000378C                          5136  
0000378C  6100 FB2A               5137  ORBAID_D   BSR BASIC_DEST_DREG_D        *Decode OR.B Indirect Address Register to Data Register
00003790                          5138  
00003790  6100 F946               5139              BSR BASIC_SOURCE_REG_D
00003794                          5140  
00003794                          5141  
00003794  6000 19B2               5142              BRA IFORBAIXD       *Print OR.B and operands
00003798                          5143  
00003798                          5144  
00003798  6100 FB1E               5145  ORBAPD_D  BSR BASIC_DEST_DREG_D     *Decode OR.B Post Increment Address Register to Data Register
0000379C                          5146  
0000379C  6100 F93A               5147              BSR BASIC_SOURCE_REG_D
000037A0                          5148  
000037A0                          5149  
000037A0  6000 19D6               5150              BRA IFORBPOXD       *Print OR.B and operands
000037A4                          5151  
000037A4                          5152  
000037A4  6100 FB12               5153  ORBADD_D BSR BASIC_DEST_DREG_D      *Decode OR.B Pre Decrement Address Register to Data Register
000037A8                          5154  
000037A8  6100 F92E               5155              BSR BASIC_SOURCE_REG_D
000037AC                          5156  
000037AC                          5157  
000037AC  6000 19BE               5158              BRA IFORBPRXD       *Print OR.B and operands
000037B0                          5159  
000037B0                          5160  
000037B0  6100 FAFA               5161  ORBDAI_D   BSR BASIC_SOURCE_DREG_D      *Decode OR.B Data Register to Indirect Address Register
000037B4                          5162  
000037B4  6100 F944               5163              BSR BASIC_DEST_REG_D
000037B8                          5164  
000037B8  6000 19CA               5165              BRA IFORBDXAI       *Print OR.B and operands
000037BC                          5166  
000037BC                          5167  
000037BC  6100 FAEE               5168  ORBDAP_D  BSR BASIC_SOURCE_DREG_D       *Decode OR.B Data Register to Post Decrement Address Register
000037C0                          5169  
000037C0  6100 F938               5170              BSR BASIC_DEST_REG_D
000037C4                          5171  
000037C4  6000 19E2               5172              BRA IFORBDXPO       *Print OR.B and operands
000037C8                          5173  
000037C8  6100 FAE2               5174  ORBDAD_D  BSR BASIC_SOURCE_DREG_D       *Decode OR.B Data Register to Pre Decrement Address Register
000037CC                          5175  
000037CC  6100 F92C               5176              BSR BASIC_DEST_REG_D
000037D0                          5177  
000037D0  6000 19CA               5178              BRA IFORBDXPR       *Print OR.B and operands
000037D4                          5179  
000037D4                          5180  
000037D4  6100 FAE2               5181  ORBWAD_D   BSR BASIC_DEST_DREG_D        *Decode OR.B Word Address to Data Register
000037D8                          5182  
000037D8  6100 F908               5183              BSR BASIC_SOURCE_WA_D
000037DC                          5184  
000037DC                          5185  
000037DC  6000 1982               5186              BRA IFORBAAXD       *Print OR.B and operands
000037E0                          5187  
000037E0  6100 FAD6               5188  ORBLAD_D   BSR BASIC_DEST_DREG_D        *Decode OR.B Long Address to Data Register
000037E4                          5189  
000037E4  6100 F902               5190              BSR BASIC_SOURCE_LA_D
000037E8                          5191  
000037E8  6000 1976               5192              BRA IFORBAAXD       *Print OR.B and operands
000037EC                          5193  
000037EC  6100 FABE               5194  ORBDWA_D   BSR BASIC_SOURCE_DREG_D      *Decode OR.B Data Register to Word Address
000037F0                          5195  
000037F0  6100 F912               5196              BSR BASIC_DEST_WA_D
000037F4                          5197  
000037F4  6000 199A               5198              BRA IFORBDXAA       *Print OR.B and operands
000037F8                          5199  
000037F8  6100 FAB2               5200  ORBDLA_D   BSR BASIC_SOURCE_DREG_D      *Decode OR.B Data Register to Long Address
000037FC                          5201  
000037FC  6100 F90C               5202              BSR BASIC_DEST_LA_D
00003800                          5203  
00003800  6000 198E               5204              BRA IFORBDXAA       *Print OR.B and operands
00003804                          5205  
00003804  6100 FAB2               5206  ORBDID_D   BSR BASIC_DEST_DREG_D        *Decode OR.B Immediate Value to Data Register
00003808                          5207  
00003808  6100 F8E4               5208              BSR BASIC_IMMEDATA_BW_D
0000380C                          5209  
0000380C  6000 1946               5210              BRA IFORBIXD        *Print OR.B and operands
00003810                          5211  
00003810                          5212  *OR.W Variants
00003810  6100 FAA6               5213  ORWDD_D    BSR BASIC_DEST_DREG_D        *Decode OR.W Data Register to Data Register
00003814                          5214  
00003814  6100 F8C2               5215              BSR BASIC_SOURCE_REG_D
00003818                          5216  
00003818                          5217  
00003818  6000 199A               5218              BRA IFORWDXD        *Print OR.W and operands
0000381C                          5219  
0000381C                          5220  
0000381C  6100 FA9A               5221  ORWAID_D   BSR BASIC_DEST_DREG_D        *Decode OR.W Indirect Address Register to Data Register
00003820                          5222  
00003820  6100 F8B6               5223              BSR BASIC_SOURCE_REG_D
00003824                          5224  
00003824                          5225  
00003824  6000 199A               5226              BRA IFORWAIXD       *Print OR.W and operands
00003828                          5227  
00003828                          5228  
00003828  6100 FA8E               5229  ORWAPD_D  BSR BASIC_DEST_DREG_D     *Decode OR.W Post Increment Address Register to Data Register
0000382C                          5230  
0000382C  6100 F8AA               5231              BSR BASIC_SOURCE_REG_D
00003830                          5232  
00003830                          5233  
00003830  6000 19BE               5234              BRA IFORWPOXD       *Print OR.W and operands
00003834                          5235  
00003834                          5236  
00003834  6100 FA82               5237  ORWADD_D BSR BASIC_DEST_DREG_D      *Decode OR.W Pre Decrement Address Register to Data Register
00003838                          5238  
00003838  6100 F89E               5239              BSR BASIC_SOURCE_REG_D
0000383C                          5240  
0000383C                          5241  
0000383C  6000 19A6               5242              BRA IFORWPRXD       *Print OR.W and operands
00003840                          5243  
00003840                          5244  
00003840  6100 FA6A               5245  ORWDAI_D   BSR BASIC_SOURCE_DREG_D  *Decode OR.W Data Register to Indirect Address Register
00003844                          5246  
00003844  6100 F8B4               5247              BSR BASIC_DEST_REG_D
00003848                          5248  
00003848  6000 19B2               5249              BRA IFORWDXAI       *Print OR.W and operands
0000384C                          5250  
0000384C                          5251  
0000384C  6100 FA5E               5252  ORWDAP_D  BSR BASIC_SOURCE_DREG_D   *Decode OR.W Data Register to Post Increment Address Register
00003850                          5253  
00003850  6100 F8A8               5254              BSR BASIC_DEST_REG_D
00003854                          5255  
00003854  6000 19CA               5256              BRA IFORWDXPO       *Print OR.W and operands
00003858                          5257  
00003858  6100 FA52               5258  ORWDAD_D  BSR BASIC_SOURCE_DREG_D   *Decode OR.W Data Register to Pre Decrement Address Register
0000385C                          5259  
0000385C  6100 F89C               5260              BSR BASIC_DEST_REG_D
00003860                          5261  
00003860  6000 19B2               5262              BRA IFORWDXPR       *Print OR.W and operands
00003864                          5263  
00003864                          5264  
00003864  6100 FA52               5265  ORWWAD_D   BSR BASIC_DEST_DREG_D    *Decode OR.W Word Address to Data Register
00003868                          5266  
00003868  6100 F878               5267              BSR BASIC_SOURCE_WA_D
0000386C                          5268  
0000386C  6000 196A               5269              BRA IFORWAAXD       *Print OR.W and operands
00003870                          5270  
00003870  6100 FA46               5271  ORWLAD_D   BSR BASIC_DEST_DREG_D    *Decode OR.W Long Address to Data Register
00003874                          5272  
00003874  6100 F872               5273              BSR BASIC_SOURCE_LA_D
00003878                          5274  
00003878  6000 195E               5275              BRA IFORWAAXD       *Print OR.W and operands
0000387C                          5276  
0000387C  6100 FA2E               5277  ORWDWA_D   BSR BASIC_SOURCE_DREG_D  *Decode OR.W Data Register to Word Address
00003880                          5278  
00003880  6100 F882               5279              BSR BASIC_DEST_WA_D
00003884                          5280  
00003884  6000 1982               5281              BRA IFORWDXAA       *Print OR.W and operands
00003888                          5282  
00003888  6100 FA22               5283  ORWDLA_D   BSR BASIC_SOURCE_DREG_D  *Decode OR.W Data Register to Long Address
0000388C                          5284  
0000388C  6100 F87C               5285              BSR BASIC_DEST_LA_D
00003890                          5286  
00003890  6000 1976               5287              BRA IFORWDXAA       *Print OR.W and operands
00003894                          5288  
00003894  6100 FA22               5289  ORWDID_D   BSR BASIC_DEST_DREG_D    *Decode OR.W Immediate Value to Data Register
00003898                          5290  
00003898  6100 F854               5291              BSR BASIC_IMMEDATA_BW_D
0000389C                          5292  
0000389C  6000 192E               5293              BRA IFORWIXD        *Print OR.W and operands
000038A0                          5294  
000038A0                          5295  
000038A0                          5296  *OR.L Variants
000038A0  6100 FA16               5297  ORLDD_D    BSR BASIC_DEST_DREG_D    *Decode OR.L Data Register to Data Register
000038A4                          5298  
000038A4  6100 F832               5299              BSR BASIC_SOURCE_REG_D
000038A8                          5300  
000038A8                          5301  
000038A8  6000 1982               5302              BRA IFORLDXD        *Print OR.L and operands
000038AC                          5303  
000038AC                          5304  
000038AC  6100 FA0A               5305  ORLAID_D   BSR BASIC_DEST_DREG_D    *Decode OR.L Indirect Address Register to Data Register
000038B0                          5306  
000038B0  6100 F826               5307              BSR BASIC_SOURCE_REG_D
000038B4                          5308  
000038B4                          5309  
000038B4  6000 1982               5310              BRA IFORLAIXD       *Print OR.L and operands
000038B8                          5311  
000038B8                          5312  
000038B8  6100 F9FE               5313  ORLAPD_D  BSR BASIC_DEST_DREG_D     *Decode OR.L Post Increment Address Register to Data Register
000038BC                          5314  
000038BC  6100 F81A               5315              BSR BASIC_SOURCE_REG_D
000038C0                          5316  
000038C0                          5317  
000038C0  6000 19A6               5318              BRA IFORLPOXD       *Print OR.L and operands
000038C4                          5319  
000038C4                          5320  
000038C4  6100 F9F2               5321  ORLADD_D BSR BASIC_DEST_DREG_D      *Decode OR.L Pre Decrement Address Register to Data Register
000038C8                          5322  
000038C8  6100 F80E               5323              BSR BASIC_SOURCE_REG_D
000038CC                          5324  
000038CC                          5325  
000038CC  6000 198E               5326              BRA IFORLPRXD       *Print OR.L and operands
000038D0                          5327  
000038D0                          5328  
000038D0  6100 F9DA               5329  ORLDAI_D   BSR BASIC_SOURCE_DREG_D  *Decode OR.L Data Register to Indirect Address Register
000038D4                          5330  
000038D4  6100 F824               5331              BSR BASIC_DEST_REG_D
000038D8                          5332  
000038D8  6000 199A               5333              BRA IFORLDXAI       *Print OR.L and operands
000038DC                          5334  
000038DC                          5335  
000038DC  6100 F9CE               5336  ORLDAP_D  BSR BASIC_SOURCE_DREG_D   *Decode OR.L Data Register to Post Decrement Address Register
000038E0                          5337  
000038E0  6100 F818               5338              BSR BASIC_DEST_REG_D
000038E4                          5339  
000038E4  6000 19B2               5340              BRA IFORLDXPO       *Print OR.L and operands
000038E8                          5341  
000038E8  6100 F9C2               5342  ORLDAD_D  BSR BASIC_SOURCE_DREG_D   *Decode OR.L Data Register to Pre Decrement Address Register
000038EC                          5343  
000038EC  6100 F80C               5344              BSR BASIC_DEST_REG_D
000038F0                          5345  
000038F0  6000 199A               5346              BRA IFORLDXPR       *Print OR.L and operands
000038F4                          5347  
000038F4                          5348  
000038F4  6100 F9C2               5349  ORLWAD_D   BSR BASIC_DEST_DREG_D    *Decode OR.L Word Address to Data Register
000038F8                          5350  
000038F8  6100 F7E8               5351              BSR BASIC_SOURCE_WA_D
000038FC                          5352  
000038FC  6000 1952               5353              BRA IFORLAAXD       *Print OR.L and operands
00003900                          5354  
00003900  6100 F9B6               5355  ORLLAD_D   BSR BASIC_DEST_DREG_D    *Decode OR.L Long Address to Data Register
00003904                          5356  
00003904  6100 F7E2               5357              BSR BASIC_SOURCE_LA_D
00003908                          5358  
00003908  6000 1946               5359              BRA IFORLAAXD       *Print OR.L and operands
0000390C                          5360  
0000390C  6100 F99E               5361  ORLDWA_D   BSR BASIC_SOURCE_DREG_D  *Decode OR.L Data Register to Word Address
00003910                          5362  
00003910  6100 F7F2               5363              BSR BASIC_DEST_WA_D
00003914                          5364  
00003914  6000 196A               5365              BRA IFORLDXAA       *Print OR.L and operands
00003918                          5366  
00003918                          5367  
00003918  6100 F992               5368  ORLDLA_D   BSR BASIC_SOURCE_DREG_D  *Decode OR.L Data Register to Long Address
0000391C                          5369  
0000391C  6100 F7EC               5370              BSR BASIC_DEST_LA_D
00003920                          5371  
00003920  6000 195E               5372              BRA IFORLDXAA       *Print OR.L and operands
00003924                          5373  
00003924  6100 F992               5374  ORLDID_D   BSR BASIC_DEST_DREG_D    *Decode OR.L Immediate Value to Data Register
00003928                          5375  
00003928  6100 F7CA               5376              BSR BASIC_IMMEDATA_L_D
0000392C                          5377  
0000392C  6000 1916               5378              BRA IFORLIXD        *Print OR.L and operands
00003930                          5379  
00003930                          5380  
00003930                          5381  
00003930                          5382  
00003930                          5383  *---------------- NOP and RTS--------------*
00003930  544E                    5384  NOP_D   ADDQ.W  #2, A6      *No operands, move to next instruction
00003932                          5385  
00003932  6000 108E               5386          BRA IFNOP       *Print NOP
00003936                          5387  
00003936  544E                    5388  RTS_D   ADDQ.W  #2, A6      *No operands, move to next instruction
00003938                          5389  
00003938  6000 1982               5390          BRA IFRTS       *Print RTS
0000393C                          5391  
0000393C                          5392  *---------------- DATA --------------------------*
0000393C  3C1E                    5393  DATA_D  MOVE.W  (A6)+, D6   *Move data value to D6, set A6 to next instruction
0000393E                          5394  
0000393E                          5395  
0000393E  6000 1C8E               5396          BRA IFBADDATA       *Print the data value
00003942                          5397  
00003942                          5398  
00003942                          5399              
00003942                          5400   
00003942                          5401  
00003942                          5402  
00003942                          5403  
00003942                          5404  
00003942                          5405  *Dn To Dn: $1000
00003942                          5406  MOVEBDD_D:
00003942  6100 F8A6               5407   BSR BASIC_DECODER
00003946  6000 0B8E               5408   BRA IFMOVEBDXD 
0000394A                          5409  
0000394A                          5410  MOVEWDD_D:
0000394A  6100 F89E               5411   BSR BASIC_DECODER
0000394E  6000 0D2A               5412   BRA IFMOVEWDXD 
00003952                          5413   
00003952                          5414  MOVELDD_D:
00003952  6100 F896               5415   BSR BASIC_DECODER
00003956  6000 0EC6               5416   BRA IFMOVELDXD 
0000395A                          5417  *An to Dn: #1008
0000395A                          5418  MOVEBAD_D:
0000395A  6100 F88E               5419   BSR BASIC_DECODER
0000395E  6000 0B82               5420   BRA IFMOVEBAXD
00003962                          5421  MOVEWAD_D:
00003962  6100 F886               5422   BSR BASIC_DECODER
00003966  6000 0B7A               5423   BRA IFMOVEBAXD
0000396A                          5424  MOVELAD_D:
0000396A  6100 F87E               5425   BSR BASIC_DECODER
0000396E  6000 0EBA               5426   BRA IFMOVELAXD
00003972                          5427   
00003972                          5428  *(An) to Dn
00003972                          5429  MOVEBAID_D:
00003972  6100 F876               5430   BSR BASIC_DECODER
00003976  6000 0B76               5431   BRA IFMOVEBAIXD
0000397A                          5432  
0000397A                          5433  MOVEWAID_D:
0000397A  6100 F86E               5434   BSR BASIC_DECODER
0000397E  6000 0D12               5435   BRA IFMOVEWAIXD
00003982                          5436  
00003982                          5437  MOVELAID_D:
00003982  6100 F866               5438   BSR BASIC_DECODER
00003986  6000 0EAE               5439   BRA IFMOVELAIXD
0000398A                          5440  
0000398A                          5441  *(An)+ to Dn: $1018
0000398A                          5442  MOVEBAPID_D:
0000398A  6100 F85E               5443   BSR BASIC_DECODER 
0000398E  6000 0B8E               5444   BRA IFMOVEBPOXD
00003992                          5445  
00003992                          5446  MOVEWAPID_D:
00003992  6100 F856               5447   BSR BASIC_DECODER
00003996  6000 0D2A               5448   BRA IFMOVEWPOXD
0000399A                          5449  
0000399A                          5450  MOVELAPID_D:
0000399A  6100 F84E               5451   BSR BASIC_DECODER
0000399E  6000 0EC6               5452   BRA IFMOVELPOXD
000039A2                          5453  
000039A2                          5454  *-(An) to Dn: #1020
000039A2                          5455  MOVEBADD_D:
000039A2  6100 F846               5456   BSR BASIC_DECODER
000039A6  6000 0B6A               5457   BRA IFMOVEBPRXD
000039AA                          5458  
000039AA                          5459  
000039AA                          5460  MOVEWADD_D:
000039AA  6100 F83E               5461   BSR BASIC_DECODER
000039AE  6000 0D06               5462    BRA IFMOVEWPRXD
000039B2                          5463  
000039B2                          5464  MOVELADD_D:
000039B2  6100 F836               5465   BSR BASIC_DECODER
000039B6  6000 0EA2               5466   BRA IFMOVELPRXD
000039BA                          5467  
000039BA                          5468  *(xxx).W to Dn:
000039BA                          5469  MOVEBWRDD_D:
000039BA                          5470  
000039BA  6100 F772               5471   BSR ADVANCED_DECODER
000039BE  584E                    5472   ADDQ #4, A6
000039C0  6000 0B44               5473   BRA IFMOVEBAAXD
000039C4                          5474  
000039C4                          5475  MOVEWWRDD_D:
000039C4  6100 F768               5476   BSR ADVANCED_DECODER
000039C8  584E                    5477    ADDQ #4, A6
000039CA  6000 0CDE               5478    BRA IFMOVEWAAXD
000039CE                          5479  
000039CE                          5480  MOVELWRDD_D:
000039CE  6100 F75E               5481   BSR ADVANCED_DECODER
000039D2  584E                    5482    ADDQ #4, A6
000039D4  6000 0E78               5483    BRA IFMOVELAAXD
000039D8                          5484  
000039D8                          5485  *(xxx).L to Dn:
000039D8                          5486  MOVEBLNGD_D:
000039D8  6100 F784               5487   BSR ADVANCED_DECODER_L
000039DC  5C4E                    5488   ADDQ #6, A6
000039DE  6000 0B26               5489   BRA IFMOVEBAAXD
000039E2                          5490  
000039E2                          5491  MOVEWLNGD_D:
000039E2  6100 F77A               5492   BSR ADVANCED_DECODER_L
000039E6  5C4E                    5493   ADDQ #6, A6
000039E8  6000 0CC0               5494   BRA IFMOVEWAAXD
000039EC                          5495  
000039EC                          5496  MOVELLNGD_D:
000039EC  6100 F770               5497   BSR ADVANCED_DECODER_L
000039F0  5C4E                    5498   ADDQ #6, A6
000039F2  6000 0E5A               5499   BRA IFMOVELAAXD
000039F6                          5500  
000039F6                          5501  *#<data> to Dn:
000039F6                          5502  MOVEBIMD_D:
000039F6  6100 F736               5503   BSR ADVANCED_DECODER 
000039FA  7A02                    5504    MOVE.L #2, D5
000039FC  6100 F72C               5505   BSR CALC_ADDR_OFFSET
00003A00  6000 0AF8               5506   BRA IFMOVEBIXD
00003A04                          5507  
00003A04                          5508  MOVEWIMD_D:
00003A04  6100 F728               5509   BSR ADVANCED_DECODER 
00003A08  7A02                    5510    MOVE.L #2, D5
00003A0A  6100 F71E               5511   BSR CALC_ADDR_OFFSET
00003A0E  6000 0C8E               5512   BRA IFMOVEWIXD
00003A12                          5513  
00003A12                          5514  
00003A12                          5515  MOVELIMD_D:
00003A12  6100 F71A               5516   BSR ADVANCED_DECODER
00003A16  7A04                    5517   MOVE.L #4, D5
00003A18  6100 F710               5518   BSR CALC_ADDR_OFFSET
00003A1C  6000 0E24               5519   BRA IFMOVELIXD
00003A20                          5520  
00003A20                          5521  *Dn To (An): $1080
00003A20                          5522  MOVEBDAI_D:
00003A20  6100 F7C8               5523   BSR BASIC_DECODER
00003A24  6000 0B04               5524   BRA IFMOVEBDXAI
00003A28                          5525  
00003A28                          5526  
00003A28                          5527  
00003A28                          5528  MOVEWDAI_D:
00003A28  6100 F7C0               5529   BSR BASIC_DECODER
00003A2C  6000 0CA0               5530   BRA IFMOVEWDXAI
00003A30                          5531  
00003A30                          5532  
00003A30                          5533  MOVELDAI_D:
00003A30  6100 F7B8               5534   BSR BASIC_DECODER
00003A34  6000 0E3C               5535   BRA IFMOVELDXAI
00003A38                          5536  
00003A38                          5537  *An to (An):
00003A38                          5538  MOVEBAAI_D:
00003A38  6100 F7B0               5539   BSR BASIC_DECODER
00003A3C  6000 0AF8               5540   BRA IFMOVEBAXAI
00003A40                          5541  MOVEWAAI_D:
00003A40  6100 F7A8               5542   BSR BASIC_DECODER
00003A44  6000 0C94               5543   BRA IFMOVEWAXAI
00003A48                          5544  MOVELAAI_D:
00003A48  6100 F7A0               5545   BSR BASIC_DECODER
00003A4C  6000 0E30               5546   BRA IFMOVELAXAI
00003A50                          5547  *(An) to (An):
00003A50                          5548  MOVEBAI_D:
00003A50  6100 F798               5549   BSR BASIC_DECODER
00003A54  6000 0AEC               5550   BRA IFMOVEBAIXAI
00003A58                          5551  MOVEWAI_D:
00003A58  6100 F790               5552   BSR BASIC_DECODER
00003A5C  6000 0C88               5553   BRA IFMOVEWAIXAI
00003A60                          5554  MOVELAI_D:
00003A60  6100 F788               5555   BSR BASIC_DECODER
00003A64  6000 0E24               5556   BRA IFMOVELAIXAI
00003A68                          5557  *(An)+ to (An):
00003A68                          5558  MOVEBAPAI_D:
00003A68  6100 F780               5559   BSR BASIC_DECODER
00003A6C  6000 0B04               5560   BRA IFMOVEBPOXAI
00003A70                          5561  MOVEWAPAI_D:
00003A70  6100 F778               5562   BSR BASIC_DECODER
00003A74  6000 0CA0               5563   BRA IFMOVEWPOXAI
00003A78                          5564  MOVELAPAI_D:
00003A78  6100 F770               5565   BSR BASIC_DECODER
00003A7C  6000 0E3C               5566   BRA IFMOVELPOXAI
00003A80                          5567  *-(An) to (An):
00003A80                          5568  MOVEBADAI_D:
00003A80  6100 F768               5569   BSR BASIC_DECODER
00003A84  6000 0AE0               5570   BRA IFMOVEBPRXAI
00003A88                          5571   
00003A88                          5572  MOVEWADAI_D:
00003A88  6100 F760               5573   BSR BASIC_DECODER
00003A8C  6000 0C7C               5574   BRA IFMOVEWPRXAI
00003A90                          5575  MOVELADAI_D:
00003A90  6100 F758               5576   BSR BASIC_DECODER
00003A94  6000 0E18               5577   BRA IFMOVELPRXAI
00003A98                          5578  
00003A98                          5579  *(xxx).W to (An):
00003A98                          5580  MOVEBWAI_D:
00003A98  6100 F694               5581   BSR ADVANCED_DECODER
00003A9C  584E                    5582   ADDQ #4, A6
00003A9E  6000 0ABA               5583   BRA IFMOVEBAAXAI
00003AA2                          5584  
00003AA2                          5585  MOVEWWAI_D:
00003AA2  6100 F68A               5586   BSR ADVANCED_DECODER
00003AA6  584E                    5587   ADDQ #4, A6
00003AA8  6000 0C54               5588   BRA IFMOVEWAAXAI  
00003AAC                          5589  MOVELWAI_D:
00003AAC  6100 F680               5590   BSR ADVANCED_DECODER
00003AB0  5C4E                    5591   ADDQ #6, A6
00003AB2  6000 0DEE               5592   BRA IFMOVELAAXAI
00003AB6                          5593  
00003AB6                          5594  *(xxx).L to (An):
00003AB6                          5595  MOVEBLAI_D:
00003AB6  6100 F6A6               5596   BSR ADVANCED_DECODER_L
00003ABA  5C4E                    5597   ADDQ #6, A6
00003ABC  6000 0A9C               5598   BRA IFMOVEBAAXAI
00003AC0                          5599  MOVEWLAI_D:
00003AC0  6100 F69C               5600   BSR ADVANCED_DECODER_L
00003AC4  5C4E                    5601   ADDQ #6, A6
00003AC6  6000 0C36               5602   BRA IFMOVEWAAXAI
00003ACA                          5603  MOVELLAI_D:
00003ACA  6100 F692               5604   BSR ADVANCED_DECODER_L
00003ACE  5C4E                    5605   ADDQ #6, A6
00003AD0  6000 0DD0               5606   BRA IFMOVELAAXAI
00003AD4                          5607  *#<data> to (An):
00003AD4                          5608  MOVEBIAI_D:
00003AD4  6100 F658               5609   BSR ADVANCED_DECODER
00003AD8  7A02                    5610    MOVE.L #2, D5
00003ADA  6100 F64E               5611   BSR CALC_ADDR_OFFSET
00003ADE                          5612   
00003ADE  6000 0A6E               5613   BRA IFMOVEBIXAI
00003AE2                          5614  MOVEWIAI_D:
00003AE2  6100 F64A               5615   BSR ADVANCED_DECODER
00003AE6  7A02                    5616    MOVE.L #2, D5
00003AE8  6100 F640               5617   BSR CALC_ADDR_OFFSET
00003AEC                          5618   
00003AEC  6000 0C04               5619   BRA IFMOVEWIXAI
00003AF0                          5620  MOVELIAI_D:
00003AF0  6100 F63C               5621   BSR ADVANCED_DECODER
00003AF4  7A04                    5622    MOVE.L #4, D5
00003AF6  6100 F632               5623   BSR CALC_ADDR_OFFSET
00003AFA                          5624   
00003AFA  6000 0D9A               5625   BRA IFMOVELIXAI
00003AFE                          5626  
00003AFE                          5627  *Dn To (An)+:10C0
00003AFE                          5628  MOVEBDAP_D:
00003AFE  6100 F6EA               5629    BSR BASIC_DECODER
00003B02  6000 0B22               5630    BRA IFMOVEBDXPO
00003B06                          5631  MOVEWDAP_D:
00003B06  6100 F6E2               5632    BSR BASIC_DECODER
00003B0A  6000 0CBE               5633    BRA IFMOVEWDXPO
00003B0E                          5634  MOVELDAP_D:
00003B0E  6100 F6DA               5635    BSR BASIC_DECODER
00003B12  6000 0E5A               5636    BRA IFMOVELDXPO
00003B16                          5637  *An to (An)+:$10C8
00003B16                          5638  MOVEBAAP_D:
00003B16  6100 F6D2               5639    BSR BASIC_DECODER
00003B1A  6000 0B16               5640    BRA IFMOVEBAXPO
00003B1E                          5641  MOVEWAAP_D:
00003B1E  6100 F6CA               5642    BSR BASIC_DECODER
00003B22  6000 0CB2               5643    BRA IFMOVEWAXPO
00003B26                          5644  MOVELAAP_D:
00003B26  6100 F6C2               5645    BSR BASIC_DECODER
00003B2A  6000 0E4E               5646    BRA IFMOVELAXPO
00003B2E                          5647  *(An) to (An)+:
00003B2E                          5648  MOVEBAIAP_D:
00003B2E  6100 F6BA               5649   BSR BASIC_DECODER
00003B32  6000 0B0A               5650   BRA IFMOVEBAIXPO
00003B36                          5651  MOVEWAIAP_D:
00003B36  6100 F6B2               5652   BSR BASIC_DECODER
00003B3A  6000 0CA6               5653   BRA IFMOVEWAIXPO
00003B3E                          5654  MOVELAIAP_D:
00003B3E  6100 F6AA               5655    BSR BASIC_DECODER
00003B42  6000 0E42               5656    BRA IFMOVELAIXPO
00003B46                          5657  *(An)+ to (An)+:
00003B46                          5658  MOVEBAPAP_D:
00003B46  6100 F6A2               5659    BSR BASIC_DECODER
00003B4A  6000 0B22               5660    BRA IFMOVEBPOXPO
00003B4E                          5661  MOVEWAPAP_D:
00003B4E  6100 F69A               5662    BSR BASIC_DECODER
00003B52  6000 0CBE               5663    BRA IFMOVEWPOXPO
00003B56                          5664  MOVELAPAP_D:
00003B56  6100 F692               5665    BSR BASIC_DECODER
00003B5A  6000 0E5A               5666    BRA IFMOVELPOXPO
00003B5E                          5667  *-(An) to (An)+: 
00003B5E                          5668  MOVEBADAP_D:
00003B5E  6100 F68A               5669    BSR BASIC_DECODER
00003B62  6000 0AFE               5670    BRA IFMOVEBPRXPO
00003B66                          5671  MOVEWADAP_D:
00003B66  6100 F682               5672    BSR BASIC_DECODER
00003B6A  6000 0C9A               5673    BRA IFMOVEWPRXPO
00003B6E                          5674  MOVELADAP_D:
00003B6E  6100 F67A               5675    BSR BASIC_DECODER
00003B72  6000 0E36               5676    BRA IFMOVELPRXPO
00003B76                          5677   *(xxx).W to (An)+:
00003B76                          5678  MOVEBWAP_D:
00003B76  6100 F5B6               5679   BSR ADVANCED_DECODER
00003B7A  584E                    5680    ADDQ #4, A6
00003B7C  6000 0AD8               5681    BRA IFMOVEBAAXPO
00003B80                          5682  
00003B80                          5683  MOVEWWAP_D:
00003B80  6100 F5AC               5684    BSR ADVANCED_DECODER 
00003B84  584E                    5685    ADDQ #4, A6
00003B86  6000 0C72               5686    BRA IFMOVEWAAXPO
00003B8A                          5687  
00003B8A                          5688  MOVELWAP_D:
00003B8A  6100 F5A2               5689    BSR ADVANCED_DECODER
00003B8E  584E                    5690    ADDQ #4, A6
00003B90  6000 0E0C               5691    BRA IFMOVELAAXPO
00003B94                          5692  *(xxx).L to (An)+: 
00003B94                          5693  MOVEBLAP_D:
00003B94  6100 F5C8               5694    BSR ADVANCED_DECODER_L
00003B98  5C4E                    5695    ADDQ #6, A6
00003B9A  6000 0ABA               5696    BRA IFMOVEBAAXPO
00003B9E                          5697  
00003B9E                          5698  MOVEWLAP_D:
00003B9E  6100 F5BE               5699    BSR ADVANCED_DECODER_L
00003BA2  5C4E                    5700    ADDQ #6, A6
00003BA4  6000 0C54               5701    BRA IFMOVEWAAXPO
00003BA8                          5702  MOVELLAP_D:
00003BA8  6100 F5B4               5703    BSR ADVANCED_DECODER_L
00003BAC  5C4E                    5704    ADDQ #6, A6
00003BAE  6000 0DEE               5705    BRA IFMOVELAAXPO
00003BB2                          5706  
00003BB2                          5707  *#<data> to (An)+:
00003BB2                          5708  MOVEBIAP_D:
00003BB2  6100 F57A               5709    BSR ADVANCED_DECODER
00003BB6  7A02                    5710   MOVE.L #2, D5
00003BB8  6100 F570               5711   BSR CALC_ADDR_OFFSET
00003BBC                          5712   
00003BBC  6000 0A8C               5713    BRA IFMOVEBIXPO
00003BC0                          5714  MOVEWIAP_D:
00003BC0  6100 F56C               5715    BSR ADVANCED_DECODER
00003BC4  7A02                    5716     MOVE.L #2, D5
00003BC6  6100 F562               5717   BSR CALC_ADDR_OFFSET
00003BCA                          5718   
00003BCA  6000 0C22               5719    BRA IFMOVEWIXPO
00003BCE                          5720  MOVELIAP_D:
00003BCE  6100 F55E               5721    BSR ADVANCED_DECODER
00003BD2  7A04                    5722    MOVE.L #4, D5
00003BD4  6100 F554               5723    BSR CALC_ADDR_OFFSET
00003BD8  6000 0DB8               5724    BRA IFMOVELIXPO
00003BDC                          5725  
00003BDC                          5726  *Dn To -(An): $113C
00003BDC                          5727  MOVEBDAD_D:
00003BDC  6100 F60C               5728   BSR BASIC_DECODER
00003BE0  6000 09F0               5729   BRA IFMOVEBDXPR
00003BE4                          5730  MOVEWDAD_D:
00003BE4  6100 F604               5731    BSR BASIC_DECODER
00003BE8  6000 0B8C               5732    BRA IFMOVEWDXPR
00003BEC                          5733  MOVELDAD_D:
00003BEC  6100 F5FC               5734    BSR BASIC_DECODER
00003BF0  6000 0D28               5735    BRA IFMOVELDXPR
00003BF4                          5736  *An to -(An): $1108
00003BF4                          5737  MOVEBAAD_D:
00003BF4  6100 F5F4               5738    BSR BASIC_DECODER
00003BF8  6000 09E4               5739    BRA IFMOVEBAXPR
00003BFC                          5740  MOVEWAAD_D:
00003BFC  6100 F5EC               5741    BSR BASIC_DECODER
00003C00  6000 0B80               5742    BRA IFMOVEWAXPR
00003C04                          5743  MOVELAAD_D:
00003C04  6100 F5E4               5744    BSR BASIC_DECODER
00003C08  6000 0D1C               5745    BRA IFMOVELAXPR
00003C0C                          5746  *(An) to -(An):
00003C0C                          5747  MOVEBAIAD_D:
00003C0C  6100 F5DC               5748    BSR BASIC_DECODER
00003C10  6000 09D8               5749    BRA IFMOVEBAIXPR
00003C14                          5750  MOVEWAIAD_D:
00003C14  6100 F5D4               5751    BSR BASIC_DECODER
00003C18  6000 0B74               5752    BRA IFMOVEWAIXPR
00003C1C                          5753  MOVELAIAD_D:
00003C1C  6100 F5CC               5754    BSR BASIC_DECODER
00003C20  6000 0D10               5755    BRA IFMOVELAIXPR
00003C24                          5756  
00003C24                          5757  *(An)+ to -(An): $1098
00003C24                          5758  MOVEBAPAD_D:
00003C24  6100 F5C4               5759    BSR BASIC_DECODER
00003C28  6000 09F0               5760    BRA IFMOVEBPOXPR
00003C2C                          5761  
00003C2C                          5762  MOVEWAPAD_D:
00003C2C  6100 F5BC               5763    BSR BASIC_DECODER
00003C30  6000 0B8C               5764    BRA IFMOVEWPOXPR
00003C34                          5765  
00003C34                          5766  MOVELAPAD_D:
00003C34  6100 F5B4               5767    BSR BASIC_DECODER
00003C38  6000 0D28               5768    BRA IFMOVELPOXPR   
00003C3C                          5769  *-(An) to -(An): $10A0
00003C3C                          5770  MOVEBADAD_D:
00003C3C  6100 F5AC               5771    BSR BASIC_DECODER
00003C40  6000 09CC               5772    BRA IFMOVEBPRXPR
00003C44                          5773  
00003C44                          5774  MOVEWADAD_D:
00003C44  6100 F5A4               5775    BSR BASIC_DECODER
00003C48  6000 0B68               5776    BRA IFMOVEWPRXPR
00003C4C                          5777  
00003C4C                          5778  MOVELADAD_D:
00003C4C  6100 F59C               5779    BSR BASIC_DECODER
00003C50  6000 0D04               5780    BRA IFMOVELPRXPR
00003C54                          5781  
00003C54                          5782  *(xxx).W to -(An):
00003C54                          5783  MOVEBWAD_D:
00003C54  6100 F4D8               5784   BSR ADVANCED_DECODER
00003C58  584E                    5785    ADDQ #4, A6
00003C5A  6000 09A6               5786    BRA IFMOVEBAAXPR
00003C5E                          5787  
00003C5E                          5788  MOVEWWAD_D:
00003C5E  6100 F4CE               5789   BSR ADVANCED_DECODER
00003C62  584E                    5790    ADDQ #4, A6
00003C64  6000 0B40               5791    BRA IFMOVEWAAXPR
00003C68                          5792  
00003C68                          5793  MOVELWAD_D:
00003C68  6100 F4C4               5794   BSR ADVANCED_DECODER
00003C6C  584E                    5795   ADDQ #4, A6
00003C6E  6000 0CDA               5796   BRA IFMOVELAAXPR
00003C72                          5797  
00003C72                          5798  *(xxx).L to -(An):
00003C72                          5799  MOVEBLAD_D:
00003C72  6100 F4BA               5800   BSR ADVANCED_DECODER 
00003C76  5C4E                    5801   ADDQ #6, A6
00003C78  6000 0988               5802   BRA IFMOVEBAAXPR
00003C7C                          5803  MOVEWLAD_D:
00003C7C  6100 F4B0               5804   BSR ADVANCED_DECODER
00003C80  5C4E                    5805   ADDQ #6, A6
00003C82  6000 0B22               5806   BRA IFMOVEWAAXPR
00003C86                          5807  
00003C86                          5808  MOVELLAD_D:
00003C86  6100 F4A6               5809   BSR ADVANCED_DECODER
00003C8A  5C4E                    5810   ADDQ #6, A6
00003C8C  6000 0CBC               5811   BRA IFMOVELAAXPR
00003C90                          5812  
00003C90                          5813  
00003C90                          5814  
00003C90                          5815  *#<data> to -(An):
00003C90                          5816  MOVEBIAD_D:
00003C90  6100 F49C               5817   BSR ADVANCED_DECODER
00003C94  7A02                    5818   MOVE.L #2, D5
00003C96  6100 F492               5819   BSR CALC_ADDR_OFFSET
00003C9A  6000 095A               5820   BRA IFMOVEBIXPR 
00003C9E                          5821  
00003C9E                          5822  MOVEWIAD_D:
00003C9E  6100 F48E               5823   BSR ADVANCED_DECODER
00003CA2  7A02                    5824   MOVE.L #2, D5
00003CA4  6100 F484               5825   BSR CALC_ADDR_OFFSET
00003CA8  6000 0AF0               5826   BRA IFMOVEWIXPR
00003CAC                          5827  
00003CAC                          5828  MOVELIAD_D:
00003CAC  6100 F480               5829   BSR ADVANCED_DECODER
00003CB0  7A04                    5830    MOVE.L #4, D5
00003CB2  6100 F476               5831   BSR CALC_ADDR_OFFSET
00003CB6  6000 0C86               5832   BRA IFMOVELIXPR
00003CBA                          5833  
00003CBA                          5834  *Dn To (xxx).W:$11C0
00003CBA                          5835  MOVEBDWRD_D:
00003CBA  6100 F472               5836   BSR ADVANCED_DECODER
00003CBE  584E                    5837   ADDQ #4, A6
00003CC0  6000 08BC               5838   BRA IFMOVEBDXAA
00003CC4                          5839  
00003CC4                          5840  MOVEWDWRD_D:
00003CC4  6100 F468               5841   BSR ADVANCED_DECODER
00003CC8  584E                    5842   ADDQ #4, A6
00003CCA  6000 0A56               5843   BRA IFMOVEWDXAA
00003CCE                          5844  
00003CCE                          5845  MOVELDWRD_D:
00003CCE  6100 F45E               5846   BSR ADVANCED_DECODER
00003CD2  584E                    5847   ADDQ #4, A6
00003CD4  6000 0BF0               5848   BRA IFMOVELDXAA
00003CD8                          5849  
00003CD8                          5850  *An to (xxx).W:
00003CD8                          5851  MOVEBAW_D:
00003CD8  6100 F454               5852   BSR ADVANCED_DECODER 
00003CDC  584E                    5853   ADDQ #4, A6
00003CDE  6000 08AA               5854   BRA IFMOVEBAXAA
00003CE2                          5855  
00003CE2                          5856  MOVEWAW_D:
00003CE2  6100 F44A               5857   BSR ADVANCED_DECODER
00003CE6  584E                    5858   ADDQ #4, A6
00003CE8  6000 0A44               5859   BRA IFMOVEWAXAA
00003CEC                          5860  
00003CEC                          5861  MOVELAW_D:
00003CEC  6100 F440               5862   BSR ADVANCED_DECODER
00003CF0  584E                    5863   ADDQ #4, A6
00003CF2  6000 0BDE               5864   BRA IFMOVELAXAA
00003CF6                          5865  
00003CF6                          5866  *(An) to (xxx).W:
00003CF6                          5867  MOVEBAIW_D:
00003CF6  6100 F436               5868   BSR ADVANCED_DECODER 
00003CFA  584E                    5869   ADDQ #4, A6
00003CFC  6000 0898               5870   BRA IFMOVEBAIXAA
00003D00                          5871  
00003D00                          5872  MOVEWAIW_D:
00003D00  6100 F42C               5873   BSR ADVANCED_DECODER 
00003D04  584E                    5874   ADDQ #4, A6
00003D06  6000 0A32               5875   BRA IFMOVEWAIXAA
00003D0A                          5876  
00003D0A                          5877  MOVELAIW_D:
00003D0A  6100 F422               5878   BSR ADVANCED_DECODER
00003D0E  584E                    5879   ADDQ #4, A6
00003D10  6000 0BCC               5880   BRA IFMOVELAIXAA 
00003D14                          5881  
00003D14                          5882  *(An)+ to (xxx).W:
00003D14                          5883  MOVEBAPW_D:
00003D14  6100 F418               5884   BSR ADVANCED_DECODER
00003D18  584E                    5885   ADDQ #4, A6
00003D1A  6000 08AA               5886   BRA IFMOVEBPOXAA
00003D1E                          5887  
00003D1E                          5888  MOVEWAPW_D:
00003D1E  6100 F40E               5889   BSR ADVANCED_DECODER 
00003D22  584E                    5890   ADDQ #4, A6
00003D24  6000 0A44               5891   BRA IFMOVEWPOXAA
00003D28                          5892  
00003D28                          5893  MOVELAPW_D:
00003D28  6100 F404               5894   BSR ADVANCED_DECODER
00003D2C  584E                    5895   ADDQ #4, A6
00003D2E  6000 0BDE               5896   BRA IFMOVELPOXAA 
00003D32                          5897  
00003D32                          5898  *-(An) to (xxx).W:
00003D32                          5899  MOVEBADW_D:
00003D32  6100 F3FA               5900   BSR ADVANCED_DECODER
00003D36  584E                    5901   ADDQ #4, A6
00003D38  6000 0880               5902   BRA IFMOVEBPRXAA
00003D3C                          5903  
00003D3C                          5904  MOVEWADW_D:
00003D3C  6100 F3F0               5905   BSR ADVANCED_DECODER
00003D40  584E                    5906   ADDQ #4, A6
00003D42  6000 0A1A               5907   BRA IFMOVEWPRXAA
00003D46                          5908  
00003D46                          5909  MOVELADW_D:
00003D46  6100 F3E6               5910   BSR ADVANCED_DECODER
00003D4A  584E                    5911   ADDQ #4, A6
00003D4C  6000 0BB4               5912   BRA IFMOVELPRXAA
00003D50                          5913  
00003D50                          5914  *(xxx).W to (xxx).W:
00003D50                          5915  MOVEBW_D:
00003D50  6100 F3BE               5916   BSR ADVANCED_DECODER_2
00003D54                          5917   
00003D54  584E                    5918    ADDQ #4, A6
00003D56                          5919    
00003D56  6000 0856               5920    BRA IFMOVEBAAXAA
00003D5A                          5921    
00003D5A                          5922  MOVEWW_D:
00003D5A  6100 F3B4               5923    BSR ADVANCED_DECODER_2
00003D5E                          5924   
00003D5E  584E                    5925    ADDQ #4, A6
00003D60                          5926    
00003D60  6000 09F0               5927    BRA IFMOVEWAAXAA
00003D64                          5928    
00003D64                          5929  MOVELW_D:
00003D64  6100 F3AA               5930    BSR ADVANCED_DECODER_2
00003D68  584E                    5931    ADDQ #4, A6
00003D6A  6000 0B8A               5932    BRA IFMOVELAAXAA
00003D6E                          5933    
00003D6E                          5934  *(xxx).L to (xxx).W:
00003D6E                          5935  MOVEBLW_D:
00003D6E  6100 F3A0               5936    BSR ADVANCED_DECODER_2
00003D72  5C4E                    5937    ADDQ #6, A6
00003D74  6000 0838               5938    BRA IFMOVEBAAXAA
00003D78                          5939  
00003D78                          5940  MOVEWLW_D:
00003D78  6100 F396               5941    BSR ADVANCED_DECODER_2
00003D7C  5C4E                    5942    ADDQ #6, A6
00003D7E  6000 09D2               5943    BRA IFMOVEWAAXAA
00003D82                          5944    
00003D82                          5945  MOVELLW_D:
00003D82  6100 F38C               5946    BSR ADVANCED_DECODER_2
00003D86  5C4E                    5947    ADDQ #6, A6
00003D88  6000 0B6C               5948    BRA IFMOVELAAXAA
00003D8C                          5949  
00003D8C                          5950  *#<data> to (xxx).W:
00003D8C                          5951  MOVEBIW_D:
00003D8C  6100 F382               5952    BSR ADVANCED_DECODER_2
00003D90  6000 0810               5953    BRA IFMOVEBIXAA
00003D94                          5954  
00003D94                          5955  MOVEWIW_D:
00003D94  6100 F37A               5956    BSR ADVANCED_DECODER_2
00003D98  6000 09AC               5957    BRA IFMOVEWIXAA
00003D9C                          5958  MOVELIW_D:   
00003D9C  6100 F372               5959    BSR ADVANCED_DECODER_2
00003DA0  6000 0B48               5960    BRA IFMOVELIXAA
00003DA4                          5961  
00003DA4                          5962  *Dn To (xxx).L:$13C0
00003DA4                          5963  MOVEBDLNG_D:
00003DA4  6100 F3B8               5964   BSR ADVANCED_DECODER_L
00003DA8  5C4E                    5965   ADDQ #6, A6
00003DAA  6000 07D2               5966   BRA IFMOVEBDXAA
00003DAE                          5967  
00003DAE                          5968  MOVEWDLNG_D:
00003DAE  6100 F3AE               5969   BSR ADVANCED_DECODER_L
00003DB2  5C4E                    5970   ADDQ #6, A6
00003DB4  6000 096C               5971   BRA IFMOVEWDXAA
00003DB8                          5972  
00003DB8                          5973  MOVELDLNG_D:
00003DB8  6100 F3A4               5974   BSR ADVANCED_DECODER_L
00003DBC  5C4E                    5975   ADDQ #6, A6
00003DBE  6000 0B06               5976   BRA IFMOVELDXAA
00003DC2                          5977  
00003DC2                          5978  
00003DC2                          5979  *An to (xxx).L:
00003DC2                          5980  MOVEBAL_D:
00003DC2  6100 F39A               5981   BSR ADVANCED_DECODER_L
00003DC6  5C4E                    5982   ADDQ #6, A6
00003DC8  6000 07C0               5983   BRA IFMOVEBAXAA
00003DCC                          5984  
00003DCC                          5985  MOVEWAL_D:
00003DCC  6100 F390               5986   BSR ADVANCED_DECODER_L
00003DD0  5C4E                    5987   ADDQ #6, A6
00003DD2  6000 095A               5988   BRA IFMOVEWAXAA
00003DD6                          5989  
00003DD6                          5990  MOVELAL_D:
00003DD6  6100 F386               5991   BSR ADVANCED_DECODER_L
00003DDA  5C4E                    5992   ADDQ #6, A6
00003DDC  6000 0AF4               5993   BRA IFMOVELAXAA
00003DE0                          5994  
00003DE0                          5995  *(An) to (xxx).L:
00003DE0                          5996  MOVEBAIL_D:
00003DE0  6100 F37C               5997   BSR ADVANCED_DECODER_L
00003DE4  5C4E                    5998   ADDQ #6, A6
00003DE6  6000 07AE               5999   BRA IFMOVEBAIXAA
00003DEA                          6000  
00003DEA                          6001  MOVEWAIL_D:
00003DEA  6100 F372               6002   BSR ADVANCED_DECODER_L
00003DEE  5C4E                    6003   ADDQ #6, A6
00003DF0  6000 0948               6004   BRA IFMOVEWAIXAA 
00003DF4                          6005  
00003DF4                          6006  MOVELAIL_D:
00003DF4  6100 F368               6007   BSR ADVANCED_DECODER_L 
00003DF8  5C4E                    6008   ADDQ #6, A6
00003DFA  6000 0AE2               6009   BRA IFMOVELAIXAA
00003DFE                          6010  
00003DFE                          6011  *(An)+ to (xxx).L:
00003DFE                          6012  MOVEBAPL_D:
00003DFE  6100 F35E               6013   BSR ADVANCED_DECODER_L
00003E02  5C4E                    6014   ADDQ #6, A6
00003E04  6000 07C0               6015   BRA IFMOVEBPOXAA
00003E08                          6016  
00003E08                          6017  MOVEWAPL_D:
00003E08  6100 F354               6018   BSR ADVANCED_DECODER_L
00003E0C  5C4E                    6019   ADDQ #6, A6
00003E0E  6000 095A               6020   BRA IFMOVEWPOXAA
00003E12                          6021  
00003E12                          6022  MOVELAPL_D:
00003E12  6100 F34A               6023   BSR ADVANCED_DECODER_L
00003E16  5C4E                    6024   ADDQ #6, A6
00003E18  6000 0AF4               6025   BRA IFMOVELPOXAA
00003E1C                          6026  
00003E1C                          6027  *-(An) to (xxx).L:
00003E1C                          6028  MOVEBADL_D:
00003E1C  6100 F340               6029   BSR ADVANCED_DECODER_L
00003E20  5C4E                    6030   ADDQ #6, A6
00003E22  6000 0796               6031   BRA IFMOVEBPRXAA
00003E26                          6032  
00003E26                          6033  MOVEWADL_D:
00003E26  6100 F336               6034   BSR ADVANCED_DECODER_L
00003E2A  5C4E                    6035   ADDQ #6, A6
00003E2C  6000 0930               6036   BRA IFMOVEWPRXAA
00003E30                          6037  
00003E30                          6038  MOVELADL_D:
00003E30  6100 F32C               6039   BSR ADVANCED_DECODER_L
00003E34  5C4E                    6040   ADDQ #6, A6
00003E36  6000 0ACA               6041   BRA IFMOVELPRXAA
00003E3A                          6042  
00003E3A                          6043  *(xxx).W to (xxx).L:
00003E3A                          6044  MOVEBWL_D:
00003E3A  6100 F2D4               6045    BSR ADVANCED_DECODER_2 
00003E3E  5C4E                    6046    ADDQ #6, A6
00003E40  6000 076C               6047    BRA IFMOVEBAAXAA
00003E44                          6048  
00003E44                          6049  MOVEWWL_D:
00003E44  6100 F2CA               6050    BSR ADVANCED_DECODER_2
00003E48  5C4E                    6051    ADDQ #6, A6
00003E4A  6000 0906               6052    BRA IFMOVEWAAXAA
00003E4E                          6053  
00003E4E                          6054  MOVELWL_D:
00003E4E  6100 F2C0               6055    BSR ADVANCED_DECODER_2
00003E52  5C4E                    6056    ADDQ #6, A6
00003E54  6000 0AA0               6057    BRA IFMOVELAAXAA
00003E58                          6058  
00003E58                          6059  *(xxx).L to (xxx).L
00003E58                          6060  MOVEBLL_D:
00003E58  6100 F2B6               6061    BSR ADVANCED_DECODER_2
00003E5C  504E                    6062    ADDQ #8, A6
00003E5E  6000 074E               6063    BRA IFMOVEBAAXAA
00003E62                          6064  
00003E62                          6065  MOVEWLL_D:
00003E62  6100 F2AC               6066    BSR ADVANCED_DECODER_2
00003E66  504E                    6067    ADDQ #8, A6
00003E68  6000 08E8               6068    BRA IFMOVEWAAXAA
00003E6C                          6069  
00003E6C                          6070  MOVELLL_D:
00003E6C  6100 F2A2               6071    BSR ADVANCED_DECODER_2
00003E70  504E                    6072    ADDQ #8, A6
00003E72  6000 0A82               6073    BRA IFMOVELAAXAA
00003E76                          6074  
00003E76                          6075  *#<data> to (xxx).L:
00003E76                          6076  MOVEBIL_D:
00003E76  6100 F298               6077    BSR ADVANCED_DECODER_2
00003E7A  504E                    6078    ADDQ #8, A6
00003E7C  6000 0A6C               6079    BRA IFMOVELIXAA
00003E80                          6080  
00003E80                          6081  
00003E80                          6082  
00003E80                          6083  MOVEWIL_D:
00003E80  6100 F28E               6084    BSR ADVANCED_DECODER_2
00003E84  504E                    6085    ADDQ #8, A6
00003E86  6000 0A62               6086    BRA IFMOVELIXAA
00003E8A                          6087  
00003E8A                          6088  
00003E8A                          6089  MOVELIL_D:
00003E8A  6100 F284               6090    BSR ADVANCED_DECODER_2
00003E8E  504E                    6091    ADDQ #8, A6
00003E90  6000 0A58               6092    BRA IFMOVELIXAA
00003E94                          6093  
00003E94                          6094  
00003E94                          6095  
00003E94                          6096  *MOVEQ*
00003E94                          6097  MOVEQD_D:
00003E94  6100 F32E               6098   BSR MQ_DECODER
00003E98  6000 0BE2               6099   BRA IFMOVEQIXD 
00003E9C                          6100  
00003E9C                          6101  
00003E9C                          6102  
00003E9C                          6103  
00003E9C                          6104  *---------------- MOVE-A Variants-------------*
00003E9C                          6105  *Data reg to Addr*
00003E9C                          6106  MOVEAWD_D:
00003E9C  6100 F34C               6107   BSR BASIC_DECODER
00003EA0  6000 0B32               6108   BRA IFMOVEAWDXA
00003EA4                          6109  MOVEALD_D:
00003EA4  6100 F344               6110   BSR BASIC_DECODER
00003EA8  6000 0B7E               6111   BRA IFMOVEALDXA
00003EAC                          6112  
00003EAC                          6113  *Addr to Addr*
00003EAC                          6114  MOVEAWA_D:
00003EAC  6100 F33C               6115   BSR BASIC_DECODER
00003EB0  6000 0B82               6116   BRA IFMOVEALAXA
00003EB4                          6117  
00003EB4                          6118  MOVEALA_D:
00003EB4  6100 F334               6119   BSR BASIC_DECODER
00003EB8  6000 0B7A               6120   BRA IFMOVEALAXA
00003EBC                          6121  
00003EBC                          6122  
00003EBC                          6123  *Addr indirect to Addr*
00003EBC                          6124  MOVEAWAI_D:
00003EBC  6100 F32C               6125    BSR BASIC_DECODER
00003EC0  6000 0B2A               6126    BRA IFMOVEAWAIXA
00003EC4                          6127  MOVEALAU_D:
00003EC4  6100 F324               6128   BSR BASIC_DECODER
00003EC8  6000 0B76               6129   BRA IFMOVEALAIXA
00003ECC                          6130  
00003ECC                          6131  *Addr post increment to Addr*
00003ECC                          6132  MOVEAWPA_D:
00003ECC  6100 F31C               6133   BSR BASIC_DECODER
00003ED0  6000 0B4A               6134   BRA IFMOVEAWPOXA
00003ED4                          6135  
00003ED4                          6136  MOVEALPA_D:
00003ED4  6100 F314               6137   BSR BASIC_DECODER
00003ED8  6000 0B96               6138   BRA IFMOVEALPOXA
00003EDC                          6139  
00003EDC                          6140  *Addr pre decrement to Addr*
00003EDC                          6141  MOVEAWDA_D:
00003EDC  6100 F30C               6142   BSR BASIC_DECODER
00003EE0  6000 0B2E               6143   BRA IFMOVEAWPRXA
00003EE4                          6144  
00003EE4                          6145  MOVEALDA_D:
00003EE4  6100 F304               6146   BSR BASIC_DECODER
00003EE8  6000 0B7A               6147   BRA IFMOVEALPRXA
00003EEC                          6148  
00003EEC                          6149  *long addr to Addr*
00003EEC                          6150  MOVEAWLA_D:
00003EEC  6100 F270               6151   BSR ADVANCED_DECODER_L
00003EF0  6000 0B12               6152   BRA IFMOVEAWAAXA
00003EF4                          6153  
00003EF4                          6154  MOVEALLA_D:
00003EF4  6100 F268               6155    BSR ADVANCED_DECODER_L
00003EF8  6000 0B5E               6156    BRA IFMOVEALAAXA
00003EFC                          6157  *word addr to Addr*
00003EFC                          6158  MOVEAWWA_D:
00003EFC  6100 F230               6159    BSR ADVANCED_DECODER
00003F00  6000 0B02               6160    BRA IFMOVEAWAAXA
00003F04                          6161  MOVEALWA_D:
00003F04  6100 F228               6162    BSR ADVANCED_DECODER
00003F08  6000 0B4E               6163    BRA IFMOVEALAAXA
00003F0C                          6164  
00003F0C                          6165  *immidiate to addr*
00003F0C                          6166  MOVEAWIA_D:
00003F0C  6100 F220               6167   BSR ADVANCED_DECODER
00003F10  7A02                    6168   MOVE.L #2, D5
00003F12  6100 F216               6169   BSR CALC_ADDR_OFFSET
00003F16  6000 0AE0               6170   BRA IFMOVEAWIXA
00003F1A                          6171  MOVEALIA_D:
00003F1A  6100 F212               6172   BSR ADVANCED_DECODER
00003F1E  7A04                    6173   MOVE.L #4, D5
00003F20  6100 F208               6174   BSR CALC_ADDR_OFFSET 
00003F24  6000 0B26               6175   BRA IFMOVEALIXA
00003F28                          6176  *--------------ADD VARIANTS---------------*
00003F28                          6177  
00003F28                          6178  *D to D*
00003F28                          6179  ADDBDD_D:
00003F28  6100 F2C0               6180   BSR BASIC_DECODER
00003F2C  6000 0B5A               6181   BRA IFADDBDXD
00003F30                          6182  
00003F30                          6183  ADDWDD_D:
00003F30  6100 F2B8               6184   BSR BASIC_DECODER
00003F34  6000 0BCA               6185   BRA IFADDWDXD
00003F38                          6186  
00003F38                          6187  ADDLDD_D:
00003F38  6100 F2B0               6188   BSR BASIC_DECODER
00003F3C  6000 0C46               6189   BRA IFADDLDXD
00003F40                          6190  
00003F40                          6191  *D to A*
00003F40                          6192  ADDBDA_D:
00003F40                          6193   *BSR BASIC_DECODER
00003F40                          6194   *BRA IFADDBDXA
00003F40                          6195  
00003F40                          6196  ADDWDA_D:
00003F40                          6197   *BSR BASIC_DECODER
00003F40                          6198   *BRA IFADDWDXA
00003F40                          6199  
00003F40                          6200  ADDLDA_D:
00003F40                          6201   *BSR BASIC_DECODER
00003F40                          6202   *BRA IFADDLDXA
00003F40                          6203  
00003F40                          6204  *D to (A)*
00003F40                          6205  ADDBDAI_D:
00003F40  6100 F2A8               6206   BSR BASIC_DECODER
00003F44  6000 0B8A               6207   BRA IFADDBDXAI
00003F48                          6208  
00003F48                          6209  ADDWDAI_D:
00003F48  6100 F2A0               6210   BSR BASIC_DECODER
00003F4C  6000 0C06               6211   BRA IFADDWDXAI
00003F50                          6212  
00003F50                          6213  
00003F50                          6214  ADDLDAI_D:
00003F50  6100 F298               6215   BSR BASIC_DECODER
00003F54  6000 0C82               6216   BRA IFADDLDXAI
00003F58                          6217  
00003F58                          6218  *D to (A)+*
00003F58                          6219  ADDBDAP_D:
00003F58  6100 F290               6220   BSR BASIC_DECODER
00003F5C  6000 0B96               6221   BRA IFADDBDXPO
00003F60                          6222  
00003F60                          6223  ADDWDAP_D:
00003F60  6100 F288               6224   BSR BASIC_DECODER
00003F64  6000 0C12               6225   BRA IFADDWDXPO
00003F68                          6226  
00003F68                          6227  ADDLDAP_D:
00003F68  6100 F280               6228   BSR BASIC_DECODER
00003F6C  6000 0C8E               6229   BRA IFADDLDXPO
00003F70                          6230  *D to -(A)*
00003F70                          6231  
00003F70                          6232  ADDBDAD_D:
00003F70  6100 F278               6233   BSR BASIC_DECODER
00003F74  6000 0B72               6234   BRA IFADDBDXPR
00003F78                          6235  
00003F78                          6236  ADDWDAD_D:
00003F78  6100 F270               6237   BSR BASIC_DECODER
00003F7C  6000 0BEE               6238   BRA IFADDWDXPR
00003F80                          6239  
00003F80                          6240  ADDLDAD_D:
00003F80  6100 F268               6241   BSR BASIC_DECODER
00003F84  6000 0C6A               6242   BRA IFADDLDXPR
00003F88                          6243  
00003F88                          6244  *A to D*
00003F88                          6245  ADDWAD_D:
00003F88  6100 F260               6246   BSR BASIC_DECODER
00003F8C  6000 0B7E               6247   BRA IFADDWAXD
00003F90                          6248  
00003F90                          6249  ADDLAD_D:
00003F90  6100 F258               6250   BSR BASIC_DECODER
00003F94  6000 0BFA               6251   BRA IFADDLAXD
00003F98                          6252  
00003F98                          6253  *(A) to D*
00003F98                          6254  ADDBAID_D:
00003F98  6100 F250               6255   BSR BASIC_DECODER
00003F9C  6000 0AF6               6256   BRA IFADDBAIXD
00003FA0                          6257  
00003FA0                          6258  ADDWAID_D:
00003FA0  6100 F248               6259   BSR BASIC_DECODER
00003FA4  6000 0B72               6260   BRA IFADDWAIXD
00003FA8                          6261  
00003FA8                          6262  ADDLAID_D:
00003FA8  6100 F240               6263   BSR BASIC_DECODER
00003FAC  6000 0BEE               6264   BRA IFADDLAIXD
00003FB0                          6265  
00003FB0                          6266  *(A)+ to D*
00003FB0                          6267  ADDBAPD_D:
00003FB0  6100 F238               6268   BSR BASIC_DECODER
00003FB4  6000 0B0E               6269   BRA IFADDBPOXD
00003FB8                          6270  
00003FB8                          6271  ADDWAPD_D:
00003FB8  6100 F230               6272   BSR BASIC_DECODER
00003FBC  6000 0B8A               6273   BRA IFADDWPOXD
00003FC0                          6274  
00003FC0                          6275  ADDLAPD_D:
00003FC0  6100 F228               6276   BSR BASIC_DECODER
00003FC4  6000 0C06               6277   BRA IFADDLPOXD
00003FC8                          6278  
00003FC8                          6279  *-(A) to D*
00003FC8                          6280  ADDBADD_D:
00003FC8  6100 F220               6281   BSR BASIC_DECODER
00003FCC  6000 0AEA               6282   BRA IFADDBPRXD
00003FD0                          6283  
00003FD0                          6284  ADDWADD_D:
00003FD0  6100 F218               6285   BSR BASIC_DECODER
00003FD4  6000 0B66               6286   BRA IFADDWPRXD
00003FD8                          6287  
00003FD8                          6288  ADDLADD_D:
00003FD8  6100 F210               6289   BSR BASIC_DECODER
00003FDC  6000 0BE2               6290   BRA IFADDLPRXD
00003FE0                          6291  
00003FE0                          6292  *xxx.w to D*
00003FE0                          6293    ADDBWD_D:
00003FE0  6100 F14C               6294    BSR ADVANCED_DECODER 
00003FE4  584E                    6295    ADDQ #4, A6
00003FE6  6000 0AC4               6296    BRA IFADDBAAXD
00003FEA                          6297  
00003FEA                          6298  ADDWWD_D:
00003FEA  6100 F142               6299   BSR ADVANCED_DECODER
00003FEE  584E                    6300   ADDQ #4, A6
00003FF0  6000 0B3E               6301   BRA IFADDWAAXD
00003FF4                          6302  
00003FF4                          6303  
00003FF4                          6304  ADDLWD_D:
00003FF4  6100 F138               6305   BSR ADVANCED_DECODER 
00003FF8  584E                    6306   ADDQ #4, A6
00003FFA  6000 0BB8               6307   BRA IFADDLAAXD
00003FFE                          6308  
00003FFE                          6309  *xxx.L to D*
00003FFE                          6310   ADDBLD_D:
00003FFE  6100 F110               6311    BSR ADVANCED_DECODER_2
00004002  5C4E                    6312    ADDQ #6, A6
00004004  6000 0AA6               6313    BRA IFADDBAAXD
00004008                          6314  
00004008                          6315  ADDWLD_D:
00004008  6100 F106               6316   BSR ADVANCED_DECODER_2
0000400C  5C4E                    6317   ADDQ #6, A6
0000400E  6000 0B20               6318   BRA IFADDWAAXD
00004012                          6319  
00004012                          6320  ADDLLD_D:
00004012  6100 F0FC               6321   BSR ADVANCED_DECODER_2
00004016  5C4E                    6322   ADDQ #6, A6
00004018  6000 0B9A               6323   BRA IFADDLAAXD
0000401C                          6324  *--------------ADDA VARIANTS---------------*
0000401C                          6325  *D to A*
0000401C                          6326  ADDAWDA_D:
0000401C  6100 F1CC               6327    BSR BASIC_DECODER
00004020  6000 0BE6               6328    BRA IFADDAWDXA
00004024                          6329  
00004024                          6330  ADDALDA_D:
00004024  6100 F1C4               6331    BSR BASIC_DECODER
00004028  6000 0C32               6332    BRA IFADDALDXA
0000402C                          6333  
0000402C                          6334  *A to A* 
0000402C                          6335  ADDAWA_D:
0000402C  6100 F1BC               6336    BSR BASIC_DECODER
00004030  6000 0BE2               6337    BRA IFADDAWAXA
00004034                          6338  
00004034                          6339  ADDALA_D:
00004034  6100 F1B4               6340    BSR BASIC_DECODER
00004038  6000 0C2E               6341    BRA IFADDALAXA 
0000403C                          6342  
0000403C                          6343  *(A) to A*
0000403C                          6344  ADDAWIA_D:
0000403C  6100 F1AC               6345    BSR BASIC_DECODER
00004040  6000 0BDE               6346    BRA IFADDAWAIXA
00004044                          6347  
00004044                          6348  ADDALIA_D:
00004044  6100 F1A4               6349    BSR BASIC_DECODER
00004048  6000 0C2A               6350    BRA IFADDALAIXA
0000404C                          6351  
0000404C                          6352  *(A)+ to A*
0000404C                          6353  ADDAWPA_D:
0000404C  6100 F19C               6354    BSR BASIC_DECODER
00004050  6000 0BFE               6355    BRA IFADDAWPOXA
00004054                          6356  
00004054                          6357  ADDALPA_D:
00004054  6100 F194               6358    BSR BASIC_DECODER
00004058  6000 0C3E               6359    BRA IFADDALPRXA
0000405C                          6360  
0000405C                          6361  *-(A) to A*
0000405C                          6362  ADDAWDEA_D:
0000405C  6100 F18C               6363    BSR BASIC_DECODER
00004060  6000 0BEE               6364    BRA IFADDAWPOXA
00004064                          6365  
00004064                          6366  ADDALDEA_D:
00004064  6100 F184               6367    BSR BASIC_DECODER
00004068  6000 0C3A               6368    BRA IFADDALPOXA
0000406C                          6369  
0000406C                          6370   *--------------ADDQ VARIANTS---------------*
0000406C                          6371  *only valud for immidiate data to a location*
0000406C                          6372  *Dn*
0000406C                          6373  ADDQBD_D:
0000406C  6100 F120               6374   BSR AQ_DECODER
00004070  6000 0C3E               6375   BRA IFADDQBIXD
00004074                          6376  
00004074                          6377  ADDQWD_D:
00004074  6100 F118               6378   BSR AQ_DECODER
00004078  6000 0C7E               6379   BRA IFADDQWIXD
0000407C                          6380   
0000407C                          6381  ADDQLD_D:
0000407C  6100 F110               6382   BSR AQ_DECODER
00004080  6000 0CBE               6383   BRA IFADDQLIXD
00004084                          6384  
00004084                          6385  *An*
00004084                          6386  ADDQBA_D:
00004084  6100 F108               6387   BSR AQ_DECODER
00004088  6000 0C32               6388   BRA IFADDQBIXA
0000408C                          6389  
0000408C                          6390  ADDQWA_D:
0000408C  6100 F100               6391   BSR AQ_DECODER
00004090  6000 0C72               6392   BRA IFADDQWIXA
00004094                          6393  
00004094                          6394  ADDQLA_D:
00004094  6100 F0F8               6395   BSR AQ_DECODER
00004098  6000 0CB2               6396   BRA IFADDQLIXA
0000409C                          6397  
0000409C                          6398  *(An)*
0000409C                          6399  ADDQBAI_D:
0000409C  6100 F0F0               6400   BSR AQ_DECODER
000040A0  6000 0C26               6401   BRA IFADDQBIXAI
000040A4                          6402  
000040A4                          6403  ADDQWAI_D:
000040A4  6100 F0E8               6404   BSR AQ_DECODER
000040A8  6000 0C66               6405   BRA IFADDQWIXAI
000040AC                          6406  
000040AC                          6407  ADDQLAI_D:
000040AC  6100 F0E0               6408   BSR AQ_DECODER
000040B0  6000 0CA6               6409   BRA IFADDQLIXAI
000040B4                          6410  
000040B4                          6411  *(An)+*
000040B4                          6412  ADDQBAPI_D:
000040B4  6100 F0D8               6413   BSR AQ_DECODER
000040B8  6000 0C32               6414   BRA IFADDQBIXPO
000040BC                          6415  
000040BC                          6416  ADDQWAPI_D:
000040BC  6100 F0D0               6417   BSR AQ_DECODER
000040C0  6000 0C72               6418   BRA IFADDQWIXPO
000040C4                          6419   
000040C4                          6420  ADDQLAPI_D:
000040C4  6100 F0C8               6421   BSR AQ_DECODER
000040C8  6000 0CB2               6422   BRA IFADDQLIXPO
000040CC                          6423  
000040CC                          6424  *-(An)*
000040CC                          6425  ADDQBAPD_D:
000040CC  6100 F0C0               6426   BSR AQ_DECODER
000040D0  6000 0C0E               6427   BRA IFADDQBIXPR
000040D4                          6428  
000040D4                          6429  ADDQWAPD_D:
000040D4  6100 F0B8               6430   BSR AQ_DECODER
000040D8  6000 0C4E               6431   BRA IFADDQWIXPR
000040DC                          6432  
000040DC                          6433  ADDQLAPD_D:
000040DC  6100 F0B0               6434   BSR AQ_DECODER
000040E0  6000 0C8E               6435   BRA IFADDQLIXPR
000040E4                          6436   
000040E4                          6437  *WORD*
000040E4                          6438  ADDQBW_D:
000040E4  6100 F0A8               6439   BSR AQ_DECODER
000040E8  6000 0BEA               6440   BRA IFADDQBIXAA
000040EC                          6441  
000040EC                          6442  ADDQWW_D:
000040EC  6100 F0A0               6443   BSR AQ_DECODER
000040F0  6000 0C2A               6444   BRA IFADDQWIXAA
000040F4                          6445  
000040F4                          6446  ADDQLW_D:
000040F4  6100 F098               6447   BSR AQ_DECODER
000040F8  6000 0C6A               6448   BRA IFADDQLIXAA
000040FC                          6449  
000040FC                          6450  *LONG*
000040FC                          6451  ADDQBL_D:
000040FC  6100 F090               6452   BSR AQ_DECODER
00004100  6000 0BD2               6453   BRA IFADDQBIXAA
00004104                          6454  
00004104                          6455  ADDQWL_D:
00004104  6100 F088               6456   BSR AQ_DECODER
00004108  6000 0C12               6457   BRA IFADDQWIXAA
0000410C                          6458  
0000410C                          6459  ADDQLL_D:
0000410C  6100 F020               6460   BSR ADVANCED_DECODER
00004110  6000 0C0A               6461   BRA IFADDQWIXAA
00004114                          6462  
00004114                          6463  *--------------MOVEQ VARIANTS---------------*
00004114                          6464  *only works with data registers and longs *
00004114                          6465  MOVEQ_V_DECODE:
00004114  6100 F0D4               6466   BSR BASIC_DECODER
00004118  6000 0962               6467   BRA IFMOVEQIXD
0000411C                          6468  
0000411C                          6469  *--------------------SUB VARIANTS-----------------------------*
0000411C                          6470  *D - D*
0000411C                          6471  SUBBDD_DECODE:
0000411C  6100 F0CC               6472   BSR BASIC_DECODER
00004120  6000 0C66               6473   BRA IFSUBBDXD
00004124                          6474  
00004124                          6475  SUBWDD_DECODE:
00004124  6100 F0C4               6476   BSR BASIC_DECODER
00004128  6000 0CD6               6477   BRA IFSUBWDXD
0000412C                          6478  
0000412C                          6479  SUBLDD_DECODE:
0000412C  6100 F0BC               6480   BSR BASIC_DECODER
00004130  6000 0D52               6481   BRA IFSUBLDXD
00004134                          6482  
00004134                          6483  *D-A: NOT VALID FOR BYTE DATA*
00004134                          6484  SUBWDA_DECODE:
00004134                          6485   *BSR BASIC_DECODER
00004134                          6486   *BRA IFSUBWDXA
00004134                          6487  
00004134                          6488  
00004134                          6489  SUBLDA_DECODE:
00004134                          6490  * BSR BASIC_DECODER
00004134                          6491  * BRA IFSUBLDXA
00004134                          6492  
00004134                          6493  *D-(A)*
00004134                          6494  SUBBDAI_DECODE:
00004134  6100 F0B4               6495   BSR BASIC_DECODER
00004138  6000 0C96               6496   BRA IFSUBBDXAI
0000413C                          6497  
0000413C                          6498  
0000413C                          6499  SUBWDAI_DECODE:
0000413C  6100 F0AC               6500   BSR BASIC_DECODER
00004140  6000 0D12               6501   BRA IFSUBWDXAI
00004144                          6502  
00004144                          6503  
00004144                          6504  SUBLDAI_DECODE:
00004144  6100 F0A4               6505   BSR BASIC_DECODER
00004148  6000 0D8E               6506   BRA IFSUBLDXAI
0000414C                          6507  
0000414C                          6508  *D-(A)+*
0000414C                          6509  SUBBDAP_DECODE:
0000414C  6100 F09C               6510   BSR BASIC_DECODER
00004150  6000 0CA2               6511   BRA IFSUBBDXPO
00004154                          6512  
00004154                          6513  
00004154                          6514  SUBWDAP_DECODE:
00004154  6100 F094               6515   BSR BASIC_DECODER
00004158  6000 0D1E               6516   BRA IFSUBWDXPO
0000415C                          6517  
0000415C                          6518  
0000415C                          6519  SUBLDAP_DECODE:
0000415C  6100 F08C               6520   BSR BASIC_DECODER
00004160  6000 0D9A               6521   BRA IFSUBLDXPO
00004164                          6522  
00004164                          6523  *D- -(A)*
00004164                          6524  SUBBDAD_DECODE:
00004164  6100 F084               6525   BSR BASIC_DECODER
00004168  6000 0C7E               6526   BRA IFSUBBDXPR
0000416C                          6527  
0000416C                          6528  
0000416C                          6529  SUBWDAD_DECODE:
0000416C  6100 F07C               6530   BSR BASIC_DECODER
00004170  6000 0CFA               6531   BRA IFSUBWDXPR 
00004174                          6532  
00004174                          6533  SUBLDAD_DECODE:
00004174  6100 F074               6534   BSR BASIC_DECODER
00004178  6000 0D76               6535   BRA IFSUBLDXPR
0000417C                          6536  
0000417C                          6537  *D- WORD*
0000417C                          6538  SUBBDW_DECODE:
0000417C  6100 EFB0               6539   BSR ADVANCED_DECODER
00004180  584E                    6540   ADDQ #4, A6
00004182  6000 0C58               6541   BRA IFSUBBDXAA
00004186                          6542  
00004186                          6543  
00004186                          6544  SUBWDW_DECODE:
00004186  6100 EFA6               6545   BSR ADVANCED_DECODER 
0000418A  584E                    6546    ADDQ #4, A6
0000418C  6000 0CD2               6547    BRA IFSUBWDXAA
00004190                          6548  
00004190                          6549  SUBLDW_DECODE:
00004190  6100 EF9C               6550   BSR ADVANCED_DECODER
00004194  584E                    6551    ADDQ #4, A6
00004196  6000 0D4C               6552    BRA IFSUBLDXAA
0000419A                          6553  
0000419A                          6554  *D - LONG*
0000419A                          6555  SUBBDL_DECODE:
0000419A  6100 EFC2               6556   BSR ADVANCED_DECODER_L
0000419E  5C4E                    6557    ADDQ #6, A6
000041A0  6000 0C3A               6558    BRA IFSUBBDXAA
000041A4                          6559  
000041A4                          6560  SUBWDL_DECODE:
000041A4  6100 EFB8               6561   BSR ADVANCED_DECODER_L
000041A8  5C4E                    6562    ADDQ #6, A6
000041AA  6000 0CB4               6563    BRA IFSUBWDXAA
000041AE                          6564  
000041AE                          6565  
000041AE                          6566  
000041AE                          6567  SUBLDL_DECODE:
000041AE  6100 EFAE               6568   BSR ADVANCED_DECODER_L
000041B2  5C4E                    6569    ADDQ #6, A6
000041B4  6000 0D2E               6570    BRA IFSUBLDXAA
000041B8                          6571  
000041B8                          6572  
000041B8                          6573  
000041B8                          6574  * D - IMMIDIATE*
000041B8                          6575  SUBBDI_DECODE:
000041B8  6100 EF74               6576   BSR ADVANCED_DECODER
000041BC  6100 EF6C               6577   BSR CALC_ADDR_OFFSET
000041C0                          6578   *BRA IFSUBBDXI
000041C0                          6579  
000041C0                          6580  SUBWDI_DECODE:
000041C0  6100 EF6C               6581   BSR ADVANCED_DECODER
000041C4  6100 EF64               6582   BSR CALC_ADDR_OFFSET
000041C8                          6583   *BRA IFSUBWDXI
000041C8                          6584  
000041C8                          6585  SUBLDI_DECODE:
000041C8  6100 EF64               6586   BSR ADVANCED_DECODER
000041CC  6100 EF5C               6587   BSR CALC_ADDR_OFFSET
000041D0                          6588   *BRA IFSUBLDXI
000041D0                          6589  
000041D0                          6590  
000041D0                          6591  *(A) - D*
000041D0                          6592  SUBBAD_DECODE:
000041D0  6100 F018               6593   BSR BASIC_DECODER
000041D4  6000 0BBE               6594   BRA IFSUBBAIXD
000041D8                          6595  
000041D8                          6596  SUBWAD_DECODE:
000041D8  6100 F010               6597   BSR BASIC_DECODER
000041DC  6000 0C3A               6598   BRA IFSUBWAIXD
000041E0                          6599  
000041E0                          6600  SUBLAD_DECODE:
000041E0  6100 F008               6601   BSR BASIC_DECODER
000041E4  6000 0CB6               6602   BRA IFSUBLAIXD
000041E8                          6603  
000041E8                          6604  *(A)+ -D*
000041E8                          6605  SUBBAPD_DECODE:
000041E8  6100 F000               6606   BSR BASIC_DECODER
000041EC  6000 0BD6               6607   BRA IFSUBBPOXD
000041F0                          6608  
000041F0                          6609  SUBWAPD_DECODE:
000041F0  6100 EFF8               6610   BSR BASIC_DECODER
000041F4  6000 0C52               6611   BRA IFSUBWPOXD
000041F8                          6612  
000041F8                          6613  SUBLAPD_DECODE:
000041F8  6100 EFF0               6614   BSR BASIC_DECODER
000041FC  6000 0CCE               6615   BRA IFSUBLPOXD
00004200                          6616  
00004200                          6617  *-(A) - D*
00004200                          6618  SUBBADD_DECODE:
00004200  6100 EFE8               6619   BSR BASIC_DECODER
00004204  6000 0BB2               6620   BRA IFSUBBPRXD
00004208                          6621  
00004208                          6622  SUBWADD_DECODE:
00004208  6100 EFE0               6623   BSR BASIC_DECODER
0000420C  6000 0C2E               6624   BRA IFSUBWPRXD
00004210                          6625  
00004210                          6626  SUBLADD_DECODE:
00004210  6100 EFD8               6627   BSR BASIC_DECODER
00004214  6000 0CAA               6628   BRA IFSUBLPRXD
00004218                          6629  
00004218                          6630  *WORD - D*
00004218                          6631  SUBBWD_DECODE:
00004218  6100 EF14               6632   BSR ADVANCED_DECODER
0000421C  584E                    6633   ADDQ #4, A6
0000421E  6000 0B8C               6634   BRA IFSUBBAAXD
00004222                          6635  
00004222                          6636  SUBWWD_DECODE:
00004222  6100 EF0A               6637   BSR ADVANCED_DECODER
00004226  584E                    6638   ADDQ #4, A6
00004228  6000 0C06               6639   BRA IFSUBWAAXD
0000422C                          6640  
0000422C                          6641  SUBLWD_DECODE:
0000422C  6100 EF00               6642   BSR ADVANCED_DECODER
00004230  584E                    6643   ADDQ #4, A6
00004232  6000 0C80               6644   BRA IFSUBLAAXD
00004236                          6645  
00004236                          6646  *LONG - D*
00004236                          6647  SUBBLD_DECODE:
00004236  6100 EF26               6648   BSR ADVANCED_DECODER_L
0000423A  5C4E                    6649   ADDQ #6, A6
0000423C  6000 0B6E               6650   BRA IFSUBBAAXD
00004240                          6651  
00004240                          6652  SUBWLD_DECODE:
00004240  6100 EF1C               6653   BSR ADVANCED_DECODER_L
00004244  5C4E                    6654   ADDQ #6, A6
00004246  6000 0BE8               6655   BRA IFSUBWAAXD
0000424A                          6656  
0000424A                          6657  SUBLLD_DECODE:
0000424A  6100 EF12               6658   BSR ADVANCED_DECODER_L 
0000424E  5C4E                    6659   ADDQ #6, A6
00004250  6000 0C62               6660   BRA IFSUBLAAXD
00004254                          6661  
00004254                          6662  
00004254  4E75                    6663   OUTPUT: RTS
00004256                          6664  
00004256                          6665  
00004256  FFFF FFFF               6666      SIMHALT             ; halt simulator
0000425A                          6667  
0000425A                          6668  * Put variables and constants here
0000425A                          6669  
0000425A                          6670  
0000425A                          6671  *---------------- MOVE Variants-------------*
0000425A  =00000000               6672  GENERAL_MOVE EQU $0000
0000425A  =0000C000               6673  GENERAL_MOVE_MASK EQU $C000
0000425A                          6674  
0000425A                          6675  *00 size destination source *
0000425A  =0000F1F8               6676  MMASK EQU $F1F8
0000425A  =00000007               6677  MVALUEMASK1 EQU $7
0000425A  =00000E00               6678  MVALUEMASK2 EQU $E00
0000425A                          6679  
0000425A                          6680  *Dn To Dn: $1000
0000425A  =00001000               6681  MOVEBDD EQU $1000
0000425A  =00003000               6682  MOVEWDD EQU $3000
0000425A  =00002000               6683  MOVELDD EQU $2000
0000425A                          6684  
0000425A                          6685  *An to Dn: #1008
0000425A                          6686  *MOVEBAD EQU $1008
0000425A  =00003008               6687  MOVEWAD EQU $3008
0000425A  =00002008               6688  MOVELAD EQU $2008
0000425A                          6689  *(An) to Dn: $1010
0000425A  =00001010               6690  MOVEBAID EQU $1010
0000425A  =00003010               6691  MOVEWAID EQU $3010
0000425A  =00002010               6692  MOVELAID EQU $2010
0000425A                          6693  *(An)+ to Dn: $1018
0000425A  =00001018               6694  MOVEBAPID EQU $1018
0000425A  =00003018               6695  MOVEWAPID EQU $3018
0000425A  =00002018               6696  MOVELAPID EQU $2018
0000425A                          6697  *-(An) to Dn: #1020
0000425A  =00001020               6698  MOVEBADD EQU $1020
0000425A  =00003020               6699  MOVEWADD EQU $3020
0000425A  =00002020               6700  MOVELADD EQU $2020
0000425A                          6701  *(xxx).W to Dn:
0000425A  =00001038               6702  MOVEBWRDD EQU $1038
0000425A  =00003038               6703  MOVEWWRDD EQU $3038
0000425A  =00002038               6704  MOVELWRDD EQU $2038
0000425A                          6705  *(xxx).L to Dn:
0000425A  =00001039               6706  MOVEBLNGD EQU $1039
0000425A  =00003039               6707  MOVEWLNGD EQU $3039
0000425A  =00002039               6708  MOVELLNGD EQU $2039
0000425A                          6709  *#<data> to Dn:
0000425A  =0000103C               6710  MOVEBIMD EQU $103C
0000425A  =0000303C               6711  MOVEWIMD EQU $303C
0000425A  =0000203C               6712  MOVELIMD EQU $203C
0000425A                          6713  *Dn To (An): $1080
0000425A  =00001080               6714  MOVEBDAI EQU $1080
0000425A  =00003080               6715  MOVEWDAI EQU $3080
0000425A  =00002080               6716  MOVELDAI EQU $2080
0000425A                          6717  *An to (An):
0000425A  =00001088               6718  MOVEBAAI EQU $1088
0000425A  =00003088               6719  MOVEWAAI EQU $3088
0000425A  =00002088               6720  MOVELAAI EQU $2088
0000425A                          6721  *(An) to (An):
0000425A  =00001048               6722  MOVEBAI EQU $1048
0000425A  =00003048               6723  MOVEWAI EQU $3048
0000425A  =00002048               6724  MOVELAI EQU $2048
0000425A                          6725  *(An)+ to (An):
0000425A  =00001058               6726  MOVEBAPAI EQU $1058
0000425A  =00003058               6727  MOVEWAPAI EQU $3058
0000425A  =00002058               6728  MOVELAPAI EQU $2058
0000425A                          6729  *-(An) to (An):
0000425A  =00001060               6730  MOVEBADAI EQU $1060
0000425A  =00003060               6731  MOVEWADAI EQU $3060
0000425A  =00002060               6732  MOVELADAI EQU $2060
0000425A                          6733  *(xxx).W to (An):
0000425A  =000010B8               6734  MOVEBWAI EQU $10B8
0000425A  =000030B8               6735  MOVEWWAI EQU $30B8
0000425A  =000020B8               6736  MOVELWAI EQU $20B8
0000425A                          6737  *(xxx).L to (An):
0000425A  =000010B9               6738  MOVEBLAI EQU $10B9
0000425A  =000030B9               6739  MOVEWLAI EQU $30B9
0000425A  =000020B9               6740  MOVELLAI EQU $20B9
0000425A                          6741  *#<data> to (An):
0000425A  =000010BC               6742  MOVEBIAI EQU $10BC
0000425A  =000030BC               6743  MOVEWIAI EQU $30BC
0000425A  =000020BC               6744  MOVELIAI EQU $20BC
0000425A                          6745  *Dn To (An)+:10C0
0000425A  =000010C0               6746  MOVEBDAP EQU $10C0
0000425A  =000030C0               6747  MOVEWDAP EQU $30C0
0000425A  =000020C0               6748  MOVELDAP EQU $20C0
0000425A                          6749  *An to (An)+:$10C8
0000425A  =000010C8               6750  MOVEBAAP EQU $10C8
0000425A  =000030C8               6751  MOVEWAAP EQU $30C8
0000425A  =000020C8               6752  MOVELAAP EQU $20C8
0000425A                          6753  *(An) to (An)+:
0000425A  =000010D0               6754  MOVEBAIAP EQU $10D0
0000425A  =000030D0               6755  MOVEWAIAP EQU $30D0
0000425A  =000020D0               6756  MOVELAIAP EQU $20D0
0000425A                          6757  *(An)+ to (An)+:
0000425A  =000010D8               6758  MOVEBAPAP EQU $10D8
0000425A  =000030D8               6759  MOVEWAPAP EQU $30D8
0000425A  =000020D8               6760  MOVELAPAP EQU $20D8
0000425A                          6761  *-(An) to (An)+: 
0000425A  =000010E0               6762  MOVEBADAP EQU $10E0
0000425A  =000030E0               6763  MOVEWADAP EQU $30E0
0000425A  =000020E0               6764  MOVELADAP EQU $20E0
0000425A                          6765  *(xxx).W to (An)+:
0000425A  =000010F8               6766  MOVEBWAP EQU $10F8
0000425A  =000030F8               6767  MOVEWWAP EQU $30F8
0000425A  =000020F8               6768  MOVELWAP EQU $20F8
0000425A                          6769  *(xxx).L to (An)+:
0000425A  =000010F9               6770  MOVEBLAP EQU $10F9
0000425A  =000030F9               6771  MOVEWLAP EQU $30F9
0000425A  =000020F9               6772  MOVELLAP EQU $20F9
0000425A                          6773  *#<data> to (An)+:
0000425A  =000010FC               6774  MOVEBIAP EQU $10FC
0000425A  =000030FC               6775  MOVEWIAP EQU $30FC
0000425A  =000020FC               6776  MOVELIAP EQU $20FC
0000425A                          6777  
0000425A                          6778  *Dn To -(An): 
0000425A  =00001100               6779  MOVEBDAD EQU $1100
0000425A  =00003100               6780  MOVEWDAD EQU $3100
0000425A  =00002100               6781  MOVELDAD EQU $2100
0000425A                          6782  *An to -(An): $1108
0000425A  =00001108               6783  MOVEBAAD EQU $1108
0000425A  =00003108               6784  MOVEWAAD EQU $3108
0000425A  =00002108               6785  MOVELAAD EQU $2108
0000425A                          6786  *(An) to -(An):
0000425A  =00001110               6787  MOVEBAIAD EQU $1110
0000425A  =00003110               6788  MOVEWAIAD EQU $3110
0000425A  =00002110               6789  MOVELAIAD EQU $2110
0000425A                          6790  
0000425A                          6791  *(An)+ to -(An): $1098
0000425A  =00001098               6792  MOVEBAPAD EQU $1098
0000425A  =00003098               6793  MOVEWAPAD EQU $3098
0000425A  =00002098               6794  MOVELAPAD EQU $2098
0000425A                          6795  *-(An) to -(An): $10A0
0000425A  =000010A0               6796  MOVEBADAD EQU $10A0
0000425A  =000030A0               6797  MOVEWADAD EQU $30A0
0000425A  =000020A0               6798  MOVELADAD EQU $20A0
0000425A                          6799  *(xxx).W to -(An):
0000425A  =000010F8               6800  MOVEBWAD EQU $10F8
0000425A  =000030F8               6801  MOVEWWAD EQU $30F8
0000425A  =000020F8               6802  MOVELWAD EQU $20F8
0000425A                          6803  *(xxx).L to -(An):
0000425A  =000010F9               6804  MOVEBLAD EQU $10F9
0000425A  =000030F9               6805  MOVEWLAD EQU $30F9
0000425A  =000020F9               6806  MOVELLAD EQU $20F9
0000425A                          6807  *#<data> to -(An):
0000425A  =0000113C               6808  MOVEBIAD EQU $113C
0000425A  =0000313C               6809  MOVEWIAD EQU $313C
0000425A  =0000213C               6810  MOVELIAD EQU $213C
0000425A                          6811  *Dn To (xxx).W:$11C0
0000425A  =000011C0               6812  MOVEBDWRD EQU $11C0
0000425A  =000031C0               6813  MOVEWDWRD EQU $31C0
0000425A  =000021C0               6814  MOVELDWRD EQU $21C0
0000425A                          6815  *An to (xxx).W:
0000425A  =00001068               6816  MOVEBAW EQU $1068
0000425A  =00003068               6817  MOVEWAW EQU $3068
0000425A  =00002068               6818  MOVELAW EQU $2068
0000425A                          6819  *(An) to (xxx).W:
0000425A  =000010A8               6820  MOVEBAIW EQU $10A8
0000425A  =000030A8               6821  MOVEWAIW EQU $30A8
0000425A  =000020A8               6822  MOVELAIW EQU $20A8
0000425A                          6823  *(An)+ to (xxx).W:
0000425A  =000010E8               6824  MOVEBAPW EQU $10E8
0000425A  =000030E8               6825  MOVEWAPW EQU $30E8
0000425A  =000020E8               6826  MOVELAPW EQU $20E8
0000425A                          6827  *-(An) to (xxx).W:
0000425A  =00001128               6828  MOVEBADW EQU $1128
0000425A  =00003128               6829  MOVEWADW EQU $3128
0000425A  =00002128               6830  MOVELADW EQU $2128
0000425A                          6831  *(xxx).W to (xxx).W:
0000425A  =000011F8               6832  MOVEBW EQU $11F8
0000425A  =000031F8               6833  MOVEWW EQU $31F8
0000425A  =000021F8               6834  MOVELW EQU $21F8
0000425A                          6835  *(xxx).L to (xxx).W:
0000425A  =000011F9               6836  MOVEBLW EQU $11F9
0000425A  =000031F9               6837  MOVEWLW EQU $31F9
0000425A  =000021F9               6838  MOVELLW EQU $21F9
0000425A                          6839  
0000425A                          6840  *#<data> to (xxx).W:
0000425A  =000011FC               6841  MOVEBIW EQU $11FC
0000425A  =000031FC               6842  MOVEWIW EQU $31FC
0000425A  =000021FC               6843  MOVELIW EQU $21FC
0000425A                          6844  
0000425A                          6845  *Dn To (xxx).L:$13C0
0000425A  =000013C0               6846  MOVEBDLNG EQU $13C0
0000425A  =000033C0               6847  MOVEWDLNG EQU $33C0
0000425A  =000023C0               6848  MOVELDLNG EQU $23C0
0000425A                          6849  *An to (xxx).L:
0000425A  =000013C8               6850  MOVEBAL EQU $13C8
0000425A  =000033C8               6851  MOVEWAL EQU $33C8
0000425A  =000023C8               6852  MOVELAL EQU $23C8
0000425A                          6853  *(An) to (xxx).L:
0000425A  =000013D0               6854  MOVEBAIL EQU $13D0
0000425A  =000033D0               6855  MOVEWAIL EQU $33D0
0000425A  =000023D0               6856  MOVELAIL EQU $23D0
0000425A                          6857  *(An)+ to (xxx).L:
0000425A  =000013D8               6858  MOVEBAPL EQU $13D8
0000425A  =000033D8               6859  MOVEWAPL EQU $33D8
0000425A  =000023D8               6860  MOVELAPL EQU $23D8
0000425A                          6861  *-(An) to (xxx).L:
0000425A  =000013E0               6862  MOVEBADL EQU $13E0
0000425A  =000033E0               6863  MOVEWADL EQU $33E0
0000425A  =000023E0               6864  MOVELADL EQU $23E0
0000425A                          6865  *(xxx).W to (xxx).L:
0000425A  =000013F8               6866  MOVEBWL EQU $13F8
0000425A  =000033F8               6867  MOVEWWL EQU $33F8
0000425A  =000023F8               6868  MOVELWL EQU $23F8
0000425A                          6869  *(xxx).L to (xxx).L
0000425A  =000013F9               6870  MOVEBLL EQU $13F9
0000425A  =000033F9               6871  MOVEWLL EQU $33F9
0000425A  =000023F9               6872  MOVELLL EQU $23F9
0000425A                          6873  *#<data> to (xxx).L:
0000425A  =000013FC               6874  MOVEBIL EQU $13FC
0000425A  =000033FC               6875  MOVEWIL EQU $33FC
0000425A  =000023FC               6876  MOVELIL EQU $23FC
0000425A                          6877  
0000425A                          6878  
0000425A                          6879  
0000425A                          6880  *---------------- MOVE-A Variants-------------*
0000425A  =00000040               6881  GENERAL_MOVEA EQU $0040
0000425A  =0000C1C0               6882  GENERAL_MOVEA_MASK EQU $C1C0
0000425A                          6883  
0000425A  =0000F1C0               6884  MOVEAMASK EQU $F1C0
0000425A                          6885  *Data reg to Addr*
0000425A  =00003040               6886  MOVEAWD EQU $3040
0000425A  =00002040               6887  MOVEALD  EQU $2040
0000425A                          6888  *Addr to Addr*
0000425A  =00003048               6889  MOVEAWA EQU $3048
0000425A  =00002048               6890  MOVEALA  EQU $2048
0000425A                          6891  *Addr indirect to Addr*
0000425A  =00003050               6892  MOVEAWAI EQU $3050
0000425A  =00002050               6893  MOVEALAU  EQU $2050
0000425A                          6894  *Addr post increment to Addr*
0000425A  =00003058               6895  MOVEAWPA EQU $3058
0000425A  =00002058               6896  MOVEALPA  EQU $2058
0000425A                          6897  *Addr pre decrement to Addr*
0000425A  =00003060               6898  MOVEAWDA EQU $3060
0000425A  =00002060               6899  MOVEALDA  EQU $2060
0000425A                          6900  *long addr to Addr*
0000425A  =00003079               6901  MOVEAWLA EQU $3079
0000425A  =00002079               6902  MOVEALLA  EQU $2079
0000425A                          6903  *word addr to Addr*
0000425A  =00003078               6904  MOVEAWWA EQU $3078
0000425A  =00002078               6905  MOVEALWA  EQU $2078
0000425A                          6906  *immidiate to addr*
0000425A  =0003079C               6907  MOVEAWIA EQU $3079C
0000425A  =0000207C               6908  MOVEALIA  EQU $207C
0000425A                          6909  
0000425A                          6910  *--------------ADD VARIANTS---------------*
0000425A  =0000D000               6911  GENERAL_ADD_ADDA EQU $D000
0000425A  =0000F000               6912  GENERAL_ADD_ADDA_MASK EQU $F000
0000425A                          6913  
0000425A  =0000F1F8               6914  ADDMASK EQU $F1F8
0000425A                          6915  *Dn To Dn: 
0000425A  =0000D000               6916  ADDBDD EQU $D000
0000425A  =0000D040               6917  ADDWDD EQU $D040
0000425A  =0000D080               6918  ADDLDD EQU $D080
0000425A                          6919  *An to Dn:  
0000425A  =0000D048               6920  ADDWAD EQU $D048
0000425A  =0000D088               6921  ADDLAD EQU $D088
0000425A                          6922  *(An) to Dn:
0000425A  =0000D010               6923  ADDBAID EQU $D010
0000425A  =0000D050               6924  ADDWAID EQU $D050
0000425A  =0000D080               6925  ADDLAID EQU $D080
0000425A                          6926  *(An)+ to Dn: 
0000425A  =0000D018               6927  ADDBAPD EQU $D018
0000425A  =0000D058               6928  ADDWAPD EQU $D058
0000425A  =0000D088               6929  ADDLAPD EQU $D088
0000425A                          6930  *-(An) to Dn: 
0000425A  =0000D020               6931  ADDBADD EQU $D020
0000425A  =0000D060               6932  ADDWADD EQU $D060
0000425A  =0000D0A0               6933  ADDLADD EQU $D0A0
0000425A                          6934  *(xxx).W to Dn:
0000425A  =0000D038               6935  ADDBWD EQU $D038
0000425A  =0000D078               6936  ADDWWD EQU $D078
0000425A  =0000D0B8               6937  ADDLWD EQU $D0B8
0000425A                          6938  *(xxx).L to Dn:
0000425A  =0000D039               6939  ADDBLD EQU $D039
0000425A  =0000D079               6940  ADDWLD EQU $D079
0000425A  =0000D0B9               6941  ADDLLD EQU $D0B9
0000425A                          6942  *#<data> to Dn:
0000425A  =0000D03C               6943  ADDBID EQU $D03C
0000425A  =0000D07C               6944  ADDWID EQU $D07C
0000425A  =0000D0BC               6945  ADDLID EQU $D0BC
0000425A                          6946  
0000425A                          6947  
0000425A                          6948  *Dn to An
0000425A  =0000D108               6949  ADDBDA EQU $D108
0000425A  =0000D148               6950  ADDWDA EQU $D148
0000425A  =0000D188               6951  ADDLDA EQU $D188
0000425A                          6952  
0000425A                          6953  *Dn To (An):
0000425A  =0000D110               6954  ADDBDAI EQU $D110
0000425A  =0000D150               6955  ADDWDAI EQU $D150
0000425A  =0000D190               6956  ADDLDAI EQU $D190
0000425A                          6957   
0000425A                          6958  
0000425A                          6959  *Dn To (An)+:
0000425A  =0000D118               6960  ADDBDAP EQU $D118
0000425A  =0000D158               6961  ADDWDAP EQU $D158
0000425A  =0000D198               6962  ADDLDAP EQU $D198
0000425A                          6963  *Dn To -(An):
0000425A  =0000D120               6964  ADDBDAD EQU $D120
0000425A  =0000D160               6965  ADDWDAD EQU $D160
0000425A  =0000D1A0               6966  ADDLDAD EQU $D1A0
0000425A                          6967  *Dn To (xxx).W:
0000425A  =0000D138               6968  ADDBDW EQU $D138
0000425A  =0000D178               6969  ADDWDW EQU $D178
0000425A  =0000D1B8               6970  ADDLDW EQU $D1B8
0000425A                          6971  *Dn To (xxx).L:
0000425A  =0000D139               6972  ADDBDL EQU $D139
0000425A  =0000D179               6973  ADDWDL EQU $D179
0000425A  =0000D1B9               6974  ADDLDL EQU $D1B9
0000425A                          6975  
0000425A                          6976  
0000425A                          6977  
0000425A                          6978  *--------------ADDA VARIANTS---------------*
0000425A                          6979  *D to A*
0000425A  =0000F1F8               6980  ADDAMASK EQU $F1F8
0000425A  =0000D0C0               6981  ADDAWDA EQU $D0C0
0000425A  =0000D1C0               6982  ADDALDA  EQU  $D1C0
0000425A                          6983  *A to A*
0000425A  =0000D0C8               6984  ADDWA EQU $D0C8
0000425A  =0000D1C8               6985  ADDLA  EQU  $D1C8
0000425A                          6986  *(A) to A*
0000425A  =0000D0D0               6987  ADDWIA EQU $D0D0
0000425A  =0000D1D0               6988  ADDLIA  EQU  $D1D0
0000425A                          6989  *(A)+ to A*
0000425A  =0000D0D8               6990  ADDWPA EQU $D0D8
0000425A  =0000D1D8               6991  ADDLPA  EQU  $D1D8
0000425A                          6992  *-(A) to A*
0000425A  =0000D0E0               6993  ADDWDEA EQU $D0E0
0000425A  =0000D1E0               6994  ADDLDEA  EQU  $D1E0
0000425A                          6995  
0000425A                          6996  *--------------ADDQ VARIANTS---------------*
0000425A  =00005000               6997  GENERAL_ADDQ EQU $5000
0000425A  =0000F100               6998  GENERAL_ADDQ_MASK EQU $F100
0000425A                          6999  
0000425A                          7000  *only valud for immidiate data to a location*
0000425A  =0000F038               7001  ADDQMASK EQU $F038
0000425A  =00000007               7002  ADDQDEST EQU $7
0000425A  =00000E00               7003  ADDQVALUE EQU $E00
0000425A                          7004  *Dn*
0000425A  =00005000               7005  ADDQBD EQU  $5000
0000425A  =00005040               7006  ADDQWD EQU $5040
0000425A  =000050C0               7007  ADDQLD EQU  $50C0
0000425A                          7008  *An*
0000425A  =00005008               7009  ADDQBA EQU  $5008
0000425A  =00005048               7010  ADDQWA EQU $5048
0000425A  =000050C8               7011  ADDQLA EQU  $50C8
0000425A                          7012  *(An)*
0000425A  =00005010               7013  ADDQBAI EQU  $5010
0000425A  =00005050               7014  ADDQWAI EQU $5050
0000425A  =00005090               7015  ADDQLAI EQU  $5090
0000425A                          7016  *(An)+*
0000425A  =00005018               7017  ADDQBAPI EQU  $5018
0000425A  =00005058               7018  ADDQWAPI EQU $5058
0000425A  =00005098               7019  ADDQLAPI EQU  $5098
0000425A                          7020  *-(An)*
0000425A  =00005018               7021  ADDQBAPD EQU  $5018
0000425A  =00005060               7022  ADDQWAPD EQU $5060
0000425A  =00005048               7023  ADDQLAPD EQU  $5048
0000425A                          7024  *WORD*
0000425A  =00005038               7025  ADDQBW EQU  $5038
0000425A  =00005078               7026  ADDQWW EQU $5078
0000425A  =000050B8               7027  ADDQLW EQU  $50B8
0000425A                          7028  *LONG*
0000425A  =00005039               7029  ADDQBL EQU  $5039
0000425A  =00005079               7030  ADDQWL EQU $5079
0000425A  =000050B9               7031  ADDQLL EQU  $50B9
0000425A                          7032  
0000425A                          7033  
0000425A                          7034  *--------------MOVEQ VARIANTS---------------*
0000425A                          7035  *only works with data registers and longs *
0000425A  =00007000               7036  MOVEQ_V EQU $7000
0000425A  =00000E00               7037  MOVEQ_R EQU $E00
0000425A  =000000FF               7038  MOVEQ_D EQU $FF
0000425A                          7039  
0000425A                          7040  *--------------------SUB VARIANTS-----------------------------*
0000425A  =00009000               7041  GENERAL_SUB EQU $9000
0000425A  =0000F000               7042  GENERAL_SUB_MASK EQU $F000
0000425A                          7043  
0000425A  =0000F1F8               7044  SUBMASK EQU $F1F8
0000425A                          7045  *D - D*
0000425A  =00009000               7046  SUBBDD EQU $9000
0000425A  =00009040               7047  SUBWDD EQU $9040
0000425A  =00009080               7048  SUBLDD EQU $9080
0000425A                          7049  *D-A: NOT VALID FOR BYTE DATA*
0000425A  =00009048               7050  SUBWDA EQU $9048
0000425A  =00009088               7051  SUBLDA EQU $9088
0000425A                          7052  *D-(A)*
0000425A  =00009010               7053  SUBBDAI EQU $9010
0000425A  =00009050               7054  SUBWDAI EQU $9050
0000425A  =00009090               7055  SUBLDAI EQU $9090
0000425A                          7056  *D-(A)+*
0000425A  =00009010               7057  SUBBDAP EQU $9010
0000425A  =00009058               7058  SUBWDAP EQU $9058
0000425A  =00009098               7059  SUBLDAP EQU $9098
0000425A                          7060  *D- -(A)*
0000425A  =00009020               7061  SUBBDAD EQU $9020
0000425A  =00009060               7062  SUBWDAD EQU $9060
0000425A  =000090A0               7063  SUBLDAD EQU $90A0
0000425A                          7064  *D- WORD*
0000425A  =00009038               7065  SUBBDW EQU $9038
0000425A  =00009078               7066  SUBWDW EQU $9078
0000425A  =000090B8               7067  SUBLDW EQU $90B8
0000425A                          7068  *D - LONG*
0000425A  =00009039               7069  SUBBDL EQU $9039
0000425A  =00009079               7070  SUBWDL EQU $9079
0000425A  =000090B9               7071  SUBLDL EQU $90B9
0000425A                          7072  * D - IMMIDIATE*
0000425A  =0000903C               7073  SUBBDI EQU $903C
0000425A  =0000907C               7074  SUBWDI EQU $907C
0000425A  =000090BC               7075  SUBLDI EQU $90BC
0000425A                          7076  *(A) - D*
0000425A  =00009110               7077  SUBBAD EQU $9110
0000425A  =00009150               7078  SUBWAD EQU $9150
0000425A  =00009190               7079  SUBLAD EQU $9190
0000425A                          7080  
0000425A                          7081  *(A)+ -D*
0000425A  =00009118               7082  SUBBAPD EQU $9118
0000425A  =00009158               7083  SUBWAPD EQU $9158
0000425A  =00009198               7084  SUBLAPD EQU $9198
0000425A                          7085  
0000425A                          7086  *-(A) - D*
0000425A  =00009120               7087  SUBBADD EQU $9120
0000425A  =00009160               7088  SUBWADD EQU $9160
0000425A  =000091A0               7089  SUBLADD EQU $91A0
0000425A                          7090  
0000425A                          7091  *WORD - D*
0000425A  =00009138               7092  SUBBWD EQU $9138
0000425A  =00009178               7093  SUBWWD EQU $9178
0000425A  =000091B8               7094  SUBLWD EQU $91B8
0000425A                          7095  
0000425A                          7096  *LONG - D*
0000425A  =00009139               7097  SUBBLD EQU $9139
0000425A  =00009179               7098  SUBWLD EQU $9179
0000425A  =000091B9               7099  SUBLLD EQU $91B9
0000425A                          7100  
0000425A                          7101  
0000425A                          7102  
0000425A                          7103  *---------------- AND Variants-------------*
0000425A  =0000C000               7104  GENERAL_AND EQU $C000
0000425A  =0000F000               7105  GENERAL_AND_MASK EQU $F000
0000425A                          7106  
0000425A  =0000F1F8               7107  ANDORMASK EQU $F1F8     *This can be used for AND and OR
0000425A                          7108  
0000425A  =0000F1FF               7109  ANDORWLIMASK EQU $F1FF *This can be used for AND and OR
0000425A                          7110  
0000425A                          7111  *Dn -> Dn
0000425A  =0000C000               7112  ANDBDD EQU $C000
0000425A  =0000C040               7113  ANDWDD EQU $C040
0000425A  =0000C080               7114  ANDLDD EQU $C080
0000425A                          7115  
0000425A                          7116  *(An) -> Dn
0000425A  =0000C010               7117  ANDBAID EQU $C010
0000425A  =0000C050               7118  ANDWAID EQU $C050
0000425A  =0000C090               7119  ANDLAID EQU $C090
0000425A                          7120  
0000425A                          7121  *(An)+ -> Dn
0000425A  =0000C018               7122  ANDBAPID EQU $C018
0000425A  =0000C058               7123  ANDWAPID EQU $C058
0000425A  =0000C098               7124  ANDLAPID EQU $C098
0000425A                          7125  
0000425A                          7126  *-(An) -> Dn
0000425A  =0000C020               7127  ANDBAPDD EQU $C020
0000425A  =0000C060               7128  ANDWAPDD EQU $C060
0000425A  =0000C0A0               7129  ANDLAPDD EQU $C0A0
0000425A                          7130  
0000425A                          7131  *(xxx).W -> Dn
0000425A  =0000C038               7132  ANDBWAD EQU $C038
0000425A  =0000C078               7133  ANDWWAD EQU $C078
0000425A  =0000C0B8               7134  ANDLWAD EQU $C0B8
0000425A                          7135  
0000425A                          7136  *(xxx).L -> Dn
0000425A  =0000C039               7137  ANDBLAD EQU $C039
0000425A  =0000C079               7138  ANDWLAD EQU $C079
0000425A  =0000C0B9               7139  ANDLLAD EQU $C0B9
0000425A                          7140  
0000425A                          7141  *#<Data> -> Dn
0000425A  =0000C03C               7142  ANDBDAD EQU $C03C
0000425A  =0000C07C               7143  ANDWDAD EQU $C07C
0000425A  =0000C0BC               7144  ANDLDAD EQU $C0BC
0000425A                          7145  
0000425A                          7146  *Dn -> (An)
0000425A  =0000C110               7147  ANDBDAI EQU $C110
0000425A  =0000C150               7148  ANDWDAI EQU $C150
0000425A  =0000C190               7149  ANDLDAI EQU $C190
0000425A                          7150  
0000425A                          7151  *Dn -> (An)+
0000425A  =0000C118               7152  ANDBDAPI EQU $C118
0000425A  =0000C158               7153  ANDWDAPI EQU $C158
0000425A  =0000C198               7154  ANDLDAPI EQU $C198
0000425A                          7155  
0000425A                          7156  *Dn -> -(An)
0000425A  =0000C120               7157  ANDBDAPD EQU $C120
0000425A  =0000C160               7158  ANDWDAPD EQU $C160
0000425A  =0000C1A0               7159  ANDLDAPD EQU $C1A0
0000425A                          7160  
0000425A                          7161  *Dn -> (xxx).W
0000425A  =0000C138               7162  ANDBDWA EQU $C138
0000425A  =0000C178               7163  ANDWDWA EQU $C178
0000425A  =0000C1B8               7164  ANDLDWA EQU $C1B8
0000425A                          7165  
0000425A                          7166  *Dn -> (xxx).L
0000425A  =0000C139               7167  ANDBDLA EQU $C139
0000425A  =0000C179               7168  ANDWDLA EQU $C179
0000425A  =0000C1B9               7169  ANDLDLA EQU $C1B9
0000425A                          7170  
0000425A                          7171  *-------------OR VARIANTS---------------*
0000425A  =00008000               7172  GENERAL_OR EQU $8000
0000425A  =0000F000               7173  GENERAL_OR_MASK EQU $F000
0000425A                          7174  
0000425A                          7175  *Dn To Dn
0000425A  =00008000               7176  ORBDD EQU $8000
0000425A  =00008040               7177  ORWDD EQU $8040
0000425A  =00008080               7178  ORLDD EQU $8080
0000425A                          7179  *(An) to Dn
0000425A  =00008010               7180  ORBAID EQU $8010
0000425A  =00008050               7181  ORWAID EQU $8050
0000425A  =00008090               7182  ORLAID EQU $8090
0000425A                          7183  *(An)+ to Dn
0000425A  =00008018               7184  ORBAPD EQU $8018
0000425A  =00008058               7185  ORWAPD EQU $8058
0000425A  =00008098               7186  ORLAPD EQU $8098
0000425A                          7187  *-(An) to Dn
0000425A  =00008020               7188  ORBADD EQU $8020
0000425A  =00008060               7189  ORWADD EQU $8060
0000425A  =000080A0               7190  ORLADD EQU $80A0
0000425A                          7191  *(xxx).W to Dn
0000425A  =00008038               7192  ORBWD EQU $8038
0000425A  =00008078               7193  ORWWD EQU $8078
0000425A  =000080B8               7194  ORLWD EQU $80B8
0000425A                          7195  *(xxx).L to Dn
0000425A  =00008039               7196  ORBLD EQU $8039
0000425A  =00008079               7197  ORWLD EQU $8079
0000425A  =000080B9               7198  ORLLD EQU $80B9
0000425A                          7199  *#<data> to Dn
0000425A  =0000803C               7200  ORBID EQU $803C
0000425A  =0000807C               7201  ORWID EQU $807C
0000425A  =000080BC               7202  ORLID EQU $80BC
0000425A                          7203  
0000425A                          7204  *Dn to (An)
0000425A  =00008110               7205  ORBDAI EQU $8110
0000425A  =00008150               7206  ORWDAI EQU $8150
0000425A  =00008190               7207  ORLDAI EQU $8190
0000425A                          7208  *Dn to (An)+
0000425A  =00008118               7209  ORBDAP EQU $8118
0000425A  =00008158               7210  ORWDAP EQU $8158
0000425A  =00008198               7211  ORLDAP EQU $8198
0000425A                          7212  *Dn to -(An)
0000425A  =00008120               7213  ORBDAD EQU $8120
0000425A  =00008160               7214  ORWDAD EQU $8160
0000425A  =000081A0               7215  ORLDAD EQU $81A0
0000425A                          7216  *Dn to (xxx).W
0000425A  =00008138               7217  ORBDW EQU $8138
0000425A  =00008178               7218  ORWDW EQU $8178
0000425A  =000081B8               7219  ORLDW EQU $81B8
0000425A                          7220  *Dn to (xxx).L
0000425A  =00008139               7221  ORBDL EQU $8139
0000425A  =00008179               7222  ORWDL EQU $8179
0000425A  =000081B9               7223  ORLDL EQU $81B9
0000425A                          7224  
0000425A                          7225  *---------------- JSR Variants-------------*
0000425A  =00004E80               7226  GENERAL_JSR EQU $4E80
0000425A  =0000FFC0               7227  GENERAL_JSR_MASK EQU $FFC0
0000425A                          7228  
0000425A                          7229  *NO SIZE*
0000425A                          7230  
0000425A  =0000FFF8               7231  JSRMASK EQU $FFF8
0000425A                          7232  
0000425A                          7233  *Addr reg indirect*
0000425A  =00004E90               7234  JSRAI EQU $4E90
0000425A                          7235  *Word addr*
0000425A  =00004EB8               7236  JSRWA EQU $4EB8
0000425A                          7237  *Long addr*
0000425A  =00004EB9               7238  JSRLA EQU $4EB9
0000425A                          7239  
0000425A                          7240  *---------------- RTS Variants-------------*
0000425A  =00004E75               7241  RTSCO EQU $4E75
0000425A                          7242  
0000425A                          7243  
0000425A                          7244  *---------------- BCC Variants-------------*
0000425A  =0000FF00               7245  BCCMASK EQU $FF00
0000425A  =00006000               7246  BRACO EQU $6000
0000425A  =00006700               7247  BEQCO EQU $6700
0000425A  =00006E00               7248  BGTCO EQU $6E00
0000425A  =00006F00               7249  BLECO EQU $6F00
0000425A                          7250  
0000425A                          7251  
0000425A  =0000FFF8               7252  RSEAMASK EQU $FFF8 *ROL, ROR, LSL, LSR, ASL, and ASR all have the same syntax when it comes to < ea > opcode
0000425A  =0000F1F8               7253  RSDIMASK EQU $F1F8 *Same as above, but for the immediate data/ data register opcode
0000425A                          7254  
0000425A  =0000FEC0               7255  GENERAL_RSEA_MASK EQU $FEC0
0000425A  =0000F018               7256  GENERAL_RSDI_MASK EQU $F018
0000425A                          7257  
0000425A                          7258  *---------------- ASL Variants--------------*
0000425A  =0000E0C0               7259  GENERAL_ASdEA EQU $E0C0
0000425A  =0000E000               7260  GENERAL_ASdDI EQU $E000
0000425A                          7261  
0000425A  =0000E1D0               7262  ASLAI EQU $E1D0
0000425A  =0000E1D8               7263  ASLPI EQU $E1D8
0000425A  =0000E1E0               7264  ASLPD EQU $E1E0
0000425A  =0000E1F8               7265  ASLWA EQU $E1F8
0000425A  =0000E1F9               7266  ASLLA EQU $E1F9
0000425A  =0000E120               7267  ASLBD EQU $E120
0000425A  =0000E160               7268  ASLWD EQU $E160
0000425A  =0000E1A0               7269  ASLLD EQU $E1A0
0000425A  =0000E100               7270  ASLBI EQU $E100
0000425A  =0000E140               7271  ASLWI EQU $E140
0000425A  =0000E180               7272  ASLLI EQU $E180
0000425A                          7273  
0000425A                          7274  *---------------- ASR Variants--------------*
0000425A  =0000E0D0               7275  ASRAI EQU $E0D0
0000425A  =0000E0D8               7276  ASRPI EQU $E0D8
0000425A  =0000E0E0               7277  ASRPD EQU $E0E0
0000425A  =0000E0F8               7278  ASRWA EQU $E0F8
0000425A  =0000E0F9               7279  ASRLA EQU $E0F9
0000425A  =0000E020               7280  ASRBD EQU $E020
0000425A  =0000E060               7281  ASRWD EQU $E060
0000425A  =0000E0A0               7282  ASRLD EQU $E0A0
0000425A  =0000E000               7283  ASRBI EQU $E000
0000425A  =0000E040               7284  ASRWI EQU $E040
0000425A  =0000E080               7285  ASRLI EQU $E080
0000425A                          7286  
0000425A                          7287  *--------------- LSL Variants--------------*
0000425A  =0000E2C0               7288  GENERAL_LSdEA EQU $E2C0
0000425A  =0000E008               7289  GENERAL_LSdDI EQU $E008
0000425A                          7290  
0000425A  =0000E3D0               7291  LSLAI EQU $E3D0
0000425A  =0000E3D8               7292  LSLPI EQU $E3D8
0000425A  =0000E3E0               7293  LSLPD EQU $E3E0
0000425A  =0000E3F8               7294  LSLWA EQU $E3F8
0000425A  =0000E3F9               7295  LSLLA EQU $E3F9
0000425A  =0000E128               7296  LSLBD EQU $E128
0000425A  =0000E168               7297  LSLWD EQU $E168
0000425A  =0000E1A8               7298  LSLLD EQU $E1A8
0000425A  =0000E108               7299  LSLBI EQU $E108
0000425A  =0000E148               7300  LSLWI EQU $E148
0000425A  =0000E188               7301  LSLLI EQU $E188
0000425A                          7302  
0000425A                          7303  *--------------- LSR Variants--------------*
0000425A  =0000E2D0               7304  LSRAI EQU $E2D0
0000425A  =0000E2D8               7305  LSRPI EQU $E2D8
0000425A  =0000E2E0               7306  LSRPD EQU $E2E0
0000425A  =0000E2F8               7307  LSRWA EQU $E2F8
0000425A  =0000E2F9               7308  LSRLA EQU $E2F9
0000425A  =0000E028               7309  LSRBD EQU $E028
0000425A  =0000E068               7310  LSRWD EQU $E068
0000425A  =0000E0A8               7311  LSRLD EQU $E0A8
0000425A  =0000E008               7312  LSRBI EQU $E008
0000425A  =0000E048               7313  LSRWI EQU $E048
0000425A  =0000E088               7314  LSRLI EQU $E088
0000425A                          7315  
0000425A                          7316  *--------------- ROL Variants--------------*
0000425A  =0000E6C0               7317  GENERAL_ROdEA EQU $E6C0
0000425A  =0000E018               7318  GENERAL_ROdDI EQU $E018
0000425A                          7319  
0000425A  =0000E7D0               7320  ROLAI EQU $E7D0
0000425A  =0000E7D8               7321  ROLPI EQU $E7D8
0000425A  =0000E7E0               7322  ROLPD EQU $E7E0
0000425A  =0000E7F8               7323  ROLWA EQU $E7F8
0000425A  =0000E7F9               7324  ROLLA EQU $E7F9
0000425A  =0000E138               7325  ROLBD EQU $E138
0000425A  =0000E178               7326  ROLWD EQU $E178
0000425A  =0000E1B8               7327  ROLLD EQU $E1B8
0000425A  =0000E118               7328  ROLBI EQU $E118
0000425A  =0000E158               7329  ROLWI EQU $E158
0000425A  =0000E198               7330  ROLLI EQU $E198
0000425A                          7331  
0000425A                          7332  *--------------- ROR Variants--------------*
0000425A  =0000E6D0               7333  RORAI EQU $E6D0
0000425A  =0000E6D8               7334  RORPI EQU $E6D8
0000425A  =0000E6E0               7335  RORPD EQU $E6E0
0000425A  =0000E6F8               7336  RORWA EQU $E6F8
0000425A  =0000E6F9               7337  RORLA EQU $E6F9
0000425A  =0000E038               7338  RORBD EQU $E038
0000425A  =0000E078               7339  RORWD EQU $E078
0000425A  =0000E0B8               7340  RORLD EQU $E0B8
0000425A  =0000E018               7341  RORBI EQU $E018
0000425A  =0000E058               7342  RORWI EQU $E058
0000425A  =0000E098               7343  RORLI EQU $E098
0000425A                          7344  
0000425A                          7345  
0000425A                          7346  **---------------- NOT Variants-------------*
0000425A  =00004600               7347  GENERAL_NOT EQU $4600
0000425A  =0000FF00               7348  GENERAL_NOT_MASK EQU $FF00
0000425A                          7349  
0000425A  =0000FFF8               7350  NOTMASK EQU $FFF8
0000425A                          7351  *Data reg*
0000425A  =00004600               7352  NOTBDR EQU $4600
0000425A  =00004640               7353  NOTWDR EQU $4640
0000425A  =00004680               7354  NOTLDR EQU $4680
0000425A                          7355  *Addr reg indirect*
0000425A  =00004610               7356  NOTBAI EQU $4610
0000425A  =00004650               7357  NOTWAI EQU $4650
0000425A  =00004690               7358  NOTLAI EQU $4690
0000425A                          7359  *Addr reg postincrement*
0000425A  =00004618               7360  NOTBP EQU $4618
0000425A  =00004658               7361  NOTWP EQU $4658
0000425A  =00004698               7362  NOTLP EQU $4698
0000425A                          7363  *Addr reg predecrement*
0000425A  =00004620               7364  NOTBD EQU $4620
0000425A  =00004660               7365  NOTWD EQU $4660
0000425A  =000046A0               7366  NOTLD EQU $46A0
0000425A                          7367  *Word addr*
0000425A  =00004638               7368  NOTBWA EQU $4638
0000425A  =00004678               7369  NOTWWA EQU $4678
0000425A  =000046B8               7370  NOTLWA EQU $46B8
0000425A                          7371  *Long word addr*
0000425A  =00004639               7372  NOTBLA EQU $4639
0000425A  =00004679               7373  NOTWLA EQU $4679
0000425A  =000046B9               7374  NOTLLA EQU $46B9
0000425A                          7375  
0000425A                          7376  
0000425A                          7377  *---------------- LEA Variants-------------*
0000425A  =000041C0               7378  GENERAL_LEA EQU $41C0
0000425A  =0000F1C0               7379  GENERAL_LEA_MASK EQU $F1C0
0000425A                          7380  
0000425A                          7381  *LEA IS ONLY VALID FOR LONG WORD, THEREFORE DIDN'T SPECIFY IN THE CONSTANT NAME*
0000425A  =0000F1F8               7382  LEAMASK EQU $F1F8
0000425A                          7383  *ea to indirect Addr reg*
0000425A  =000041D0               7384  LEAAI EQU $41D0
0000425A                          7385  *ea to word address* 
0000425A  =000041F8               7386  LEAWA EQU $41F8
0000425A                          7387  *ea to long address* 
0000425A  =000041F9               7388  LEALA EQU $41F9
0000425A                          7389  
0000425A                          7390  
0000425A                          7391  
0000425A                          7392  
0000425A                          7393  
0000425A                          7394  
0000425A                          7395  
0000425A                          7396  
0000425A                          7397  
0000425A                          7398  *--------------- NOP Variants-------------*
0000425A  =00004E71               7399  NOPCO EQU $4E71
0000425A                          7400  
0000425A                          7401  
0000425A                          7402  
0000425A                          7403  RESTART         *copied from NEXTPAGE code
0000425A  43F9 00005FA8           7404                  LEA      ENTPAGE,A1
00004260  6100 1BEC               7405                  BSR      PRINTSTR
00004264  103C 0005               7406                  MOVE.B   #5,D0 *get a char (in this case, enter key)
00004268  4E4F                    7407                  TRAP     #15
0000426A  6100 1C04               7408                  BSR      FLUSH
0000426E                          7409                  
0000426E                          7410                  *ask user to restart
0000426E  43F9 00005FC6           7411                  LEA      STARTAGAIN,A1 
00004274  6100 1BD8               7412                  BSR      PRINTSTR
00004278  103C 0005               7413                  MOVE.B   #5,D0 *get a char (y or n)
0000427C  4E4F                    7414                  TRAP     #15
0000427E  6100 1BC8               7415                  BSR      PRINTCRLF
00004282  B23C 0079               7416                  CMP.B    #$79,D1 *y ascii value
00004286  6700 CD84               7417                  BEQ      GETADDR1
0000428A                          7418                  
0000428A  103C 0009               7419                  MOVE.B  #9,D0 *end of line.
0000428E  4E4F                    7420                  TRAP    #15 
00004290                          7421  
00004290  6100 1BB6               7422  INPUTERROR      BSR     PRINTCRLF
00004294  43F9 00006002           7423                  LEA     ERRMSG,A1
0000429A  6100 1BB2               7424                  BSR     PRINTSTR
0000429E  4EF8 100C               7425                  JMP     GETADDR1
000042A2                          7426                 
000042A2                          7427  *-------------------------------------------*
000042A2                          7428  *----------------IF DATA--------------------*
000042A2                          7429  *-------------------------------------------*
000042A2                          7430  
000042A2                          7431  *---------------- TEMPLATE-------------*
000042A2                          7432  
000042A2                          7433  *ea src
000042A2  43F9 00006002           7434  IFOPCODEEA      LEA     ERRMSG,A1
000042A8  4EF9 00005604           7435                  JMP     EASRC 
000042AE                          7436  
000042AE  43F9 00006002           7437  IFOPCODEEAXD    LEA     ERRMSG,A1
000042B4  4EF9 00005674           7438                  JMP     EASRCD    
000042BA                          7439  
000042BA  43F9 00006002           7440  IFOPCODEEAXAI   LEA     ERRMSG,A1
000042C0  4EF9 00005614           7441                  JMP     EASRCAI
000042C6                          7442  
000042C6  43F9 00006002           7443  IFOPCODEEAXPR   LEA     ERRMSG,A1
000042CC  4EF9 00005634           7444                  JMP     EASRCPR 
000042D2                          7445  
000042D2  43F9 00006002           7446  IFOPCODEEAXPO   LEA     ERRMSG,A1
000042D8  4EF9 00005654           7447                  JMP     EASRCPO 
000042DE                          7448  
000042DE                          7449  *data reg dest
000042DE  43F9 00006002           7450  IFOPCODEDXD     LEA     ERRMSG,A1
000042E4  4EF9 0000568A           7451                  JMP     DSRCDDEST                
000042EA  43F9 00006002           7452  IFOPCODEAXD     LEA     ERRMSG,A1
000042F0  4EF9 000056AA           7453                  JMP     ASRCDDEST                
000042F6  43F9 00006002           7454  IFOPCODEAIXD    LEA     ERRMSG,A1
000042FC  4EF9 000056CA           7455                  JMP     AISRCDDEST                
00004302  43F9 00006002           7456  IFOPCODEIXD     LEA     ERRMSG,A1
00004308  4EF9 000056F4           7457                  JMP     ISRCDDEST  
0000430E  43F9 00006002           7458  IFOPCODEAAXD    LEA     ERRMSG,A1
00004314  4EF9 00005714           7459                  JMP     AASRCDDEST                
0000431A  43F9 00006002           7460  IFOPCODEPRXD    LEA     ERRMSG,A1
00004320  4EF9 0000572E           7461                  JMP     PRSRCDDEST                
00004326  43F9 00006002           7462  IFOPCODEPOXD    LEA     ERRMSG,A1
0000432C  4EF9 00005758           7463                  JMP     POSRCDDEST    
00004332                          7464  
00004332                          7465  *addr reg dest
00004332  43F9 00006002           7466  IFOPCODEDXA     LEA     ERRMSG,A1
00004338  4EF9 00005782           7467                  JMP     DSRCADEST           
0000433E  43F9 00006002           7468  IFOPCODEAXA     LEA     ERRMSG,A1
00004344  4EF9 000057A2           7469                  JMP     ASRCADEST                
0000434A  43F9 00006002           7470  IFOPCODEAIXA    LEA     ERRMSG,A1
00004350  4EF9 000057C2           7471                  JMP     AISRCADEST                
00004356  43F9 00006002           7472  IFOPCODEIXA     LEA     ERRMSG,A1
0000435C  4EF9 000057EC           7473                  JMP     ISRCADEST  
00004362  43F9 00006002           7474  IFOPCODEAAXA    LEA     ERRMSG,A1
00004368  4EF9 0000580C           7475                  JMP     AASRCADEST                
0000436E  43F9 00006002           7476  IFOPCODEPRXA    LEA     ERRMSG,A1
00004374  4EF9 00005826           7477                  JMP     PRSRCADEST                
0000437A  43F9 00006002           7478  IFOPCODEPOXA    LEA     ERRMSG,A1
00004380  4EF9 00005850           7479                  JMP     POSRCADEST  
00004386                          7480  
00004386                          7481  *addr indr dest
00004386  43F9 00006002           7482  IFOPCODEDXAI    LEA     ERRMSG,A1
0000438C  4EF9 00005782           7483                  JMP     DSRCADEST                
00004392  43F9 00006002           7484  IFOPCODEAXAI    LEA     ERRMSG,A1
00004398  4EF9 000057A2           7485                  JMP     ASRCADEST                
0000439E  43F9 00006002           7486  IFOPCODEAIXAI   LEA     ERRMSG,A1
000043A4  4EF9 000057C2           7487                  JMP     AISRCADEST                
000043AA  43F9 00006002           7488  IFOPCODEIXAI    LEA     ERRMSG,A1
000043B0  4EF9 000057EC           7489                  JMP     ISRCADEST  
000043B6  43F9 00006002           7490  IFOPCODEAAXAI   LEA     ERRMSG,A1
000043BC  4EF9 0000580C           7491                  JMP     AASRCADEST               
000043C2  43F9 00006002           7492  IFOPCODEPRXAI   LEA     ERRMSG,A1
000043C8  4EF9 00005826           7493                  JMP     PRSRCADEST                
000043CE  43F9 00006002           7494  IFOPCODEPOXAI   LEA     ERRMSG,A1
000043D4  4EF9 00005850           7495                  JMP     POSRCADEST  
000043DA                          7496  
000043DA                          7497  *abs addr dest
000043DA  43F9 00006002           7498  IFOPCODEDXAA    LEA     ERRMSG,A1
000043E0  4EF9 00005ABA           7499                  JMP     DSRCAADEST                
000043E6  43F9 00006002           7500  IFOPCODEAXAA    LEA     ERRMSG,A1
000043EC  4EF9 00005AD4           7501                  JMP     ASRCAADEST                
000043F2  43F9 00006002           7502  IFOPCODEAIXAA   LEA     ERRMSG,A1
000043F8  4EF9 00005AEE           7503                  JMP     AISRCAADEST                
000043FE  43F9 00006002           7504  IFOPCODEIXAA    LEA     ERRMSG,A1
00004404  4EF9 00005B12           7505                  JMP     ISRCAADEST  
0000440A  43F9 00006002           7506  IFOPCODEAAXAA   LEA     ERRMSG,A1
00004410  4EF9 00005B2C           7507                  JMP     AASRCAADEST                
00004416  43F9 00006002           7508  IFOPCODEPRXAA   LEA     ERRMSG,A1
0000441C  4EF9 00005B40           7509                  JMP     PRSRCAADEST                
00004422  43F9 00006002           7510  IFOPCODEPOXAA   LEA     ERRMSG,A1
00004428  4EF9 00005B64           7511                  JMP     POSRCAADEST 
0000442E                          7512  
0000442E                          7513  *pre decr dest
0000442E  43F9 00006002           7514  IFOPCODEDXPR    LEA     ERRMSG,A1
00004434  4EF9 00005B88           7515                  JMP     DSRCPRDEST                
0000443A  43F9 00006002           7516  IFOPCODEAXPR    LEA     ERRMSG,A1
00004440  4EF9 00005BB2           7517                  JMP     ASRCPRDEST                
00004446  43F9 00006002           7518  IFOPCODEAIXPR   LEA     ERRMSG,A1
0000444C  4EF9 00005BDC           7519                  JMP     AISRCPRDEST                
00004452  43F9 00006002           7520  IFOPCODEIXPR    LEA     ERRMSG,A1
00004458  4EF9 00005C10           7521                  JMP     ISRCPRDEST  
0000445E  43F9 00006002           7522  IFOPCODEAAXPR   LEA     ERRMSG,A1
00004464  4EF9 00005C3A           7523                  JMP     AASRCPRDEST               
0000446A  43F9 00006002           7524  IFOPCODEPRXPR   LEA     ERRMSG,A1
00004470  4EF9 00005C5E           7525                  JMP     PRSRCPRDEST                
00004476  43F9 00006002           7526  IFOPCODEPOXPR   LEA     ERRMSG,A1
0000447C  4EF9 00005C92           7527                  JMP     POSRCPRDEST    
00004482                          7528  
00004482                          7529  *post incr dest
00004482  43F9 00006002           7530  IFOPCODEDXPO    LEA     ERRMSG,A1
00004488  4EF9 00005CC6           7531                  JMP     DSRCPODEST                
0000448E  43F9 00006002           7532  IFOPCODEAXPO    LEA     ERRMSG,A1
00004494  4EF9 00005CF0           7533                  JMP     ASRCPODEST               
0000449A  43F9 00006002           7534  IFOPCODEAIXPO   LEA     ERRMSG,A1
000044A0  4EF9 00005D1A           7535                  JMP     AISRCPODEST                
000044A6  43F9 00006002           7536  IFOPCODEIXPO    LEA     ERRMSG,A1
000044AC  4EF9 00005D4E           7537                  JMP     ISRCPODEST  
000044B2  43F9 00006002           7538  IFOPCODEAAXPO   LEA     ERRMSG,A1
000044B8  4EF9 00005D78           7539                  JMP     AASRCPODEST                
000044BE  43F9 00006002           7540  IFOPCODEPRXPO   LEA     ERRMSG,A1
000044C4  4EF9 00005D9C           7541                  JMP     PRSRCPODEST                
000044CA  43F9 00006002           7542  IFOPCODEPOXPO   LEA     ERRMSG,A1
000044D0  4EF9 00005DD0           7543                  JMP     POSRCPODEST             
000044D6                          7544  
000044D6                          7545  *---------------- MOVE Variants-------------*
000044D6                          7546    
000044D6                          7547  **MOVE.B
000044D6                          7548                  
000044D6                          7549  *data reg dest
000044D6  43F9 0000606B           7550  IFMOVEBDXD      LEA     SMOVEB,A1
000044DC  4EF9 0000568A           7551                  JMP     DSRCDDEST                
000044E2  43F9 0000606B           7552  IFMOVEBAXD      LEA     SMOVEB,A1
000044E8  4EF9 000056AA           7553                  JMP     ASRCDDEST                
000044EE  43F9 0000606B           7554  IFMOVEBAIXD     LEA     SMOVEB,A1
000044F4  4EF9 000056CA           7555                  JMP     AISRCDDEST                
000044FA  43F9 0000606B           7556  IFMOVEBIXD      LEA     SMOVEB,A1
00004500  4EF9 000056F4           7557                  JMP     ISRCDDEST  
00004506  43F9 0000606B           7558  IFMOVEBAAXD     LEA     SMOVEB,A1
0000450C  4EF9 00005714           7559                  JMP     AASRCDDEST                
00004512  43F9 0000606B           7560  IFMOVEBPRXD     LEA     SMOVEB,A1
00004518  4EF9 0000572E           7561                  JMP     PRSRCDDEST                
0000451E  43F9 0000606B           7562  IFMOVEBPOXD     LEA     SMOVEB,A1
00004524  4EF9 00005758           7563                  JMP     POSRCDDEST    
0000452A                          7564  
0000452A                          7565  *addr indr dest
0000452A  43F9 0000606B           7566  IFMOVEBDXAI    LEA     SMOVEB,A1
00004530  4EF9 00005782           7567                  JMP     DSRCADEST                
00004536  43F9 0000606B           7568  IFMOVEBAXAI    LEA     SMOVEB,A1
0000453C  4EF9 000057A2           7569                  JMP     ASRCADEST                
00004542  43F9 0000606B           7570  IFMOVEBAIXAI   LEA     SMOVEB,A1
00004548  4EF9 000057C2           7571                  JMP     AISRCADEST                
0000454E  43F9 0000606B           7572  IFMOVEBIXAI    LEA     SMOVEB,A1
00004554  4EF9 000057EC           7573                  JMP     ISRCADEST  
0000455A  43F9 0000606B           7574  IFMOVEBAAXAI   LEA     SMOVEB,A1
00004560  4EF9 0000580C           7575                  JMP     AASRCADEST               
00004566  43F9 0000606B           7576  IFMOVEBPRXAI   LEA     SMOVEB,A1
0000456C  4EF9 00005826           7577                  JMP     PRSRCADEST                
00004572  43F9 0000606B           7578  IFMOVEBPOXAI   LEA     SMOVEB,A1
00004578  4EF9 00005850           7579                  JMP     POSRCADEST 
0000457E                          7580  
0000457E                          7581  *abs addr dest
0000457E  43F9 0000606B           7582  IFMOVEBDXAA    LEA     SMOVEB,A1
00004584  4EF9 00005ABA           7583                  JMP     DSRCAADEST                
0000458A  43F9 0000606B           7584  IFMOVEBAXAA    LEA     SMOVEB,A1
00004590  4EF9 00005AD4           7585                  JMP     ASRCAADEST                
00004596  43F9 0000606B           7586  IFMOVEBAIXAA   LEA     SMOVEB,A1
0000459C  4EF9 00005AEE           7587                  JMP     AISRCAADEST                
000045A2  43F9 0000606B           7588  IFMOVEBIXAA    LEA     SMOVEB,A1
000045A8  4EF9 00005B12           7589                  JMP     ISRCAADEST  
000045AE  43F9 0000606B           7590  IFMOVEBAAXAA   LEA     SMOVEB,A1
000045B4  4EF9 00005B2C           7591                  JMP     AASRCAADEST                
000045BA  43F9 0000606B           7592  IFMOVEBPRXAA   LEA     SMOVEB,A1
000045C0  4EF9 00005B40           7593                  JMP     PRSRCAADEST                
000045C6  43F9 0000606B           7594  IFMOVEBPOXAA   LEA     SMOVEB,A1
000045CC  4EF9 00005B64           7595                  JMP     POSRCAADEST 
000045D2                          7596  
000045D2                          7597  *pre decr dest
000045D2  43F9 0000606B           7598  IFMOVEBDXPR    LEA     SMOVEB,A1
000045D8  4EF9 00005B88           7599                  JMP     DSRCPRDEST                
000045DE  43F9 0000606B           7600  IFMOVEBAXPR    LEA     SMOVEB,A1
000045E4  4EF9 00005BB2           7601                  JMP     ASRCPRDEST                
000045EA  43F9 0000606B           7602  IFMOVEBAIXPR   LEA     SMOVEB,A1
000045F0  4EF9 00005BDC           7603                  JMP     AISRCPRDEST                
000045F6  43F9 0000606B           7604  IFMOVEBIXPR    LEA     SMOVEB,A1
000045FC  4EF9 00005C10           7605                  JMP     ISRCPRDEST  
00004602  43F9 0000606B           7606  IFMOVEBAAXPR   LEA     SMOVEB,A1
00004608  4EF9 00005C3A           7607                  JMP     AASRCPRDEST               
0000460E  43F9 0000606B           7608  IFMOVEBPRXPR   LEA     SMOVEB,A1
00004614  4EF9 00005C5E           7609                  JMP     PRSRCPRDEST                
0000461A  43F9 0000606B           7610  IFMOVEBPOXPR   LEA     SMOVEB,A1
00004620  4EF9 00005C92           7611                  JMP     POSRCPRDEST    
00004626                          7612  
00004626                          7613  *post incr dest
00004626  43F9 0000606B           7614  IFMOVEBDXPO    LEA     SMOVEB,A1
0000462C  4EF9 00005CC6           7615                  JMP     DSRCPODEST                
00004632  43F9 0000606B           7616  IFMOVEBAXPO    LEA     SMOVEB,A1
00004638  4EF9 00005CF0           7617                  JMP     ASRCPODEST               
0000463E  43F9 0000606B           7618  IFMOVEBAIXPO   LEA     SMOVEB,A1
00004644  4EF9 00005D1A           7619                  JMP     AISRCPODEST                
0000464A  43F9 0000606B           7620  IFMOVEBIXPO    LEA     SMOVEB,A1
00004650  4EF9 00005D4E           7621                  JMP     ISRCPODEST  
00004656  43F9 0000606B           7622  IFMOVEBAAXPO   LEA     SMOVEB,A1
0000465C  4EF9 00005D78           7623                  JMP     AASRCPODEST                
00004662  43F9 0000606B           7624  IFMOVEBPRXPO   LEA     SMOVEB,A1
00004668  4EF9 00005D9C           7625                  JMP     PRSRCPODEST                
0000466E  43F9 0000606B           7626  IFMOVEBPOXPO   LEA     SMOVEB,A1
00004674  4EF9 00005DD0           7627                  JMP     POSRCPODEST                 
0000467A                          7628                  
0000467A                          7629  **MOVE.W
0000467A                          7630                  
0000467A                          7631  *data reg dest
0000467A  43F9 00006072           7632  IFMOVEWDXD      LEA     SMOVEW,A1
00004680  4EF9 0000568A           7633                  JMP     DSRCDDEST                
00004686  43F9 00006072           7634  IFMOVEWAXD      LEA     SMOVEW,A1
0000468C  4EF9 000056AA           7635                  JMP     ASRCDDEST                
00004692  43F9 00006072           7636  IFMOVEWAIXD     LEA     SMOVEW,A1
00004698  4EF9 000056CA           7637                  JMP     AISRCDDEST                
0000469E  43F9 00006072           7638  IFMOVEWIXD      LEA     SMOVEW,A1
000046A4  4EF9 000056F4           7639                  JMP     ISRCDDEST  
000046AA  43F9 00006072           7640  IFMOVEWAAXD     LEA     SMOVEW,A1
000046B0  4EF9 00005714           7641                  JMP     AASRCDDEST                
000046B6  43F9 00006072           7642  IFMOVEWPRXD     LEA     SMOVEW,A1
000046BC  4EF9 0000572E           7643                  JMP     PRSRCDDEST                
000046C2  43F9 00006072           7644  IFMOVEWPOXD     LEA     SMOVEW,A1
000046C8  4EF9 00005758           7645                  JMP     POSRCDDEST    
000046CE                          7646  
000046CE                          7647  *addr indr dest
000046CE  43F9 00006072           7648  IFMOVEWDXAI    LEA     SMOVEW,A1
000046D4  4EF9 00005782           7649                  JMP     DSRCADEST                
000046DA  43F9 00006072           7650  IFMOVEWAXAI    LEA     SMOVEW,A1
000046E0  4EF9 000057A2           7651                  JMP     ASRCADEST                
000046E6  43F9 00006072           7652  IFMOVEWAIXAI   LEA     SMOVEW,A1
000046EC  4EF9 000057C2           7653                  JMP     AISRCADEST                
000046F2  43F9 00006072           7654  IFMOVEWIXAI    LEA     SMOVEW,A1
000046F8  4EF9 000057EC           7655                  JMP     ISRCADEST  
000046FE  43F9 00006072           7656  IFMOVEWAAXAI   LEA     SMOVEW,A1
00004704  4EF9 0000580C           7657                  JMP     AASRCADEST               
0000470A  43F9 00006072           7658  IFMOVEWPRXAI   LEA     SMOVEW,A1
00004710  4EF9 00005826           7659                  JMP     PRSRCADEST                
00004716  43F9 00006072           7660  IFMOVEWPOXAI   LEA     SMOVEW,A1
0000471C  4EF9 00005850           7661                  JMP     POSRCADEST 
00004722                          7662  
00004722                          7663  *abs addr dest
00004722  43F9 00006072           7664  IFMOVEWDXAA    LEA     SMOVEW,A1
00004728  4EF9 00005ABA           7665                  JMP     DSRCAADEST                
0000472E  43F9 00006072           7666  IFMOVEWAXAA    LEA     SMOVEW,A1
00004734  4EF9 00005AD4           7667                  JMP     ASRCAADEST                
0000473A  43F9 00006072           7668  IFMOVEWAIXAA   LEA     SMOVEW,A1
00004740  4EF9 00005AEE           7669                  JMP     AISRCAADEST                
00004746  43F9 00006072           7670  IFMOVEWIXAA    LEA     SMOVEW,A1
0000474C  4EF9 00005B12           7671                  JMP     ISRCAADEST  
00004752  43F9 00006072           7672  IFMOVEWAAXAA   LEA     SMOVEW,A1
00004758  4EF9 00005B2C           7673                  JMP     AASRCAADEST                
0000475E  43F9 00006072           7674  IFMOVEWPRXAA   LEA     SMOVEW,A1
00004764  4EF9 00005B40           7675                  JMP     PRSRCAADEST                
0000476A  43F9 00006072           7676  IFMOVEWPOXAA   LEA     SMOVEW,A1
00004770  4EF9 00005B64           7677                  JMP     POSRCAADEST 
00004776                          7678  
00004776                          7679  *pre decr dest
00004776  43F9 00006072           7680  IFMOVEWDXPR    LEA     SMOVEW,A1
0000477C  4EF9 00005B88           7681                  JMP     DSRCPRDEST                
00004782  43F9 00006072           7682  IFMOVEWAXPR    LEA     SMOVEW,A1
00004788  4EF9 00005BB2           7683                  JMP     ASRCPRDEST                
0000478E  43F9 00006072           7684  IFMOVEWAIXPR   LEA     SMOVEW,A1
00004794  4EF9 00005BDC           7685                  JMP     AISRCPRDEST                
0000479A  43F9 00006072           7686  IFMOVEWIXPR    LEA     SMOVEW,A1
000047A0  4EF9 00005C10           7687                  JMP     ISRCPRDEST  
000047A6  43F9 00006072           7688  IFMOVEWAAXPR   LEA     SMOVEW,A1
000047AC  4EF9 00005C3A           7689                  JMP     AASRCPRDEST               
000047B2  43F9 00006072           7690  IFMOVEWPRXPR   LEA     SMOVEW,A1
000047B8  4EF9 00005C5E           7691                  JMP     PRSRCPRDEST                
000047BE  43F9 00006072           7692  IFMOVEWPOXPR   LEA     SMOVEW,A1
000047C4  4EF9 00005C92           7693                  JMP     POSRCPRDEST    
000047CA                          7694  
000047CA                          7695  *post incr dest
000047CA  43F9 00006072           7696  IFMOVEWDXPO    LEA     SMOVEW,A1
000047D0  4EF9 00005CC6           7697                  JMP     DSRCPODEST                
000047D6  43F9 00006072           7698  IFMOVEWAXPO    LEA     SMOVEW,A1
000047DC  4EF9 00005CF0           7699                  JMP     ASRCPODEST               
000047E2  43F9 00006072           7700  IFMOVEWAIXPO   LEA     SMOVEW,A1
000047E8  4EF9 00005D1A           7701                  JMP     AISRCPODEST                
000047EE  43F9 00006072           7702  IFMOVEWIXPO    LEA     SMOVEW,A1
000047F4  4EF9 00005D4E           7703                  JMP     ISRCPODEST  
000047FA  43F9 00006072           7704  IFMOVEWAAXPO   LEA     SMOVEW,A1
00004800  4EF9 00005D78           7705                  JMP     AASRCPODEST                
00004806  43F9 00006072           7706  IFMOVEWPRXPO   LEA     SMOVEW,A1
0000480C  4EF9 00005D9C           7707                  JMP     PRSRCPODEST                
00004812  43F9 00006072           7708  IFMOVEWPOXPO   LEA     SMOVEW,A1
00004818  4EF9 00005DD0           7709                  JMP     POSRCPODEST 
0000481E                          7710  
0000481E                          7711  **MOVE.L
0000481E                          7712                  
0000481E                          7713  *data reg dest
0000481E  43F9 00006079           7714  IFMOVELDXD      LEA     SMOVEL,A1
00004824  4EF9 0000568A           7715                  JMP     DSRCDDEST                
0000482A  43F9 00006079           7716  IFMOVELAXD      LEA     SMOVEL,A1
00004830  4EF9 000056AA           7717                  JMP     ASRCDDEST                
00004836  43F9 00006079           7718  IFMOVELAIXD     LEA     SMOVEL,A1
0000483C  4EF9 000056CA           7719                  JMP     AISRCDDEST                
00004842  43F9 00006079           7720  IFMOVELIXD      LEA     SMOVEL,A1
00004848  4EF9 000056F4           7721                  JMP     ISRCDDEST  
0000484E  43F9 00006079           7722  IFMOVELAAXD     LEA     SMOVEL,A1
00004854  4EF9 00005714           7723                  JMP     AASRCDDEST                
0000485A  43F9 00006079           7724  IFMOVELPRXD     LEA     SMOVEL,A1
00004860  4EF9 0000572E           7725                  JMP     PRSRCDDEST                
00004866  43F9 00006079           7726  IFMOVELPOXD     LEA     SMOVEL,A1
0000486C  4EF9 00005758           7727                  JMP     POSRCDDEST    
00004872                          7728  
00004872                          7729  *addr indr dest
00004872  43F9 00006079           7730  IFMOVELDXAI    LEA     SMOVEL,A1
00004878  4EF9 00005782           7731                  JMP     DSRCADEST                
0000487E  43F9 00006079           7732  IFMOVELAXAI    LEA     SMOVEL,A1
00004884  4EF9 000057A2           7733                  JMP     ASRCADEST                
0000488A  43F9 00006079           7734  IFMOVELAIXAI   LEA     SMOVEL,A1
00004890  4EF9 000057C2           7735                  JMP     AISRCADEST                
00004896  43F9 00006079           7736  IFMOVELIXAI    LEA     SMOVEL,A1
0000489C  4EF9 000057EC           7737                  JMP     ISRCADEST  
000048A2  43F9 00006079           7738  IFMOVELAAXAI   LEA     SMOVEL,A1
000048A8  4EF9 0000580C           7739                  JMP     AASRCADEST               
000048AE  43F9 00006079           7740  IFMOVELPRXAI   LEA     SMOVEL,A1
000048B4  4EF9 00005826           7741                  JMP     PRSRCADEST                
000048BA  43F9 00006079           7742  IFMOVELPOXAI   LEA     SMOVEL,A1
000048C0  4EF9 00005850           7743                  JMP     POSRCADEST 
000048C6                          7744  
000048C6                          7745  *abs addr dest
000048C6  43F9 00006079           7746  IFMOVELDXAA    LEA     SMOVEL,A1
000048CC  4EF9 00005ABA           7747                  JMP     DSRCAADEST                
000048D2  43F9 00006079           7748  IFMOVELAXAA    LEA     SMOVEL,A1
000048D8  4EF9 00005AD4           7749                  JMP     ASRCAADEST                
000048DE  43F9 00006079           7750  IFMOVELAIXAA   LEA     SMOVEL,A1
000048E4  4EF9 00005AEE           7751                  JMP     AISRCAADEST                
000048EA  43F9 00006079           7752  IFMOVELIXAA    LEA     SMOVEL,A1
000048F0  4EF9 00005B12           7753                  JMP     ISRCAADEST  
000048F6  43F9 00006079           7754  IFMOVELAAXAA   LEA     SMOVEL,A1
000048FC  4EF9 00005B2C           7755                  JMP     AASRCAADEST                
00004902  43F9 00006079           7756  IFMOVELPRXAA   LEA     SMOVEL,A1
00004908  4EF9 00005B40           7757                  JMP     PRSRCAADEST                
0000490E  43F9 00006079           7758  IFMOVELPOXAA   LEA     SMOVEL,A1
00004914  4EF9 00005B64           7759                  JMP     POSRCAADEST 
0000491A                          7760  
0000491A                          7761  *pre decr dest
0000491A  43F9 00006079           7762  IFMOVELDXPR    LEA     SMOVEL,A1
00004920  4EF9 00005B88           7763                  JMP     DSRCPRDEST                
00004926  43F9 00006079           7764  IFMOVELAXPR    LEA     SMOVEL,A1
0000492C  4EF9 00005BB2           7765                  JMP     ASRCPRDEST                
00004932  43F9 00006079           7766  IFMOVELAIXPR   LEA     SMOVEL,A1
00004938  4EF9 00005BDC           7767                  JMP     AISRCPRDEST                
0000493E  43F9 00006079           7768  IFMOVELIXPR    LEA     SMOVEL,A1
00004944  4EF9 00005C10           7769                  JMP     ISRCPRDEST  
0000494A  43F9 00006079           7770  IFMOVELAAXPR   LEA     SMOVEL,A1
00004950  4EF9 00005C3A           7771                  JMP     AASRCPRDEST               
00004956  43F9 00006079           7772  IFMOVELPRXPR   LEA     SMOVEL,A1
0000495C  4EF9 00005C5E           7773                  JMP     PRSRCPRDEST                
00004962  43F9 00006079           7774  IFMOVELPOXPR   LEA     SMOVEL,A1
00004968  4EF9 00005C92           7775                  JMP     POSRCPRDEST    
0000496E                          7776  
0000496E                          7777  *post incr dest
0000496E  43F9 00006079           7778  IFMOVELDXPO    LEA     SMOVEL,A1
00004974  4EF9 00005CC6           7779                  JMP     DSRCPODEST                
0000497A  43F9 00006079           7780  IFMOVELAXPO    LEA     SMOVEL,A1
00004980  4EF9 00005CF0           7781                  JMP     ASRCPODEST               
00004986  43F9 00006079           7782  IFMOVELAIXPO   LEA     SMOVEL,A1
0000498C  4EF9 00005D1A           7783                  JMP     AISRCPODEST                
00004992  43F9 00006079           7784  IFMOVELIXPO    LEA     SMOVEL,A1
00004998  4EF9 00005D4E           7785                  JMP     ISRCPODEST  
0000499E  43F9 00006079           7786  IFMOVELAAXPO   LEA     SMOVEL,A1
000049A4  4EF9 00005D78           7787                  JMP     AASRCPODEST                
000049AA  43F9 00006079           7788  IFMOVELPRXPO   LEA     SMOVEL,A1
000049B0  4EF9 00005D9C           7789                  JMP     PRSRCPODEST                
000049B6  43F9 00006079           7790  IFMOVELPOXPO   LEA     SMOVEL,A1
000049BC  4EF9 00005DD0           7791                  JMP     POSRCPODEST   
000049C2                          7792                 
000049C2                          7793  *---------------- NOP Variants-------------*                
000049C2  43F9 00006067           7794  IFNOP           LEA     SNOP,A1
000049C8  6100 1484               7795                  BSR     PRINTSTR
000049CC  6100 147A               7796                  BSR     PRINTCRLF
000049D0  4EF8 1132               7797                  JMP     CONTINUE
000049D4                          7798  
000049D4                          7799  *---------------- MOVEA Variants-------------*
000049D4                          7800  **MOVEAW
000049D4                          7801  *addr reg dest
000049D4  43F9 00006080           7802  IFMOVEAWDXA     LEA     SMOVEAW,A1
000049DA  4EF9 00005782           7803                  JMP     DSRCADEST           
000049E0  43F9 00006080           7804  IFMOVEAWAXA     LEA     SMOVEAW,A1
000049E6  4EF9 000057A2           7805                  JMP     ASRCADEST                
000049EC  43F9 00006080           7806  IFMOVEAWAIXA    LEA     SMOVEAW,A1
000049F2  4EF9 000057C2           7807                  JMP     AISRCADEST                
000049F8  43F9 00006080           7808  IFMOVEAWIXA     LEA     SMOVEAW,A1
000049FE  4EF9 000057EC           7809                  JMP     ISRCADEST  
00004A04  43F9 00006080           7810  IFMOVEAWAAXA    LEA     SMOVEAW,A1
00004A0A  4EF9 0000580C           7811                  JMP     AASRCADEST                
00004A10  43F9 00006080           7812  IFMOVEAWPRXA    LEA     SMOVEAW,A1
00004A16  4EF9 00005826           7813                  JMP     PRSRCADEST                
00004A1C  43F9 00006080           7814  IFMOVEAWPOXA    LEA     SMOVEAW,A1
00004A22  4EF9 00005850           7815                  JMP     POSRCADEST 
00004A28                          7816  
00004A28                          7817  **MOVEAL
00004A28                          7818  *addr reg dest
00004A28  43F9 00006088           7819  IFMOVEALDXA     LEA     SMOVEAL,A1
00004A2E  4EF9 00005782           7820                  JMP     DSRCADEST           
00004A34  43F9 00006088           7821  IFMOVEALAXA     LEA     SMOVEAL,A1
00004A3A  4EF9 000057A2           7822                  JMP     ASRCADEST                
00004A40  43F9 00006088           7823  IFMOVEALAIXA    LEA     SMOVEAL,A1
00004A46  4EF9 000057C2           7824                  JMP     AISRCADEST                
00004A4C  43F9 00006088           7825  IFMOVEALIXA     LEA     SMOVEAL,A1
00004A52  4EF9 000057EC           7826                  JMP     ISRCADEST  
00004A58  43F9 00006088           7827  IFMOVEALAAXA    LEA     SMOVEAL,A1
00004A5E  4EF9 0000580C           7828                  JMP     AASRCADEST                
00004A64  43F9 00006088           7829  IFMOVEALPRXA    LEA     SMOVEAL,A1
00004A6A  4EF9 00005826           7830                  JMP     PRSRCADEST                
00004A70  43F9 00006088           7831  IFMOVEALPOXA    LEA     SMOVEAL,A1
00004A76  4EF9 00005850           7832                  JMP     POSRCADEST 
00004A7C                          7833  
00004A7C                          7834  *--------------MOVEQ VARIANTS----------------*
00004A7C  43F9 00006090           7835  IFMOVEQIXD      LEA     SMOVEQ,A1
00004A82  4EF9 000056F4           7836                  JMP     ISRCDDEST 
00004A88                          7837  
00004A88                          7838  *--------------ADD VARIANTS------------------*
00004A88                          7839  **ADDB
00004A88                          7840  *data reg dest
00004A88  43F9 00006096           7841  IFADDBDXD     LEA     SADDB,A1
00004A8E  4EF9 0000568A           7842                  JMP     DSRCDDEST                              
00004A94  43F9 00006096           7843  IFADDBAIXD    LEA     SADDB,A1
00004A9A  4EF9 000056CA           7844                  JMP     AISRCDDEST                
00004AA0  43F9 00006096           7845  IFADDBIXD     LEA     SADDB,A1
00004AA6  4EF9 000056F4           7846                  JMP     ISRCDDEST  
00004AAC  43F9 00006096           7847  IFADDBAAXD    LEA     SADDB,A1
00004AB2  4EF9 00005714           7848                  JMP     AASRCDDEST                
00004AB8  43F9 00006096           7849  IFADDBPRXD    LEA     SADDB,A1
00004ABE  4EF9 0000572E           7850                  JMP     PRSRCDDEST                
00004AC4  43F9 00006096           7851  IFADDBPOXD    LEA     SADDB,A1
00004ACA  4EF9 00005758           7852                  JMP     POSRCDDEST  
00004AD0                          7853                  
00004AD0                          7854  *addr indr dest
00004AD0  43F9 00006096           7855  IFADDBDXAI    LEA     SADDB,A1
00004AD6  4EF9 00005782           7856                  JMP     DSRCADEST                
00004ADC                          7857  
00004ADC                          7858  *abs addr dest
00004ADC  43F9 00006096           7859  IFADDBDXAA    LEA     SADDB,A1
00004AE2  4EF9 00005ABA           7860                  JMP     DSRCAADEST                
00004AE8                          7861  
00004AE8                          7862  *pre decr dest
00004AE8  43F9 00006096           7863  IFADDBDXPR    LEA     SADDB,A1
00004AEE  4EF9 00005B88           7864                  JMP     DSRCPRDEST                  
00004AF4                          7865  
00004AF4                          7866  *post incr dest
00004AF4  43F9 00006096           7867  IFADDBDXPO    LEA     SADDB,A1
00004AFA  4EF9 00005CC6           7868                  JMP     DSRCPODEST                                          
00004B00                          7869                  
00004B00                          7870  **ADDW
00004B00                          7871  *data reg dest
00004B00  43F9 0000609C           7872  IFADDWDXD     LEA     SADDW,A1
00004B06  4EF9 0000568A           7873                  JMP     DSRCDDEST                
00004B0C  43F9 0000609C           7874  IFADDWAXD     LEA     SADDW,A1
00004B12  4EF9 000056AA           7875                  JMP     ASRCDDEST                
00004B18  43F9 0000609C           7876  IFADDWAIXD    LEA     SADDW,A1
00004B1E  4EF9 000056CA           7877                  JMP     AISRCDDEST                
00004B24  43F9 0000609C           7878  IFADDWIXD     LEA     SADDW,A1
00004B2A  4EF9 000056F4           7879                  JMP     ISRCDDEST  
00004B30  43F9 0000609C           7880  IFADDWAAXD    LEA     SADDW,A1
00004B36  4EF9 00005714           7881                  JMP     AASRCDDEST                
00004B3C  43F9 0000609C           7882  IFADDWPRXD    LEA     SADDW,A1
00004B42  4EF9 0000572E           7883                  JMP     PRSRCDDEST                
00004B48  43F9 0000609C           7884  IFADDWPOXD    LEA     SADDW,A1
00004B4E  4EF9 00005758           7885                  JMP     POSRCDDEST  
00004B54                          7886                  
00004B54                          7887  *addr indr dest
00004B54  43F9 0000609C           7888  IFADDWDXAI    LEA     SADDW,A1
00004B5A  4EF9 00005782           7889                  JMP     DSRCADEST                
00004B60                          7890  
00004B60                          7891  *abs addr dest
00004B60  43F9 0000609C           7892  IFADDWDXAA    LEA     SADDW,A1
00004B66  4EF9 00005ABA           7893                  JMP     DSRCAADEST                
00004B6C                          7894  
00004B6C                          7895  *pre decr dest
00004B6C  43F9 0000609C           7896  IFADDWDXPR    LEA     SADDW,A1
00004B72  4EF9 00005B88           7897                  JMP     DSRCPRDEST                  
00004B78                          7898  
00004B78                          7899  *post incr dest
00004B78  43F9 0000609C           7900  IFADDWDXPO    LEA     SADDW,A1
00004B7E  4EF9 00005CC6           7901                  JMP     DSRCPODEST   
00004B84                          7902                  
00004B84                          7903  **ADDL          
00004B84                          7904  
00004B84                          7905  *data reg dest
00004B84  43F9 000060A2           7906  IFADDLDXD     LEA     SADDL,A1
00004B8A  4EF9 0000568A           7907                  JMP     DSRCDDEST                
00004B90  43F9 000060A2           7908  IFADDLAXD     LEA     SADDL,A1
00004B96  4EF9 000056AA           7909                  JMP     ASRCDDEST                
00004B9C  43F9 000060A2           7910  IFADDLAIXD    LEA     SADDL,A1
00004BA2  4EF9 000056CA           7911                  JMP     AISRCDDEST                
00004BA8  43F9 000060A2           7912  IFADDLIXD     LEA     SADDL,A1
00004BAE  4EF9 000056F4           7913                  JMP     ISRCDDEST  
00004BB4  43F9 000060A2           7914  IFADDLAAXD    LEA     SADDL,A1
00004BBA  4EF9 00005714           7915                  JMP     AASRCDDEST                
00004BC0  43F9 000060A2           7916  IFADDLPRXD    LEA     SADDL,A1
00004BC6  4EF9 0000572E           7917                  JMP     PRSRCDDEST                
00004BCC  43F9 000060A2           7918  IFADDLPOXD    LEA     SADDL,A1
00004BD2  4EF9 00005758           7919                  JMP     POSRCDDEST  
00004BD8                          7920                  
00004BD8                          7921  *addr indr dest
00004BD8  43F9 000060A2           7922  IFADDLDXAI    LEA     SADDL,A1
00004BDE  4EF9 00005782           7923                  JMP     DSRCADEST                
00004BE4                          7924  
00004BE4                          7925  *abs addr dest
00004BE4  43F9 000060A2           7926  IFADDLDXAA    LEA     SADDL,A1
00004BEA  4EF9 00005ABA           7927                  JMP     DSRCAADEST                
00004BF0                          7928  
00004BF0                          7929  *pre decr dest
00004BF0  43F9 000060A2           7930  IFADDLDXPR    LEA     SADDL,A1
00004BF6  4EF9 00005B88           7931                  JMP     DSRCPRDEST                  
00004BFC                          7932  
00004BFC                          7933  *post incr dest
00004BFC  43F9 000060A2           7934  IFADDLDXPO    LEA     SADDL,A1
00004C02  4EF9 00005CC6           7935                  JMP     DSRCPODEST         
00004C08                          7936  
00004C08                          7937  *--------------ADDA VARIANTS-----------------*
00004C08                          7938  **ADDAW
00004C08                          7939  *addr reg dest
00004C08  43F9 000060A8           7940  IFADDAWDXA     LEA     SADDAW,A1
00004C0E  4EF9 00005782           7941                  JMP     DSRCADEST           
00004C14  43F9 000060A8           7942  IFADDAWAXA     LEA     SADDAW,A1
00004C1A  4EF9 000057A2           7943                  JMP     ASRCADEST                
00004C20  43F9 000060A8           7944  IFADDAWAIXA    LEA     SADDAW,A1
00004C26  4EF9 000057C2           7945                  JMP     AISRCADEST                
00004C2C  43F9 000060A8           7946  IFADDAWIXA     LEA     SADDAW,A1
00004C32  4EF9 000057EC           7947                  JMP     ISRCADEST  
00004C38  43F9 000060A8           7948  IFADDAWAAXA    LEA     SADDAW,A1
00004C3E  4EF9 0000580C           7949                  JMP     AASRCADEST                
00004C44  43F9 000060A8           7950  IFADDAWPRXA    LEA     SADDAW,A1
00004C4A  4EF9 00005826           7951                  JMP     PRSRCADEST                
00004C50  43F9 000060A8           7952  IFADDAWPOXA    LEA     SADDAW,A1
00004C56  4EF9 00005850           7953                  JMP     POSRCADEST 
00004C5C                          7954  
00004C5C                          7955  **ADDAL
00004C5C                          7956  
00004C5C                          7957  *addr reg dest
00004C5C  43F9 000060AF           7958  IFADDALDXA     LEA     SADDAL,A1
00004C62  4EF9 00005782           7959                  JMP     DSRCADEST           
00004C68  43F9 000060AF           7960  IFADDALAXA     LEA     SADDAL,A1
00004C6E  4EF9 000057A2           7961                  JMP     ASRCADEST                
00004C74  43F9 000060AF           7962  IFADDALAIXA    LEA     SADDAL,A1
00004C7A  4EF9 000057C2           7963                  JMP     AISRCADEST                
00004C80  43F9 000060AF           7964  IFADDALIXA     LEA     SADDAL,A1
00004C86  4EF9 000057EC           7965                  JMP     ISRCADEST  
00004C8C  43F9 000060AF           7966  IFADDALAAXA    LEA     SADDAL,A1
00004C92  4EF9 0000580C           7967                  JMP     AASRCADEST                
00004C98  43F9 000060AF           7968  IFADDALPRXA    LEA     SADDAL,A1
00004C9E  4EF9 00005826           7969                  JMP     PRSRCADEST                
00004CA4  43F9 000060AF           7970  IFADDALPOXA    LEA     SADDAL,A1
00004CAA  4EF9 00005850           7971                  JMP     POSRCADEST 
00004CB0                          7972  
00004CB0                          7973  *--------------ADDQ VARIANTS-----------------*
00004CB0                          7974  **ADDQB
00004CB0                          7975  *data reg dest             
00004CB0  43F9 000060B6           7976  IFADDQBIXD     LEA     SADDQB,A1
00004CB6  4EF9 000056F4           7977                  JMP     ISRCDDEST   
00004CBC                          7978  
00004CBC                          7979  *addr reg dest               
00004CBC  43F9 000060B6           7980  IFADDQBIXA     LEA     SADDQB,A1
00004CC2  4EF9 000057EC           7981                  JMP     ISRCADEST  
00004CC8                          7982  
00004CC8                          7983  *addr indr dest             
00004CC8  43F9 000060B6           7984  IFADDQBIXAI    LEA     SADDQB,A1
00004CCE  4EF9 000057EC           7985                  JMP     ISRCADEST  
00004CD4                          7986  
00004CD4                          7987  *abs addr dest             
00004CD4  43F9 000060B6           7988  IFADDQBIXAA    LEA     SADDQB,A1
00004CDA  4EF9 00005B12           7989                  JMP     ISRCAADEST  
00004CE0                          7990  
00004CE0                          7991  *pre decr dest                
00004CE0  43F9 000060B6           7992  IFADDQBIXPR    LEA     SADDQB,A1
00004CE6  4EF9 00005C10           7993                  JMP     ISRCPRDEST   
00004CEC                          7994  
00004CEC                          7995  *post incr dest            
00004CEC  43F9 000060B6           7996  IFADDQBIXPO    LEA     SADDQB,A1
00004CF2  4EF9 00005D4E           7997                  JMP     ISRCPODEST  
00004CF8                          7998  
00004CF8                          7999  **ADDQW
00004CF8                          8000  *data reg dest 
00004CF8  43F9 000060BD           8001  IFADDQWIXD     LEA     SADDQW,A1
00004CFE  4EF9 000056F4           8002                  JMP     ISRCDDEST   
00004D04                          8003  
00004D04                          8004  *addr reg dest               
00004D04  43F9 000060BD           8005  IFADDQWIXA     LEA     SADDQW,A1
00004D0A  4EF9 000057EC           8006                  JMP     ISRCADEST  
00004D10                          8007  
00004D10                          8008  *addr indr dest             
00004D10  43F9 000060BD           8009  IFADDQWIXAI    LEA     SADDQW,A1
00004D16  4EF9 000057EC           8010                  JMP     ISRCADEST  
00004D1C                          8011  
00004D1C                          8012  *abs addr dest             
00004D1C  43F9 000060BD           8013  IFADDQWIXAA    LEA     SADDQW,A1
00004D22  4EF9 00005B12           8014                  JMP     ISRCAADEST  
00004D28                          8015  
00004D28                          8016  *pre decr dest                
00004D28  43F9 000060BD           8017  IFADDQWIXPR    LEA     SADDQW,A1
00004D2E  4EF9 00005C10           8018                  JMP     ISRCPRDEST   
00004D34                          8019  
00004D34                          8020  *post incr dest            
00004D34  43F9 000060BD           8021  IFADDQWIXPO    LEA     SADDQW,A1
00004D3A  4EF9 00005D4E           8022                  JMP     ISRCPODEST 
00004D40                          8023  
00004D40                          8024  **ADDQL
00004D40                          8025  *data reg dest 
00004D40  43F9 000060C4           8026  IFADDQLIXD     LEA     SADDQL,A1
00004D46  4EF9 000056F4           8027                  JMP     ISRCDDEST   
00004D4C                          8028  
00004D4C                          8029  *addr reg dest               
00004D4C  43F9 000060C4           8030  IFADDQLIXA     LEA     SADDQL,A1
00004D52  4EF9 000057EC           8031                  JMP     ISRCADEST  
00004D58                          8032                  
00004D58                          8033  *addr indr dest             
00004D58  43F9 000060C4           8034  IFADDQLIXAI    LEA     SADDQL,A1
00004D5E  4EF9 000057EC           8035                  JMP     ISRCADEST  
00004D64                          8036  
00004D64                          8037  *abs addr dest             
00004D64  43F9 000060C4           8038  IFADDQLIXAA    LEA     SADDQL,A1
00004D6A  4EF9 00005B12           8039                  JMP     ISRCAADEST  
00004D70                          8040  
00004D70                          8041  *pre decr dest                
00004D70  43F9 000060C4           8042  IFADDQLIXPR    LEA     SADDQL,A1
00004D76  4EF9 00005C10           8043                  JMP     ISRCPRDEST   
00004D7C                          8044  
00004D7C                          8045  *post incr dest            
00004D7C  43F9 000060C4           8046  IFADDQLIXPO    LEA     SADDQL,A1
00004D82  4EF9 00005D4E           8047                  JMP     ISRCPODEST  
00004D88                          8048  
00004D88                          8049  *--------------------SUB VARIANTS------------*
00004D88                          8050  **SUBB
00004D88                          8051  *data reg dest
00004D88  43F9 000060CB           8052  IFSUBBDXD     LEA     SSUBB,A1
00004D8E  4EF9 0000568A           8053                  JMP     DSRCDDEST                              
00004D94  43F9 000060CB           8054  IFSUBBAIXD    LEA     SSUBB,A1
00004D9A  4EF9 000056CA           8055                  JMP     AISRCDDEST                
00004DA0  43F9 000060CB           8056  IFSUBBIXD     LEA     SSUBB,A1
00004DA6  4EF9 000056F4           8057                  JMP     ISRCDDEST  
00004DAC  43F9 000060CB           8058  IFSUBBAAXD    LEA     SSUBB,A1
00004DB2  4EF9 00005714           8059                  JMP     AASRCDDEST                
00004DB8  43F9 000060CB           8060  IFSUBBPRXD    LEA     SSUBB,A1
00004DBE  4EF9 0000572E           8061                  JMP     PRSRCDDEST                
00004DC4  43F9 000060CB           8062  IFSUBBPOXD    LEA     SSUBB,A1
00004DCA  4EF9 00005758           8063                  JMP     POSRCDDEST  
00004DD0                          8064                  
00004DD0                          8065  *addr indr dest
00004DD0  43F9 000060CB           8066  IFSUBBDXAI    LEA     SSUBB,A1
00004DD6  4EF9 00005782           8067                  JMP     DSRCADEST                
00004DDC                          8068  
00004DDC                          8069  *abs addr dest
00004DDC  43F9 000060CB           8070  IFSUBBDXAA    LEA     SSUBB,A1
00004DE2  4EF9 00005ABA           8071                  JMP     DSRCAADEST                
00004DE8                          8072  
00004DE8                          8073  *pre decr dest
00004DE8  43F9 000060CB           8074  IFSUBBDXPR    LEA     SSUBB,A1
00004DEE  4EF9 00005B88           8075                  JMP     DSRCPRDEST                  
00004DF4                          8076  
00004DF4                          8077  *post incr dest
00004DF4  43F9 000060CB           8078  IFSUBBDXPO    LEA     SSUBB,A1
00004DFA  4EF9 00005CC6           8079                  JMP     DSRCPODEST                                          
00004E00                          8080                  
00004E00                          8081  **SUBW
00004E00                          8082  *data reg dest
00004E00  43F9 000060D1           8083  IFSUBWDXD     LEA     SSUBW,A1
00004E06  4EF9 0000568A           8084                  JMP     DSRCDDEST                
00004E0C  43F9 000060D1           8085  IFSUBWAXD     LEA     SSUBW,A1
00004E12  4EF9 000056AA           8086                  JMP     ASRCDDEST                
00004E18  43F9 000060D1           8087  IFSUBWAIXD    LEA     SSUBW,A1
00004E1E  4EF9 000056CA           8088                  JMP     AISRCDDEST                
00004E24  43F9 000060D1           8089  IFSUBWIXD     LEA     SSUBW,A1
00004E2A  4EF9 000056F4           8090                  JMP     ISRCDDEST  
00004E30  43F9 000060D1           8091  IFSUBWAAXD    LEA     SSUBW,A1
00004E36  4EF9 00005714           8092                  JMP     AASRCDDEST                
00004E3C  43F9 000060D1           8093  IFSUBWPRXD    LEA     SSUBW,A1
00004E42  4EF9 0000572E           8094                  JMP     PRSRCDDEST                
00004E48  43F9 000060D1           8095  IFSUBWPOXD    LEA     SSUBW,A1
00004E4E  4EF9 00005758           8096                  JMP     POSRCDDEST  
00004E54                          8097                  
00004E54                          8098  *addr indr dest
00004E54  43F9 000060D1           8099  IFSUBWDXAI    LEA     SSUBW,A1
00004E5A  4EF9 00005782           8100                  JMP     DSRCADEST                
00004E60                          8101  
00004E60                          8102  *abs addr dest
00004E60  43F9 000060D1           8103  IFSUBWDXAA    LEA     SSUBW,A1
00004E66  4EF9 00005ABA           8104                  JMP     DSRCAADEST                
00004E6C                          8105  
00004E6C                          8106  *pre decr dest
00004E6C  43F9 000060D1           8107  IFSUBWDXPR    LEA     SSUBW,A1
00004E72  4EF9 00005B88           8108                  JMP     DSRCPRDEST                  
00004E78                          8109  
00004E78                          8110  *post incr dest
00004E78  43F9 000060D1           8111  IFSUBWDXPO    LEA     SSUBW,A1
00004E7E  4EF9 00005CC6           8112                  JMP     DSRCPODEST   
00004E84                          8113                  
00004E84                          8114  **SUBL          
00004E84                          8115  
00004E84                          8116  *data reg dest
00004E84  43F9 000060D7           8117  IFSUBLDXD     LEA     SSUBL,A1
00004E8A  4EF9 0000568A           8118                  JMP     DSRCDDEST                
00004E90  43F9 000060D7           8119  IFSUBLAXD     LEA     SSUBL,A1
00004E96  4EF9 000056AA           8120                  JMP     ASRCDDEST                
00004E9C  43F9 000060D7           8121  IFSUBLAIXD    LEA     SSUBL,A1
00004EA2  4EF9 000056CA           8122                  JMP     AISRCDDEST                
00004EA8  43F9 000060D7           8123  IFSUBLIXD     LEA     SSUBL,A1
00004EAE  4EF9 000056F4           8124                  JMP     ISRCDDEST  
00004EB4  43F9 000060D7           8125  IFSUBLAAXD    LEA     SSUBL,A1
00004EBA  4EF9 00005714           8126                  JMP     AASRCDDEST                
00004EC0  43F9 000060D7           8127  IFSUBLPRXD    LEA     SSUBL,A1
00004EC6  4EF9 0000572E           8128                  JMP     PRSRCDDEST                
00004ECC  43F9 000060D7           8129  IFSUBLPOXD    LEA     SSUBL,A1
00004ED2  4EF9 00005758           8130                  JMP     POSRCDDEST  
00004ED8                          8131                  
00004ED8                          8132  *addr indr dest
00004ED8  43F9 000060D7           8133  IFSUBLDXAI    LEA     SSUBL,A1
00004EDE  4EF9 00005782           8134                  JMP     DSRCADEST                
00004EE4                          8135  
00004EE4                          8136  *abs addr dest
00004EE4  43F9 000060D7           8137  IFSUBLDXAA    LEA     SSUBL,A1
00004EEA  4EF9 00005ABA           8138                  JMP     DSRCAADEST                
00004EF0                          8139  
00004EF0                          8140  *pre decr dest
00004EF0  43F9 000060D7           8141  IFSUBLDXPR    LEA     SSUBL,A1
00004EF6  4EF9 00005B88           8142                  JMP     DSRCPRDEST                  
00004EFC                          8143  
00004EFC                          8144  *post incr dest
00004EFC  43F9 000060D7           8145  IFSUBLDXPO    LEA     SSUBL,A1
00004F02  4EF9 00005CC6           8146                  JMP     DSRCPODEST 
00004F08                          8147  
00004F08                          8148  *---------------- LEA Variants-------------*
00004F08                          8149  *addr reg dest                          
00004F08  43F9 000060DD           8150  IFLEAAIXA       LEA     SLEA,A1
00004F0E  4EF9 000057C2           8151                  JMP     AISRCADEST                 
00004F14  43F9 000060DD           8152  IFLEAAAXA       LEA     SLEA,A1
00004F1A  4EF9 0000580C           8153                  JMP     AASRCADEST               
00004F20                          8154  
00004F20                          8155  *---------------- NOT Variants-------------*
00004F20                          8156  **NOT.B
00004F20                          8157  *effective addresses
00004F20  43F9 000060E1           8158  IFNOTBEA         LEA     SNOTB,A1
00004F26  4EF9 00005604           8159                  JMP     EASRC 
00004F2C                          8160  
00004F2C  43F9 000060E1           8161  IFNOTBEAXD       LEA     SNOTB,A1
00004F32  4EF9 00005674           8162                  JMP     EASRCD    
00004F38                          8163  
00004F38  43F9 000060E1           8164  IFNOTBEAXAI      LEA     SNOTB,A1
00004F3E  4EF9 00005614           8165                  JMP     EASRCAI
00004F44                          8166  
00004F44  43F9 000060E1           8167  IFNOTBEAXPR      LEA     SNOTB,A1
00004F4A  4EF9 00005634           8168                  JMP     EASRCPR 
00004F50                          8169  
00004F50  43F9 000060E1           8170  IFNOTBEAXPO      LEA     SNOTB,A1
00004F56  4EF9 00005654           8171                  JMP     EASRCPO 
00004F5C                          8172                  
00004F5C                          8173  **NOT.W
00004F5C                          8174  *effective addresses
00004F5C  43F9 000060E7           8175  IFNOTWEA         LEA     SNOTW,A1
00004F62  4EF9 00005604           8176                  JMP     EASRC 
00004F68                          8177  
00004F68  43F9 000060E7           8178  IFNOTWEAXD       LEA     SNOTW,A1
00004F6E  4EF9 00005674           8179                  JMP     EASRCD    
00004F74                          8180  
00004F74  43F9 000060E7           8181  IFNOTWEAXAI      LEA     SNOTW,A1
00004F7A  4EF9 00005614           8182                  JMP     EASRCAI
00004F80                          8183  
00004F80  43F9 000060E7           8184  IFNOTWEAXPR      LEA     SNOTW,A1
00004F86  4EF9 00005634           8185                  JMP     EASRCPR 
00004F8C                          8186  
00004F8C  43F9 000060E7           8187  IFNOTWEAXPO      LEA     SNOTW,A1
00004F92  4EF9 00005654           8188                  JMP     EASRCPO 
00004F98                          8189  
00004F98                          8190  **NOT.L
00004F98                          8191  *effective addresses
00004F98  43F9 000060ED           8192  IFNOTLEA         LEA     SNOTL,A1
00004F9E  4EF9 00005604           8193                  JMP     EASRC 
00004FA4                          8194  
00004FA4  43F9 000060ED           8195  IFNOTLEAXD       LEA     SNOTL,A1
00004FAA  4EF9 00005674           8196                  JMP     EASRCD    
00004FB0                          8197  
00004FB0  43F9 000060ED           8198  IFNOTLEAXAI      LEA     SNOTL,A1
00004FB6  4EF9 00005614           8199                  JMP     EASRCAI
00004FBC                          8200  
00004FBC  43F9 000060ED           8201  IFNOTLEAXPR      LEA     SNOTL,A1
00004FC2  4EF9 00005634           8202                  JMP     EASRCPR 
00004FC8                          8203  
00004FC8  43F9 000060ED           8204  IFNOTLEAXPO      LEA     SNOTL,A1
00004FCE  4EF9 00005654           8205                  JMP     EASRCPO                 
00004FD4                          8206  
00004FD4                          8207  *---------------- AND Variants-------------*
00004FD4                          8208  **ANDB
00004FD4                          8209  *data reg dest
00004FD4  43F9 000060F3           8210  IFANDBDXD     LEA     SANDB,A1
00004FDA  4EF9 0000568A           8211                  JMP     DSRCDDEST                              
00004FE0  43F9 000060F3           8212  IFANDBAIXD    LEA     SANDB,A1
00004FE6  4EF9 000056CA           8213                  JMP     AISRCDDEST                
00004FEC  43F9 000060F3           8214  IFANDBIXD     LEA     SANDB,A1
00004FF2  4EF9 000056F4           8215                  JMP     ISRCDDEST  
00004FF8  43F9 000060F3           8216  IFANDBAAXD    LEA     SANDB,A1
00004FFE  4EF9 00005714           8217                  JMP     AASRCDDEST                
00005004  43F9 000060F3           8218  IFANDBPRXD    LEA     SANDB,A1
0000500A  4EF9 0000572E           8219                  JMP     PRSRCDDEST                
00005010  43F9 000060F3           8220  IFANDBPOXD    LEA     SANDB,A1
00005016  4EF9 00005758           8221                  JMP     POSRCDDEST  
0000501C                          8222                  
0000501C                          8223  *addr indr dest
0000501C  43F9 000060F3           8224  IFANDBDXAI    LEA     SANDB,A1
00005022  4EF9 00005782           8225                  JMP     DSRCADEST                
00005028                          8226  
00005028                          8227  *abs addr dest
00005028  43F9 000060F3           8228  IFANDBDXAA    LEA     SANDB,A1
0000502E  4EF9 00005ABA           8229                  JMP     DSRCAADEST                
00005034                          8230  
00005034                          8231  *pre decr dest
00005034  43F9 000060F3           8232  IFANDBDXPR    LEA     SANDB,A1
0000503A  4EF9 00005B88           8233                  JMP     DSRCPRDEST                  
00005040                          8234  
00005040                          8235  *post incr dest
00005040  43F9 000060F3           8236  IFANDBDXPO    LEA     SANDB,A1
00005046  4EF9 00005CC6           8237                  JMP     DSRCPODEST                                          
0000504C                          8238                  
0000504C                          8239  **ANDW
0000504C                          8240  *data reg dest
0000504C  43F9 000060F9           8241  IFANDWDXD     LEA     SANDW,A1
00005052  4EF9 0000568A           8242                  JMP     DSRCDDEST                              
00005058  43F9 000060F9           8243  IFANDWAIXD    LEA     SANDW,A1
0000505E  4EF9 000056CA           8244                  JMP     AISRCDDEST                
00005064  43F9 000060F9           8245  IFANDWIXD     LEA     SANDW,A1
0000506A  4EF9 000056F4           8246                  JMP     ISRCDDEST  
00005070  43F9 000060F9           8247  IFANDWAAXD    LEA     SANDW,A1
00005076  4EF9 00005714           8248                  JMP     AASRCDDEST                
0000507C  43F9 000060F9           8249  IFANDWPRXD    LEA     SANDW,A1
00005082  4EF9 0000572E           8250                  JMP     PRSRCDDEST                
00005088  43F9 000060F9           8251  IFANDWPOXD    LEA     SANDW,A1
0000508E  4EF9 00005758           8252                  JMP     POSRCDDEST  
00005094                          8253                  
00005094                          8254  *addr indr dest
00005094  43F9 000060F9           8255  IFANDWDXAI    LEA     SANDW,A1
0000509A  4EF9 00005782           8256                  JMP     DSRCADEST                
000050A0                          8257  
000050A0                          8258  *abs addr dest
000050A0  43F9 000060F9           8259  IFANDWDXAA    LEA     SANDW,A1
000050A6  4EF9 00005ABA           8260                  JMP     DSRCAADEST                
000050AC                          8261  
000050AC                          8262  *pre decr dest
000050AC  43F9 000060F9           8263  IFANDWDXPR    LEA     SANDW,A1
000050B2  4EF9 00005B88           8264                  JMP     DSRCPRDEST                  
000050B8                          8265  
000050B8                          8266  *post incr dest
000050B8  43F9 000060F9           8267  IFANDWDXPO    LEA     SANDW,A1
000050BE  4EF9 00005CC6           8268                  JMP     DSRCPODEST   
000050C4                          8269                  
000050C4                          8270  **ANDL          
000050C4                          8271  
000050C4                          8272  *data reg dest
000050C4  43F9 000060FF           8273  IFANDLDXD     LEA     SANDL,A1
000050CA  4EF9 0000568A           8274                  JMP     DSRCDDEST                               
000050D0  43F9 000060FF           8275  IFANDLAIXD    LEA     SANDL,A1
000050D6  4EF9 000056CA           8276                  JMP     AISRCDDEST                
000050DC  43F9 000060FF           8277  IFANDLIXD     LEA     SANDL,A1
000050E2  4EF9 000056F4           8278                  JMP     ISRCDDEST  
000050E8  43F9 000060FF           8279  IFANDLAAXD    LEA     SANDL,A1
000050EE  4EF9 00005714           8280                  JMP     AASRCDDEST                
000050F4  43F9 000060FF           8281  IFANDLPRXD    LEA     SANDL,A1
000050FA  4EF9 0000572E           8282                  JMP     PRSRCDDEST                
00005100  43F9 000060FF           8283  IFANDLPOXD    LEA     SANDL,A1
00005106  4EF9 00005758           8284                  JMP     POSRCDDEST  
0000510C                          8285                  
0000510C                          8286  *addr indr dest
0000510C  43F9 000060FF           8287  IFANDLDXAI    LEA     SANDL,A1
00005112  4EF9 00005782           8288                  JMP     DSRCADEST                
00005118                          8289  
00005118                          8290  *abs addr dest
00005118  43F9 000060FF           8291  IFANDLDXAA    LEA     SANDL,A1
0000511E  4EF9 00005ABA           8292                  JMP     DSRCAADEST                
00005124                          8293  
00005124                          8294  *pre decr dest
00005124  43F9 000060FF           8295  IFANDLDXPR    LEA     SANDL,A1
0000512A  4EF9 00005B88           8296                  JMP     DSRCPRDEST                  
00005130                          8297  
00005130                          8298  *post incr dest
00005130  43F9 000060FF           8299  IFANDLDXPO    LEA     SANDL,A1
00005136  4EF9 00005CC6           8300                  JMP     DSRCPODEST 
0000513C                          8301  
0000513C                          8302  *---------------- OR Variants--------------*
0000513C                          8303  **ORB
0000513C                          8304  *data reg dest
0000513C  43F9 00006105           8305  IFORBDXD     LEA     SORB,A1
00005142  4EF9 0000568A           8306                  JMP     DSRCDDEST                              
00005148  43F9 00006105           8307  IFORBAIXD    LEA     SORB,A1
0000514E  4EF9 000056CA           8308                  JMP     AISRCDDEST                
00005154  43F9 00006105           8309  IFORBIXD     LEA     SORB,A1
0000515A  4EF9 000056F4           8310                  JMP     ISRCDDEST  
00005160  43F9 00006105           8311  IFORBAAXD    LEA     SORB,A1
00005166  4EF9 00005714           8312                  JMP     AASRCDDEST                
0000516C  43F9 00006105           8313  IFORBPRXD    LEA     SORB,A1
00005172  4EF9 0000572E           8314                  JMP     PRSRCDDEST                
00005178  43F9 00006105           8315  IFORBPOXD    LEA     SORB,A1
0000517E  4EF9 00005758           8316                  JMP     POSRCDDEST  
00005184                          8317                  
00005184                          8318  *addr indr dest
00005184  43F9 00006105           8319  IFORBDXAI    LEA     SORB,A1
0000518A  4EF9 00005782           8320                  JMP     DSRCADEST                
00005190                          8321  
00005190                          8322  *abs addr dest
00005190  43F9 00006105           8323  IFORBDXAA    LEA     SORB,A1
00005196  4EF9 00005ABA           8324                  JMP     DSRCAADEST                
0000519C                          8325  
0000519C                          8326  *pre decr dest
0000519C  43F9 00006105           8327  IFORBDXPR    LEA     SORB,A1
000051A2  4EF9 00005B88           8328                  JMP     DSRCPRDEST                  
000051A8                          8329  
000051A8                          8330  *post incr dest
000051A8  43F9 00006105           8331  IFORBDXPO    LEA     SORB,A1
000051AE  4EF9 00005CC6           8332                  JMP     DSRCPODEST                                          
000051B4                          8333                  
000051B4                          8334  **ORW
000051B4                          8335  *data reg dest
000051B4  43F9 0000610A           8336  IFORWDXD     LEA     SORW,A1
000051BA  4EF9 0000568A           8337                  JMP     DSRCDDEST                              
000051C0  43F9 0000610A           8338  IFORWAIXD    LEA     SORW,A1
000051C6  4EF9 000056CA           8339                  JMP     AISRCDDEST                
000051CC  43F9 0000610A           8340  IFORWIXD     LEA     SORW,A1
000051D2  4EF9 000056F4           8341                  JMP     ISRCDDEST  
000051D8  43F9 0000610A           8342  IFORWAAXD    LEA     SORW,A1
000051DE  4EF9 00005714           8343                  JMP     AASRCDDEST                
000051E4  43F9 0000610A           8344  IFORWPRXD    LEA     SORW,A1
000051EA  4EF9 0000572E           8345                  JMP     PRSRCDDEST                
000051F0  43F9 0000610A           8346  IFORWPOXD    LEA     SORW,A1
000051F6  4EF9 00005758           8347                  JMP     POSRCDDEST  
000051FC                          8348                  
000051FC                          8349  *addr indr dest
000051FC  43F9 0000610A           8350  IFORWDXAI    LEA     SORW,A1
00005202  4EF9 00005782           8351                  JMP     DSRCADEST                
00005208                          8352  
00005208                          8353  *abs addr dest
00005208  43F9 0000610A           8354  IFORWDXAA    LEA     SORW,A1
0000520E  4EF9 00005ABA           8355                  JMP     DSRCAADEST                
00005214                          8356  
00005214                          8357  *pre decr dest
00005214  43F9 0000610A           8358  IFORWDXPR    LEA     SORW,A1
0000521A  4EF9 00005B88           8359                  JMP     DSRCPRDEST                  
00005220                          8360  
00005220                          8361  *post incr dest
00005220  43F9 0000610A           8362  IFORWDXPO    LEA     SORW,A1
00005226  4EF9 00005CC6           8363                  JMP     DSRCPODEST   
0000522C                          8364                  
0000522C                          8365  **ORL          
0000522C                          8366  
0000522C                          8367  *data reg dest
0000522C  43F9 0000610F           8368  IFORLDXD     LEA     SORL,A1
00005232  4EF9 0000568A           8369                  JMP     DSRCDDEST                               
00005238  43F9 0000610F           8370  IFORLAIXD    LEA     SORL,A1
0000523E  4EF9 000056CA           8371                  JMP     AISRCDDEST                
00005244  43F9 0000610F           8372  IFORLIXD     LEA     SORL,A1
0000524A  4EF9 000056F4           8373                  JMP     ISRCDDEST  
00005250  43F9 0000610F           8374  IFORLAAXD    LEA     SORL,A1
00005256  4EF9 00005714           8375                  JMP     AASRCDDEST                
0000525C  43F9 0000610F           8376  IFORLPRXD    LEA     SORL,A1
00005262  4EF9 0000572E           8377                  JMP     PRSRCDDEST                
00005268  43F9 0000610F           8378  IFORLPOXD    LEA     SORL,A1
0000526E  4EF9 00005758           8379                  JMP     POSRCDDEST  
00005274                          8380                  
00005274                          8381  *addr indr dest
00005274  43F9 0000610F           8382  IFORLDXAI    LEA     SORL,A1
0000527A  4EF9 00005782           8383                  JMP     DSRCADEST                
00005280                          8384  
00005280                          8385  *abs addr dest
00005280  43F9 0000610F           8386  IFORLDXAA    LEA     SORL,A1
00005286  4EF9 00005ABA           8387                  JMP     DSRCAADEST                
0000528C                          8388  
0000528C                          8389  *pre decr dest
0000528C  43F9 0000610F           8390  IFORLDXPR    LEA     SORL,A1
00005292  4EF9 00005B88           8391                  JMP     DSRCPRDEST                  
00005298                          8392  
00005298                          8393  *post incr dest
00005298  43F9 0000610F           8394  IFORLDXPO    LEA     SORL,A1
0000529E  4EF9 00005CC6           8395                  JMP     DSRCPODEST 
000052A4                          8396                  
000052A4                          8397  *---------------- JSR Variants-------------*
000052A4                          8398  *ea src
000052A4  43F9 00006114           8399  IFJSREA         LEA     SJSR,A1
000052AA  4EF9 00005604           8400                  JMP     EASRC    
000052B0                          8401  
000052B0  43F9 00006114           8402  IFJSRAXAI       LEA     SJSR,A1
000052B6  4EF9 00005614           8403                  JMP     EASRCAI  
000052BC                          8404  
000052BC                          8405  *---------------- RTS Variants-------------*
000052BC  43F9 00006118           8406  IFRTS           LEA     SRTS,A1
000052C2  6100 0B8A               8407                  BSR     PRINTSTR
000052C6  6100 0B80               8408                  BSR     PRINTCRLF
000052CA  4EF8 1132               8409                  JMP     CONTINUE
000052CE                          8410  
000052CE                          8411  *---------------- Bcc Variants-------------*
000052CE  43F9 00006128           8412  IFBRA           LEA     SBRA,A1
000052D4  4EF9 00005604           8413                  JMP     EASRC    
000052DA                          8414                  
000052DA  43F9 0000611C           8415  IFBGT           LEA     SBGT,A1
000052E0  4EF9 00005604           8416                  JMP     EASRC    
000052E6                          8417  
000052E6  43F9 00006120           8418  IFBLE           LEA     SBLE,A1
000052EC  4EF9 00005604           8419                  JMP     EASRC    
000052F2                          8420  
000052F2  43F9 00006124           8421  IFBEQ           LEA     SBEQ,A1
000052F8  4EF9 00005604           8422                  JMP     EASRC                    
000052FE                          8423  
000052FE                          8424  *---------------- ASL Variants--------------*
000052FE                          8425  **ASL                 
000052FE                          8426  
000052FE                          8427  *effective addresses
000052FE  43F9 0000612C           8428  IFASLEA         LEA     SASL,A1
00005304  4EF9 00005604           8429                  JMP     EASRC    
0000530A                          8430  
0000530A  43F9 0000612C           8431  IFASLEAXAI      LEA     SASL,A1
00005310  4EF9 00005614           8432                  JMP     EASRCAI
00005316                          8433  
00005316  43F9 0000612C           8434  IFASLEAXPR      LEA     SASL,A1
0000531C  4EF9 00005634           8435                  JMP     EASRCPR 
00005322                          8436  
00005322  43F9 0000612C           8437  IFASLEAXPO      LEA     SASL,A1
00005328  4EF9 00005654           8438                  JMP     EASRCPO 
0000532E                          8439  
0000532E                          8440  **ASL.B
0000532E                          8441  *data reg dest
0000532E  43F9 00006130           8442  IFASLBDXD       LEA     SASLB,A1
00005334  4EF9 0000568A           8443                  JMP     DSRCDDEST  
0000533A  43F9 00006130           8444  IFASLBIXD       LEA     SASLB,A1
00005340  4EF9 000056F4           8445                  JMP     ISRCDDEST                  
00005346                          8446  
00005346                          8447  **ASL.W
00005346                          8448  *data reg dest
00005346  43F9 00006136           8449  IFASLWDXD       LEA     SASLW,A1
0000534C  4EF9 0000568A           8450                  JMP     DSRCDDEST  
00005352  43F9 00006136           8451  IFASLWIXD       LEA     SASLW,A1
00005358  4EF9 000056F4           8452                  JMP     ISRCDDEST                 
0000535E                          8453  
0000535E                          8454  **ASL.L
0000535E                          8455  *data reg dest
0000535E  43F9 0000613C           8456  IFASLLDXD       LEA     SASLL,A1
00005364  4EF9 0000568A           8457                  JMP     DSRCDDEST  
0000536A  43F9 0000613C           8458  IFASLLIXD       LEA     SASLL,A1
00005370  4EF9 000056F4           8459                  JMP     ISRCDDEST                 
00005376                          8460  
00005376                          8461  *---------------- ASR Variants--------------*
00005376                          8462  **ASR                 
00005376                          8463  
00005376                          8464  *effective addresses
00005376  43F9 00006142           8465  IFASREA         LEA     SASR,A1
0000537C  4EF9 00005604           8466                  JMP     EASRC    
00005382                          8467  
00005382  43F9 00006142           8468  IFASREAXAI      LEA     SASR,A1
00005388  4EF9 00005614           8469                  JMP     EASRCAI
0000538E                          8470  
0000538E  43F9 00006142           8471  IFASREAXPR      LEA     SASR,A1
00005394  4EF9 00005634           8472                  JMP     EASRCPR 
0000539A                          8473  
0000539A  43F9 00006142           8474  IFASREAXPO      LEA     SASR,A1
000053A0  4EF9 00005654           8475                  JMP     EASRCPO 
000053A6                          8476  
000053A6                          8477  **ASR.B
000053A6                          8478  *data reg dest
000053A6  43F9 00006146           8479  IFASRBDXD       LEA     SASRB,A1
000053AC  4EF9 0000568A           8480                  JMP     DSRCDDEST  
000053B2  43F9 00006146           8481  IFASRBIXD       LEA     SASRB,A1
000053B8  4EF9 000056F4           8482                  JMP     ISRCDDEST                 
000053BE                          8483  
000053BE                          8484  
000053BE                          8485  **ASR.W
000053BE                          8486  *data reg dest
000053BE  43F9 0000614C           8487  IFASRWDXD       LEA     SASRW,A1
000053C4  4EF9 0000568A           8488                  JMP     DSRCDDEST  
000053CA  43F9 0000614C           8489  IFASRWIXD       LEA     SASRW,A1
000053D0  4EF9 000056F4           8490                  JMP     ISRCDDEST                 
000053D6                          8491  
000053D6                          8492  **ASR.L
000053D6                          8493  *data reg dest
000053D6  43F9 00006152           8494  IFASRLDXD       LEA     SASRL,A1
000053DC  4EF9 0000568A           8495                  JMP     DSRCDDEST  
000053E2  43F9 00006152           8496  IFASRLIXD       LEA     SASRL,A1
000053E8  4EF9 000056F4           8497                  JMP     ISRCDDEST                 
000053EE                          8498  
000053EE                          8499  *--------------- LSL Variants--------------*
000053EE                          8500  **LSL                
000053EE                          8501  
000053EE                          8502  *effective addresses
000053EE  43F9 00006158           8503  IFLSLEA         LEA     SLSL,A1
000053F4  4EF9 00005604           8504                  JMP     EASRC    
000053FA                          8505  
000053FA  43F9 00006158           8506  IFLSLEAXAI      LEA     SLSL,A1
00005400  4EF9 00005614           8507                  JMP     EASRCAI
00005406                          8508  
00005406  43F9 00006158           8509  IFLSLEAXPR      LEA     SLSL,A1
0000540C  4EF9 00005634           8510                  JMP     EASRCPR 
00005412                          8511  
00005412  43F9 00006158           8512  IFLSLEAXPO      LEA     SLSL,A1
00005418  4EF9 00005654           8513                  JMP     EASRCPO 
0000541E                          8514  
0000541E                          8515  **LSL.B
0000541E                          8516  *data reg dest
0000541E  43F9 0000615C           8517  IFLSLBDXD       LEA     SLSLB,A1
00005424  4EF9 0000568A           8518                  JMP     DSRCDDEST  
0000542A  43F9 0000615C           8519  IFLSLBIXD       LEA     SLSLB,A1
00005430  4EF9 000056F4           8520                  JMP     ISRCDDEST                 
00005436                          8521  
00005436                          8522  **LSL.W
00005436                          8523  *data reg dest
00005436  43F9 00006162           8524  IFLSLWDXD       LEA     SLSLW,A1
0000543C  4EF9 0000568A           8525                  JMP     DSRCDDEST  
00005442  43F9 00006162           8526  IFLSLWIXD       LEA     SLSLW,A1
00005448  4EF9 000056F4           8527                  JMP     ISRCDDEST                 
0000544E                          8528  
0000544E                          8529  **LSL.L
0000544E                          8530  *data reg dest
0000544E  43F9 00006168           8531  IFLSLLDXD       LEA     SLSLL,A1
00005454  4EF9 0000568A           8532                  JMP     DSRCDDEST  
0000545A  43F9 00006168           8533  IFLSLLIXD       LEA     SLSLL,A1
00005460  4EF9 000056F4           8534                  JMP     ISRCDDEST                 
00005466                          8535  
00005466                          8536  *--------------- LSR Variants--------------*
00005466                          8537  **LSR               
00005466                          8538  
00005466                          8539  *effective addresses
00005466  43F9 0000616E           8540  IFLSREA         LEA     SLSR,A1
0000546C  4EF9 00005604           8541                  JMP     EASRC    
00005472                          8542  
00005472  43F9 0000616E           8543  IFLSREAXAI      LEA     SLSR,A1
00005478  4EF9 00005614           8544                  JMP     EASRCAI
0000547E                          8545  
0000547E  43F9 0000616E           8546  IFLSREAXPR      LEA     SLSR,A1
00005484  4EF9 00005634           8547                  JMP     EASRCPR 
0000548A                          8548  
0000548A  43F9 0000616E           8549  IFLSREAXPO      LEA     SLSR,A1
00005490  4EF9 00005654           8550                  JMP     EASRCPO 
00005496                          8551  
00005496                          8552  **LSR.B
00005496                          8553  *data reg dest
00005496  43F9 00006172           8554  IFLSRBDXD       LEA     SLSRB,A1
0000549C  4EF9 0000568A           8555                  JMP     DSRCDDEST  
000054A2  43F9 00006172           8556  IFLSRBIXD       LEA     SLSRB,A1
000054A8  4EF9 000056F4           8557                  JMP     ISRCDDEST                 
000054AE                          8558  
000054AE                          8559  **LSR.W
000054AE                          8560  *data reg dest
000054AE  43F9 00006178           8561  IFLSRWDXD       LEA     SLSRW,A1
000054B4  4EF9 0000568A           8562                  JMP     DSRCDDEST  
000054BA  43F9 00006178           8563  IFLSRWIXD       LEA     SLSRW,A1
000054C0  4EF9 000056F4           8564                  JMP     ISRCDDEST                 
000054C6                          8565  
000054C6                          8566  **LSR.L
000054C6                          8567  *data reg dest
000054C6  43F9 0000617E           8568  IFLSRLDXD       LEA     SLSRL,A1
000054CC  4EF9 0000568A           8569                  JMP     DSRCDDEST  
000054D2  43F9 0000617E           8570  IFLSRLIXD       LEA     SLSRL,A1
000054D8  4EF9 000056F4           8571                  JMP     ISRCDDEST                 
000054DE                          8572  
000054DE                          8573  *--------------- ROL Variants--------------*
000054DE                          8574  **ROL              
000054DE                          8575  
000054DE                          8576  *effective addresses
000054DE  43F9 00006184           8577  IFROLEA         LEA     SROL,A1
000054E4  4EF9 00005604           8578                  JMP     EASRC    
000054EA                          8579  
000054EA  43F9 00006184           8580  IFROLEAXAI      LEA     SROL,A1
000054F0  4EF9 00005614           8581                  JMP     EASRCAI
000054F6                          8582  
000054F6  43F9 00006184           8583  IFROLEAXPR      LEA     SROL,A1
000054FC  4EF9 00005634           8584                  JMP     EASRCPR 
00005502                          8585  
00005502  43F9 00006184           8586  IFROLEAXPO      LEA     SROL,A1
00005508  4EF9 00005654           8587                  JMP     EASRCPO 
0000550E                          8588  
0000550E                          8589  **ROL.B
0000550E                          8590  *data reg dest
0000550E  43F9 00006188           8591  IFROLBDXD       LEA     SROLB,A1
00005514  4EF9 0000568A           8592                  JMP     DSRCDDEST  
0000551A  43F9 00006188           8593  IFROLBIXD       LEA     SROLB,A1
00005520  4EF9 000056F4           8594                  JMP     ISRCDDEST                 
00005526                          8595  
00005526                          8596  **ROL.W
00005526                          8597  *data reg dest
00005526  43F9 0000618E           8598  IFROLWDXD       LEA     SROLW,A1
0000552C  4EF9 0000568A           8599                  JMP     DSRCDDEST  
00005532  43F9 0000618E           8600  IFROLWIXD       LEA     SROLW,A1
00005538  4EF9 000056F4           8601                  JMP     ISRCDDEST                  
0000553E                          8602  
0000553E                          8603  **ROL.L
0000553E                          8604  *data reg dest
0000553E  43F9 00006194           8605  IFROLLDXD       LEA     SROLL,A1
00005544  4EF9 0000568A           8606                  JMP     DSRCDDEST  
0000554A  43F9 00006194           8607  IFROLLIXD       LEA     SROLL,A1
00005550  4EF9 000056F4           8608                  JMP     ISRCDDEST                 
00005556                          8609  
00005556                          8610  *--------------- ROR Variants--------------*
00005556                          8611  **ROR                
00005556                          8612  
00005556                          8613  *effective addresses
00005556  43F9 0000619A           8614  IFROREA         LEA     SROR,A1
0000555C  4EF9 00005604           8615                  JMP     EASRC    
00005562                          8616  
00005562  43F9 0000619A           8617  IFROREAXAI      LEA     SROR,A1
00005568  4EF9 00005614           8618                  JMP     EASRCAI
0000556E                          8619  
0000556E  43F9 0000619A           8620  IFROREAXPR      LEA     SROR,A1
00005574  4EF9 00005634           8621                  JMP     EASRCPR 
0000557A                          8622  
0000557A  43F9 0000619A           8623  IFROREAXPO      LEA     SROR,A1
00005580  4EF9 00005654           8624                  JMP     EASRCPO 
00005586                          8625  
00005586                          8626  **ROR.B
00005586                          8627  *data reg dest
00005586  43F9 0000619E           8628  IFRORBDXD       LEA     SRORB,A1
0000558C  4EF9 0000568A           8629                  JMP     DSRCDDEST  
00005592  43F9 0000619E           8630  IFRORBIXD       LEA     SRORB,A1
00005598  4EF9 000056F4           8631                  JMP     ISRCDDEST                 
0000559E                          8632  
0000559E                          8633  **ROR.W
0000559E                          8634  *data reg dest
0000559E  43F9 000061A4           8635  IFRORWDXD       LEA     SRORW,A1
000055A4  4EF9 0000568A           8636                  JMP     DSRCDDEST  
000055AA  43F9 000061A4           8637  IFRORWIXD       LEA     SRORW,A1
000055B0  4EF9 000056F4           8638                  JMP     ISRCDDEST                 
000055B6                          8639  
000055B6                          8640  **ROR.L
000055B6                          8641  *data reg dest
000055B6  43F9 000061AA           8642  IFRORLDXD       LEA     SRORL,A1
000055BC  4EF9 0000568A           8643                  JMP     DSRCDDEST  
000055C2  43F9 000061AA           8644  IFRORLIXD       LEA     SRORL,A1
000055C8  4EF9 000056F4           8645                  JMP     ISRCDDEST                 
000055CE                          8646                 
000055CE                          8647  *----------------Bad Data-------------*             
000055CE  43F9 00005EAD           8648  IFBADDATA       LEA     DATA,A1
000055D4  6100 0878               8649                  BSR     PRINTSTR
000055D8  6100 082A               8650                  BSR     PRINTAASRC
000055DC  6100 086A               8651                  BSR     PRINTCRLF
000055E0  4EF8 1132               8652                  JMP     CONTINUE  
000055E4                          8653                  
000055E4  43F9 00005EB2           8654  IFINVADDRMODE   LEA     OPCODE,A1
000055EA  6100 0862               8655                  BSR     PRINTSTR
000055EE  6100 0814               8656                  BSR     PRINTAASRC
000055F2  43F9 00005EB9           8657                  LEA     INVADDR,A1
000055F8  6100 0854               8658                  BSR     PRINTSTR
000055FC  6100 084A               8659                  BSR     PRINTCRLF
00005600  4EF8 1132               8660                  JMP     CONTINUE                 
00005604                          8661  
00005604                          8662  *-------------------------------------------*
00005604                          8663  *----------------OPERAND DATA----------------*
00005604                          8664  *-------------------------------------------*                 
00005604                          8665  *guess this is now a section now
00005604                          8666  *i was hoping for the one buggy EA but nope
00005604                          8667  *effective addresses
00005604  6100 0848               8668  EASRC           BSR     PRINTSTR *EA SPORTS ITS IN THE GAME
00005608  6100 07FA               8669                  BSR     PRINTAASRC
0000560C  6100 083A               8670                  BSR     PRINTCRLF
00005610  4EF8 1132               8671                  JMP     CONTINUE
00005614                          8672                  
00005614  6100 0838               8673  EASRCAI         BSR     PRINTSTR
00005618  43F9 00006046           8674                  LEA     AISRC,A1
0000561E  6100 0814               8675                  BSR     FIRSTOP
00005622  43F9 00006065           8676                  LEA     CLPAR,A1
00005628  6100 0824               8677                  BSR     PRINTSTR
0000562C  6100 081A               8678                  BSR     PRINTCRLF
00005630  4EF8 1132               8679                  JMP     CONTINUE 
00005634                          8680  
00005634  6100 0818               8681  EASRCPR         BSR     PRINTSTR
00005638  43F9 00006041           8682                  LEA     PRSRC,A1
0000563E  6100 07F4               8683                  BSR     FIRSTOP
00005642  43F9 00006065           8684                  LEA     CLPAR,A1
00005648  6100 0804               8685                  BSR     PRINTSTR 
0000564C  6100 07FA               8686                  BSR     PRINTCRLF
00005650  4EF8 1132               8687                  JMP     CONTINUE
00005654                          8688  
00005654  6100 07F8               8689  EASRCPO         BSR     PRINTSTR
00005658  43F9 00006046           8690                  LEA     AISRC,A1
0000565E  6100 07D4               8691                  BSR     FIRSTOP
00005662  43F9 0000605E           8692                  LEA     PODEST,A1
00005668  6100 07E4               8693                  BSR     PRINTSTR
0000566C  6100 07DA               8694                  BSR     PRINTCRLF
00005670  4EF8 1132               8695                  JMP     CONTINUE 
00005674                          8696  
00005674  6100 07D8               8697  EASRCD          BSR     PRINTSTR
00005678  43F9 00006038           8698                  LEA     DSRC,A1
0000567E  6100 07B4               8699                  BSR     FIRSTOP
00005682  6100 07C4               8700                  BSR     PRINTCRLF
00005686  4EF8 1132               8701                  JMP     CONTINUE    
0000568A                          8702  
0000568A                          8703  *----------------Data Register Dest-----------*
0000568A                          8704  
0000568A                          8705  *data reg to data reg
0000568A  6100 07C2               8706  DSRCDDEST       BSR     PRINTSTR
0000568E  43F9 00006038           8707                  LEA     DSRC,A1
00005694  6100 079E               8708                  BSR     FIRSTOP
00005698  43F9 0000604D           8709                  LEA     DDEST,A1
0000569E  6100 079E               8710                  BSR     SECONDOP
000056A2  6100 07A4               8711                  BSR     PRINTCRLF
000056A6  4EF8 1132               8712                  JMP     CONTINUE  
000056AA                          8713   
000056AA                          8714  *addr reg to data reg               
000056AA  6100 07A2               8715  ASRCDDEST       BSR     PRINTSTR
000056AE  43F9 0000603B           8716                  LEA     ASRC,A1
000056B4  6100 077E               8717                  BSR     FIRSTOP
000056B8  43F9 0000604D           8718                  LEA     DDEST,A1
000056BE  6100 077E               8719                  BSR     SECONDOP
000056C2  6100 0784               8720                  BSR     PRINTCRLF
000056C6  4EF8 1132               8721                  JMP     CONTINUE   
000056CA                          8722  
000056CA                          8723  *addr indirect to data reg 
000056CA  6100 0782               8724  AISRCDDEST      BSR     PRINTSTR
000056CE  43F9 00006046           8725                  LEA     AISRC,A1
000056D4  6100 075E               8726                  BSR     FIRSTOP
000056D8  43F9 00006065           8727                  LEA     CLPAR,A1
000056DE  6100 076E               8728                  BSR     PRINTSTR
000056E2  43F9 0000604D           8729                  LEA     DDEST,A1
000056E8  6100 0754               8730                  BSR     SECONDOP
000056EC  6100 075A               8731                  BSR     PRINTCRLF
000056F0  4EF8 1132               8732                  JMP     CONTINUE     
000056F4                          8733  
000056F4                          8734  *immediate data to data reg
000056F4  6100 0758               8735  ISRCDDEST       BSR     PRINTSTR
000056F8  43F9 0000603E           8736                  LEA     ISRC,A1
000056FE  6100 0734               8737                  BSR     FIRSTOP
00005702  43F9 0000604D           8738                  LEA     DDEST,A1
00005708  6100 0734               8739                  BSR     SECONDOP
0000570C  6100 073A               8740                  BSR     PRINTCRLF
00005710  4EF8 1132               8741                  JMP     CONTINUE   
00005714                          8742  
00005714                          8743  *abs addr to data reg                
00005714  6100 0738               8744  AASRCDDEST      BSR     PRINTSTR
00005718  6100 06EA               8745                  BSR     PRINTAASRC
0000571C  43F9 0000604D           8746                  LEA     DDEST,A1
00005722  6100 071A               8747                  BSR     SECONDOP
00005726  6100 0720               8748                  BSR     PRINTCRLF
0000572A  4EF8 1132               8749                  JMP     CONTINUE   
0000572E                          8750  
0000572E                          8751  *pre decr to data reg
0000572E  6100 071E               8752  PRSRCDDEST      BSR     PRINTSTR
00005732  43F9 00006041           8753                  LEA     PRSRC,A1
00005738  6100 06FA               8754                  BSR     FIRSTOP
0000573C  43F9 00006065           8755                  LEA     CLPAR,A1
00005742  6100 070A               8756                  BSR     PRINTSTR
00005746  43F9 0000604D           8757                  LEA     DDEST,A1
0000574C  6100 06F0               8758                  BSR     SECONDOP
00005750  6100 06F6               8759                  BSR     PRINTCRLF
00005754  4EF8 1132               8760                  JMP     CONTINUE    
00005758                          8761  
00005758                          8762  *post incre to data reg
00005758  6100 06F4               8763  POSRCDDEST      BSR     PRINTSTR
0000575C  43F9 00006046           8764                  LEA     AISRC,A1
00005762  6100 06D0               8765                  BSR     FIRSTOP
00005766  43F9 0000605E           8766                  LEA     PODEST,A1
0000576C  6100 06E0               8767                  BSR     PRINTSTR
00005770  43F9 0000604D           8768                  LEA     DDEST,A1
00005776  6100 06C6               8769                  BSR     SECONDOP
0000577A  6100 06CC               8770                  BSR     PRINTCRLF
0000577E  4EF8 1132               8771                  JMP     CONTINUE   
00005782                          8772  
00005782                          8773  *----------------Address Register Dest-----------* 
00005782                          8774                 
00005782                          8775  *data reg to addr reg
00005782  6100 06CA               8776  DSRCADEST       BSR     PRINTSTR
00005786  43F9 00006038           8777                  LEA     DSRC,A1
0000578C  6100 06A6               8778                  BSR     FIRSTOP
00005790  43F9 00006050           8779                  LEA     ADEST,A1
00005796  6100 06A6               8780                  BSR     SECONDOP
0000579A  6100 06AC               8781                  BSR     PRINTCRLF
0000579E  4EF8 1132               8782                  JMP     CONTINUE  
000057A2                          8783   
000057A2                          8784  *addr reg to addr reg               
000057A2  6100 06AA               8785  ASRCADEST       BSR     PRINTSTR
000057A6  43F9 0000603B           8786                  LEA     ASRC,A1
000057AC  6100 0686               8787                  BSR     FIRSTOP
000057B0  43F9 00006050           8788                  LEA     ADEST,A1
000057B6  6100 0686               8789                  BSR     SECONDOP
000057BA  6100 068C               8790                  BSR     PRINTCRLF
000057BE  4EF8 1132               8791                  JMP     CONTINUE   
000057C2                          8792  
000057C2                          8793  *addr indirect to addr reg 
000057C2  6100 068A               8794  AISRCADEST      BSR     PRINTSTR
000057C6  43F9 00006046           8795                  LEA     AISRC,A1
000057CC  6100 0666               8796                  BSR     FIRSTOP
000057D0  43F9 00006065           8797                  LEA     CLPAR,A1
000057D6  6100 0676               8798                  BSR     PRINTSTR
000057DA  43F9 00006050           8799                  LEA     ADEST,A1
000057E0  6100 065C               8800                  BSR     SECONDOP
000057E4  6100 0662               8801                  BSR     PRINTCRLF
000057E8  4EF8 1132               8802                  JMP     CONTINUE     
000057EC                          8803  
000057EC                          8804  *immediate data to addr reg
000057EC  6100 0660               8805  ISRCADEST       BSR     PRINTSTR
000057F0  43F9 0000603E           8806                  LEA     ISRC,A1
000057F6  6100 063C               8807                  BSR     FIRSTOP
000057FA  43F9 00006050           8808                  LEA     ADEST,A1
00005800  6100 063C               8809                  BSR     SECONDOP
00005804  6100 0642               8810                  BSR     PRINTCRLF
00005808  4EF8 1132               8811                  JMP     CONTINUE   
0000580C                          8812  
0000580C                          8813  *abs addr to addr reg                
0000580C  6100 0640               8814  AASRCADEST      BSR     PRINTSTR
00005810  6100 05F2               8815                  BSR     PRINTAASRC
00005814  43F9 00006050           8816                  LEA     ADEST,A1
0000581A  6100 0622               8817                  BSR     SECONDOP
0000581E  6100 0628               8818                  BSR     PRINTCRLF
00005822  4EF8 1132               8819                  JMP     CONTINUE   
00005826                          8820  
00005826                          8821  *pre decr to addr reg
00005826  6100 0626               8822  PRSRCADEST      BSR     PRINTSTR
0000582A  43F9 00006041           8823                  LEA     PRSRC,A1
00005830  6100 0602               8824                  BSR     FIRSTOP
00005834  43F9 00006065           8825                  LEA     CLPAR,A1
0000583A  6100 0612               8826                  BSR     PRINTSTR
0000583E  43F9 00006050           8827                  LEA     ADEST,A1
00005844  6100 05F8               8828                  BSR     SECONDOP
00005848  6100 05FE               8829                  BSR     PRINTCRLF
0000584C  4EF8 1132               8830                  JMP     CONTINUE    
00005850                          8831  
00005850                          8832  *post incre to addr reg
00005850  6100 05FC               8833  POSRCADEST      BSR     PRINTSTR
00005854  43F9 00006046           8834                  LEA     AISRC,A1
0000585A  6100 05D8               8835                  BSR     FIRSTOP
0000585E  43F9 0000605E           8836                  LEA     PODEST,A1
00005864  6100 05E8               8837                  BSR     PRINTSTR
00005868  43F9 00006050           8838                  LEA     ADEST,A1
0000586E  6100 05CE               8839                  BSR     SECONDOP
00005872  6100 05D4               8840                  BSR     PRINTCRLF
00005876  4EF8 1132               8841                  JMP     CONTINUE      
0000587A                          8842  
0000587A                          8843  *----Address Register Indirect Dest----------* 
0000587A                          8844                 
0000587A                          8845  *data reg to addr indirect
0000587A  6100 05D2               8846  DSRCAIDEST      BSR     PRINTSTR
0000587E  43F9 00006038           8847                  LEA     DSRC,A1
00005884  6100 05AE               8848                  BSR     FIRSTOP
00005888  43F9 00006061           8849                  LEA     AIDEST,A1
0000588E  6100 05AE               8850                  BSR     SECONDOP
00005892  43F9 00006065           8851                  LEA     CLPAR,A1
00005898  6100 05B4               8852                  BSR     PRINTSTR
0000589C  6100 05AA               8853                  BSR     PRINTCRLF
000058A0  4EF8 1132               8854                  JMP     CONTINUE  
000058A4                          8855   
000058A4                          8856  *addr reg to addr indirect
000058A4  6100 05A8               8857  ASRCAIDEST      BSR     PRINTSTR
000058A8  43F9 0000603B           8858                  LEA     ASRC,A1
000058AE  6100 0584               8859                  BSR     FIRSTOP
000058B2  43F9 00006061           8860                  LEA     AIDEST,A1
000058B8  6100 0584               8861                  BSR     SECONDOP
000058BC  43F9 00006065           8862                  LEA     CLPAR,A1
000058C2  6100 058A               8863                  BSR     PRINTSTR
000058C6  6100 0580               8864                  BSR     PRINTCRLF
000058CA  4EF8 1132               8865                  JMP     CONTINUE   
000058CE                          8866  
000058CE                          8867  *addr indirect to addr indirect
000058CE  6100 057E               8868  AISRCAIDEST     BSR     PRINTSTR
000058D2  43F9 00006046           8869                  LEA     AISRC,A1
000058D8  6100 055A               8870                  BSR     FIRSTOP
000058DC  43F9 00006065           8871                  LEA     CLPAR,A1
000058E2  6100 056A               8872                  BSR     PRINTSTR
000058E6  43F9 00006061           8873                  LEA     AIDEST,A1
000058EC  6100 0550               8874                  BSR     SECONDOP
000058F0  43F9 00006065           8875                  LEA     CLPAR,A1
000058F6  6100 0556               8876                  BSR     PRINTSTR
000058FA  6100 054C               8877                  BSR     PRINTCRLF
000058FE  4EF8 1132               8878                  JMP     CONTINUE     
00005902                          8879  
00005902                          8880  *immediate data to addr indirect
00005902  6100 054A               8881  ISRCAIDEST      BSR     PRINTSTR
00005906  43F9 0000603E           8882                  LEA     ISRC,A1
0000590C  6100 0526               8883                  BSR     FIRSTOP
00005910  43F9 00006061           8884                  LEA     AIDEST,A1
00005916  6100 0526               8885                  BSR     SECONDOP
0000591A  43F9 00006065           8886                  LEA     CLPAR,A1
00005920  6100 052C               8887                  BSR     PRINTSTR
00005924  6100 0522               8888                  BSR     PRINTCRLF
00005928  4EF8 1132               8889                  JMP     CONTINUE   
0000592C                          8890  
0000592C                          8891  *abs addr to addr indirect
0000592C  6100 0520               8892  AASRCAIDEST     BSR     PRINTSTR
00005930  6100 04D2               8893                  BSR     PRINTAASRC
00005934  43F9 00006061           8894                  LEA     AIDEST,A1
0000593A  6100 0502               8895                  BSR     SECONDOP
0000593E  43F9 00006065           8896                  LEA     CLPAR,A1
00005944  6100 0508               8897                  BSR     PRINTSTR
00005948  6100 04FE               8898                  BSR     PRINTCRLF
0000594C  4EF8 1132               8899                  JMP     CONTINUE   
00005950                          8900  
00005950                          8901  *pre decr to addr indirect
00005950  6100 04FC               8902  PRSRCAIDEST     BSR     PRINTSTR
00005954  43F9 00006041           8903                  LEA     PRSRC,A1
0000595A  6100 04D8               8904                  BSR     FIRSTOP
0000595E  43F9 00006065           8905                  LEA     CLPAR,A1
00005964  6100 04E8               8906                  BSR     PRINTSTR
00005968  43F9 00006061           8907                  LEA     AIDEST,A1
0000596E  6100 04CE               8908                  BSR     SECONDOP
00005972  43F9 00006065           8909                  LEA     CLPAR,A1
00005978  6100 04D4               8910                  BSR     PRINTSTR
0000597C  6100 04CA               8911                  BSR     PRINTCRLF
00005980  4EF8 1132               8912                  JMP     CONTINUE    
00005984                          8913  
00005984                          8914  *post incre to addr indirect
00005984  6100 04C8               8915  POSRCAIDEST     BSR     PRINTSTR
00005988  43F9 00006046           8916                  LEA     AISRC,A1
0000598E  6100 04A4               8917                  BSR     FIRSTOP
00005992  43F9 0000605E           8918                  LEA     PODEST,A1
00005998  6100 04B4               8919                  BSR     PRINTSTR
0000599C  43F9 00006061           8920                  LEA     AIDEST,A1
000059A2  6100 049A               8921                  BSR     SECONDOP
000059A6  43F9 00006065           8922                  LEA     CLPAR,A1
000059AC  6100 04A0               8923                  BSR     PRINTSTR
000059B0  6100 0496               8924                  BSR     PRINTCRLF
000059B4  4EF8 1132               8925                  JMP     CONTINUE        
000059B8                          8926  
000059B8                          8927  *----Immediate data Dest----------* 
000059B8                          8928                 
000059B8                          8929  *data reg to immediate
000059B8  6100 0494               8930  DSRCIDEST       BSR     PRINTSTR
000059BC  43F9 00006038           8931                  LEA     DSRC,A1
000059C2  6100 0470               8932                  BSR     FIRSTOP
000059C6  43F9 00006053           8933                  LEA     IDEST,A1
000059CC  6100 0470               8934                  BSR     SECONDOP
000059D0  6100 0476               8935                  BSR     PRINTCRLF
000059D4  4EF8 1132               8936                  JMP     CONTINUE  
000059D8                          8937   
000059D8                          8938  *addr reg to immediate
000059D8  6100 0474               8939  ASRCIDEST       BSR     PRINTSTR
000059DC  43F9 0000603B           8940                  LEA     ASRC,A1
000059E2  6100 0450               8941                  BSR     FIRSTOP
000059E6  43F9 00006053           8942                  LEA     IDEST,A1
000059EC  6100 0450               8943                  BSR     SECONDOP
000059F0  6100 0456               8944                  BSR     PRINTCRLF
000059F4  4EF8 1132               8945                  JMP     CONTINUE   
000059F8                          8946  
000059F8                          8947  *addr indirect to immediate
000059F8  6100 0454               8948  AISRCIDEST      BSR     PRINTSTR
000059FC  43F9 00006046           8949                  LEA     AISRC,A1
00005A02  6100 0430               8950                  BSR     FIRSTOP
00005A06  43F9 00006065           8951                  LEA     CLPAR,A1
00005A0C  6100 0440               8952                  BSR     PRINTSTR
00005A10  43F9 00006053           8953                  LEA     IDEST,A1
00005A16  6100 0426               8954                  BSR     SECONDOP
00005A1A  6100 042C               8955                  BSR     PRINTCRLF
00005A1E  4EF8 1132               8956                  JMP     CONTINUE     
00005A22                          8957  
00005A22                          8958  *immediate data to immediate
00005A22  6100 042A               8959  ISRCIDEST       BSR     PRINTSTR
00005A26  43F9 0000603E           8960                  LEA     ISRC,A1
00005A2C  6100 0406               8961                  BSR     FIRSTOP
00005A30  43F9 00006053           8962                  LEA     IDEST,A1
00005A36  6100 0406               8963                  BSR     SECONDOP
00005A3A  6100 040C               8964                  BSR     PRINTCRLF
00005A3E  4EF8 1132               8965                  JMP     CONTINUE   
00005A42                          8966  
00005A42                          8967  *abs addr to immediate
00005A42  6100 040A               8968  AASRCIDEST      BSR     PRINTSTR
00005A46  6100 03BC               8969                  BSR     PRINTAASRC
00005A4A  43F9 00006053           8970                  LEA     IDEST,A1
00005A50  6100 03EC               8971                  BSR     SECONDOP
00005A54  6100 03F2               8972                  BSR     PRINTCRLF
00005A58  4EF8 1132               8973                  JMP     CONTINUE   
00005A5C                          8974  
00005A5C                          8975  *pre decr to immediate
00005A5C  6100 03F0               8976  PRSRCIDEST      BSR     PRINTSTR
00005A60  43F9 00006041           8977                  LEA     PRSRC,A1
00005A66  6100 03CC               8978                  BSR     FIRSTOP
00005A6A  43F9 00006065           8979                  LEA     CLPAR,A1
00005A70  6100 03DC               8980                  BSR     PRINTSTR
00005A74  43F9 00006053           8981                  LEA     IDEST,A1
00005A7A  6100 03C2               8982                  BSR     SECONDOP
00005A7E  6100 03C8               8983                  BSR     PRINTCRLF
00005A82  4EF8 1132               8984                  JMP     CONTINUE    
00005A86                          8985  
00005A86                          8986  *post incre to immediate
00005A86  6100 03C6               8987  POSRCIDEST      BSR     PRINTSTR
00005A8A  43F9 00006046           8988                  LEA     AISRC,A1
00005A90  6100 03A2               8989                  BSR     FIRSTOP
00005A94  43F9 0000605E           8990                  LEA     PODEST,A1
00005A9A  6100 03B2               8991                  BSR     PRINTSTR
00005A9E  43F9 00006061           8992                  LEA     AIDEST,A1
00005AA4  6100 0398               8993                  BSR     SECONDOP
00005AA8  43F9 00006065           8994                  LEA     CLPAR,A1
00005AAE  6100 039E               8995                  BSR     PRINTSTR
00005AB2  6100 0394               8996                  BSR     PRINTCRLF
00005AB6  4EF8 1132               8997                  JMP     CONTINUE  
00005ABA                          8998  
00005ABA                          8999  *----Absolute Addressing Dest--------* 
00005ABA                          9000      
00005ABA                          9001  *data reg to abs addr
00005ABA  6100 0392               9002  DSRCAADEST      BSR     PRINTSTR
00005ABE  43F9 00006038           9003                  LEA     DSRC,A1
00005AC4  6100 036E               9004                  BSR     FIRSTOP
00005AC8  6100 0352               9005                  BSR     PRINTAADST
00005ACC  6100 037A               9006                  BSR     PRINTCRLF
00005AD0  4EF8 1132               9007                  JMP     CONTINUE  
00005AD4                          9008   
00005AD4                          9009  *addr reg to abs addr              
00005AD4  6100 0378               9010  ASRCAADEST      BSR     PRINTSTR
00005AD8  43F9 0000603B           9011                  LEA     ASRC,A1
00005ADE  6100 0354               9012                  BSR     FIRSTOP
00005AE2  6100 0338               9013                  BSR     PRINTAADST
00005AE6  6100 0360               9014                  BSR     PRINTCRLF
00005AEA  4EF8 1132               9015                  JMP     CONTINUE   
00005AEE                          9016  
00005AEE                          9017  *addr indirect to abs addr
00005AEE  6100 035E               9018  AISRCAADEST     BSR     PRINTSTR
00005AF2  43F9 00006046           9019                  LEA     AISRC,A1
00005AF8  6100 033A               9020                  BSR     FIRSTOP
00005AFC  43F9 00006065           9021                  LEA     CLPAR,A1
00005B02  6100 034A               9022                  BSR     PRINTSTR
00005B06  6100 0314               9023                  BSR     PRINTAADST
00005B0A  6100 033C               9024                  BSR     PRINTCRLF
00005B0E  4EF8 1132               9025                  JMP     CONTINUE     
00005B12                          9026  
00005B12                          9027  *immediate data to abs addr
00005B12  6100 033A               9028  ISRCAADEST      BSR     PRINTSTR
00005B16  43F9 0000603E           9029                  LEA     ISRC,A1
00005B1C  6100 0316               9030                  BSR     FIRSTOP
00005B20  6100 02FA               9031                  BSR     PRINTAADST
00005B24  6100 0322               9032                  BSR     PRINTCRLF
00005B28  4EF8 1132               9033                  JMP     CONTINUE   
00005B2C                          9034  
00005B2C                          9035  *abs addr to abs addr              
00005B2C  6100 0320               9036  AASRCAADEST     BSR     PRINTSTR
00005B30  6100 02D2               9037                  BSR     PRINTAASRC
00005B34  6100 02E6               9038                  BSR     PRINTAADST
00005B38  6100 030E               9039                  BSR     PRINTCRLF
00005B3C  4EF8 1132               9040                  JMP     CONTINUE   
00005B40                          9041  
00005B40                          9042  *pre decr to abs addr
00005B40  6100 030C               9043  PRSRCAADEST     BSR     PRINTSTR
00005B44  43F9 00006041           9044                  LEA     PRSRC,A1
00005B4A  6100 02E8               9045                  BSR     FIRSTOP
00005B4E  43F9 00006065           9046                  LEA     CLPAR,A1
00005B54  6100 02F8               9047                  BSR     PRINTSTR
00005B58  6100 02C2               9048                  BSR     PRINTAADST
00005B5C  6100 02EA               9049                  BSR     PRINTCRLF
00005B60  4EF8 1132               9050                  JMP     CONTINUE    
00005B64                          9051  
00005B64                          9052  *post incre to abs addr
00005B64  6100 02E8               9053  POSRCAADEST     BSR     PRINTSTR
00005B68  43F9 00006046           9054                  LEA     AISRC,A1
00005B6E  6100 02C4               9055                  BSR     FIRSTOP
00005B72  43F9 0000605E           9056                  LEA     PODEST,A1
00005B78  6100 02D4               9057                  BSR     PRINTSTR
00005B7C  6100 029E               9058                  BSR     PRINTAADST
00005B80  6100 02C6               9059                  BSR     PRINTCRLF
00005B84  4EF8 1132               9060                  JMP     CONTINUE          
00005B88                          9061     
00005B88                          9062  *----Address Pre Decrement Dest-------* 
00005B88                          9063                 
00005B88                          9064  *data reg to pre decr
00005B88  6100 02C4               9065  DSRCPRDEST      BSR     PRINTSTR
00005B8C  43F9 00006038           9066                  LEA     DSRC,A1
00005B92  6100 02A0               9067                  BSR     FIRSTOP
00005B96  43F9 00006059           9068                  LEA     PRDEST,A1
00005B9C  6100 02A0               9069                  BSR     SECONDOP
00005BA0  43F9 00006065           9070                  LEA     CLPAR,A1
00005BA6  6100 02A6               9071                  BSR     PRINTSTR
00005BAA  6100 029C               9072                  BSR     PRINTCRLF
00005BAE  4EF8 1132               9073                  JMP     CONTINUE  
00005BB2                          9074   
00005BB2                          9075  *addr reg to pre decr
00005BB2  6100 029A               9076  ASRCPRDEST      BSR     PRINTSTR
00005BB6  43F9 0000603B           9077                  LEA     ASRC,A1
00005BBC  6100 0276               9078                  BSR     FIRSTOP
00005BC0  43F9 00006059           9079                  LEA     PRDEST,A1
00005BC6  6100 0276               9080                  BSR     SECONDOP
00005BCA  43F9 00006065           9081                  LEA     CLPAR,A1
00005BD0  6100 027C               9082                  BSR     PRINTSTR
00005BD4  6100 0272               9083                  BSR     PRINTCRLF
00005BD8  4EF8 1132               9084                  JMP     CONTINUE   
00005BDC                          9085  
00005BDC                          9086  *addr indirect to pre decr
00005BDC  6100 0270               9087  AISRCPRDEST     BSR     PRINTSTR
00005BE0  43F9 00006046           9088                  LEA     AISRC,A1
00005BE6  6100 024C               9089                  BSR     FIRSTOP
00005BEA  43F9 00006065           9090                  LEA     CLPAR,A1
00005BF0  6100 025C               9091                  BSR     PRINTSTR
00005BF4  43F9 00006059           9092                  LEA     PRDEST,A1
00005BFA  6100 0242               9093                  BSR     SECONDOP
00005BFE  43F9 00006065           9094                  LEA     CLPAR,A1
00005C04  6100 0248               9095                  BSR     PRINTSTR
00005C08  6100 023E               9096                  BSR     PRINTCRLF
00005C0C  4EF8 1132               9097                  JMP     CONTINUE     
00005C10                          9098  
00005C10                          9099  *immediate data to pre decr
00005C10  6100 023C               9100  ISRCPRDEST      BSR     PRINTSTR
00005C14  43F9 0000603E           9101                  LEA     ISRC,A1
00005C1A  6100 0218               9102                  BSR     FIRSTOP
00005C1E  43F9 00006059           9103                  LEA     PRDEST,A1
00005C24  6100 0218               9104                  BSR     SECONDOP
00005C28  43F9 00006065           9105                  LEA     CLPAR,A1
00005C2E  6100 021E               9106                  BSR     PRINTSTR
00005C32  6100 0214               9107                  BSR     PRINTCRLF
00005C36  4EF8 1132               9108                  JMP     CONTINUE   
00005C3A                          9109  
00005C3A                          9110  *abs addr to pre decr
00005C3A  6100 0212               9111  AASRCPRDEST     BSR     PRINTSTR
00005C3E  6100 01C4               9112                  BSR     PRINTAASRC
00005C42  43F9 00006059           9113                  LEA     PRDEST,A1
00005C48  6100 01F4               9114                  BSR     SECONDOP
00005C4C  43F9 00006065           9115                  LEA     CLPAR,A1
00005C52  6100 01FA               9116                  BSR     PRINTSTR
00005C56  6100 01F0               9117                  BSR     PRINTCRLF
00005C5A  4EF8 1132               9118                  JMP     CONTINUE   
00005C5E                          9119  
00005C5E                          9120  *pre decr to pre decr
00005C5E  6100 01EE               9121  PRSRCPRDEST     BSR     PRINTSTR
00005C62  43F9 00006041           9122                  LEA     PRSRC,A1
00005C68  6100 01CA               9123                  BSR     FIRSTOP
00005C6C  43F9 00006065           9124                  LEA     CLPAR,A1
00005C72  6100 01DA               9125                  BSR     PRINTSTR
00005C76  43F9 00006059           9126                  LEA     PRDEST,A1
00005C7C  6100 01C0               9127                  BSR     SECONDOP
00005C80  43F9 00006065           9128                  LEA     CLPAR,A1
00005C86  6100 01C6               9129                  BSR     PRINTSTR
00005C8A  6100 01BC               9130                  BSR     PRINTCRLF
00005C8E  4EF8 1132               9131                  JMP     CONTINUE    
00005C92                          9132  
00005C92                          9133  *post incre to pre decr
00005C92  6100 01BA               9134  POSRCPRDEST     BSR     PRINTSTR
00005C96  43F9 00006046           9135                  LEA     AISRC,A1
00005C9C  6100 0196               9136                  BSR     FIRSTOP
00005CA0  43F9 0000605E           9137                  LEA     PODEST,A1
00005CA6  6100 01A6               9138                  BSR     PRINTSTR
00005CAA  43F9 00006059           9139                  LEA     PRDEST,A1
00005CB0  6100 018C               9140                  BSR     SECONDOP
00005CB4  43F9 00006065           9141                  LEA     CLPAR,A1
00005CBA  6100 0192               9142                  BSR     PRINTSTR
00005CBE  6100 0188               9143                  BSR     PRINTCRLF
00005CC2  4EF8 1132               9144                  JMP     CONTINUE   
00005CC6                          9145  
00005CC6                          9146  *----Address Post Increment Dest----------* 
00005CC6                          9147                 
00005CC6                          9148  *data reg to post incre
00005CC6  6100 0186               9149  DSRCPODEST      BSR     PRINTSTR
00005CCA  43F9 00006038           9150                  LEA     DSRC,A1
00005CD0  6100 0162               9151                  BSR     FIRSTOP
00005CD4  43F9 00006061           9152                  LEA     AIDEST,A1
00005CDA  6100 0162               9153                  BSR     SECONDOP
00005CDE  43F9 0000605E           9154                  LEA     PODEST,A1
00005CE4  6100 0168               9155                  BSR     PRINTSTR
00005CE8  6100 015E               9156                  BSR     PRINTCRLF
00005CEC  4EF8 1132               9157                  JMP     CONTINUE  
00005CF0                          9158   
00005CF0                          9159  *addr reg to post incre
00005CF0  6100 015C               9160  ASRCPODEST      BSR     PRINTSTR
00005CF4  43F9 0000603B           9161                  LEA     ASRC,A1
00005CFA  6100 0138               9162                  BSR     FIRSTOP
00005CFE  43F9 00006061           9163                  LEA     AIDEST,A1
00005D04  6100 0138               9164                  BSR     SECONDOP
00005D08  43F9 0000605E           9165                  LEA     PODEST,A1
00005D0E  6100 013E               9166                  BSR     PRINTSTR
00005D12  6100 0134               9167                  BSR     PRINTCRLF
00005D16  4EF8 1132               9168                  JMP     CONTINUE   
00005D1A                          9169  
00005D1A                          9170  *addr indirect to post incre
00005D1A  6100 0132               9171  AISRCPODEST     BSR     PRINTSTR
00005D1E  43F9 00006046           9172                  LEA     AISRC,A1
00005D24  6100 010E               9173                  BSR     FIRSTOP
00005D28  43F9 00006065           9174                  LEA     CLPAR,A1
00005D2E  6100 011E               9175                  BSR     PRINTSTR
00005D32  43F9 00006061           9176                  LEA     AIDEST,A1
00005D38  6100 0104               9177                  BSR     SECONDOP
00005D3C  43F9 0000605E           9178                  LEA     PODEST,A1
00005D42  6100 010A               9179                  BSR     PRINTSTR
00005D46  6100 0100               9180                  BSR     PRINTCRLF
00005D4A  4EF8 1132               9181                  JMP     CONTINUE     
00005D4E                          9182  
00005D4E                          9183  *immediate data to post incre
00005D4E  6100 00FE               9184  ISRCPODEST      BSR     PRINTSTR
00005D52  43F9 0000603E           9185                  LEA     ISRC,A1
00005D58  6100 00DA               9186                  BSR     FIRSTOP
00005D5C  43F9 00006061           9187                  LEA     AIDEST,A1
00005D62  6100 00DA               9188                  BSR     SECONDOP
00005D66  43F9 0000605E           9189                  LEA     PODEST,A1
00005D6C  6100 00E0               9190                  BSR     PRINTSTR
00005D70  6100 00D6               9191                  BSR     PRINTCRLF
00005D74  4EF8 1132               9192                  JMP     CONTINUE   
00005D78                          9193  
00005D78                          9194  *abs addr to post incre
00005D78  6100 00D4               9195  AASRCPODEST     BSR     PRINTSTR
00005D7C  6100 0086               9196                  BSR     PRINTAASRC
00005D80  43F9 00006061           9197                  LEA     AIDEST,A1
00005D86  6100 00B6               9198                  BSR     SECONDOP
00005D8A  43F9 0000605E           9199                  LEA     PODEST,A1
00005D90  6100 00BC               9200                  BSR     PRINTSTR
00005D94  6100 00B2               9201                  BSR     PRINTCRLF
00005D98  4EF8 1132               9202                  JMP     CONTINUE   
00005D9C                          9203  
00005D9C                          9204  *pre decr to post incre
00005D9C  6100 00B0               9205  PRSRCPODEST     BSR     PRINTSTR
00005DA0  43F9 00006041           9206                  LEA     PRSRC,A1
00005DA6  6100 008C               9207                  BSR     FIRSTOP
00005DAA  43F9 00006065           9208                  LEA     CLPAR,A1
00005DB0  6100 009C               9209                  BSR     PRINTSTR
00005DB4  43F9 00006061           9210                  LEA     AIDEST,A1
00005DBA  6100 0082               9211                  BSR     SECONDOP
00005DBE  43F9 0000605E           9212                  LEA     PODEST,A1
00005DC4  6100 0088               9213                  BSR     PRINTSTR
00005DC8  6100 007E               9214                  BSR     PRINTCRLF
00005DCC  4EF8 1132               9215                  JMP     CONTINUE    
00005DD0                          9216  
00005DD0                          9217  *post incre to post incre
00005DD0  6100 007C               9218  POSRCPODEST     BSR     PRINTSTR
00005DD4  43F9 00006046           9219                  LEA     AISRC,A1
00005DDA  6100 0058               9220                  BSR     FIRSTOP
00005DDE  43F9 0000605E           9221                  LEA     PODEST,A1
00005DE4  6100 0068               9222                  BSR     PRINTSTR
00005DE8  43F9 00006061           9223                  LEA     AIDEST,A1
00005DEE  6100 004E               9224                  BSR     SECONDOP
00005DF2  43F9 0000605E           9225                  LEA     PODEST,A1
00005DF8  6100 0054               9226                  BSR     PRINTSTR
00005DFC  6100 004A               9227                  BSR     PRINTCRLF
00005E00  4EF8 1132               9228                  JMP     CONTINUE   
00005E04                          9229               
00005E04                          9230  *----------------I/O Helpers----------------*
00005E04                          9231  
00005E04                          9232  *used for w/l addresses (since they can't be displayed in decimal)                
00005E04  43F9 0000604A           9233  PRINTAASRC      LEA     AASRC,A1
00005E0A  6100 0042               9234                  BSR     PRINTSTR
00005E0E  143C 0010               9235                  MOVE.B  #16,D2
00005E12  103C 000F               9236                  MOVE.B  #15,D0
00005E16  2206                    9237                  MOVE.L  D6,D1
00005E18  4E4F                    9238                  TRAP    #15
00005E1A  4E75                    9239                  RTS                
00005E1C                          9240  
00005E1C                          9241  *used for w/l addresses (since they can't be displayed in decimal) 
00005E1C  43F9 00006056           9242  PRINTAADST      LEA     AADEST,A1
00005E22  6100 002A               9243                  BSR     PRINTSTR
00005E26  143C 0010               9244                  MOVE.B  #16,D2
00005E2A  103C 000F               9245                  MOVE.B  #15,D0
00005E2E  2207                    9246                  MOVE.L  D7,D1
00005E30  4E4F                    9247                  TRAP    #15
00005E32  4E75                    9248                  RTS 
00005E34                          9249                  
00005E34                          9250  *prints first op value w/ string
00005E34  2206                    9251  FIRSTOP         MOVE.L  D6,D1
00005E36  103C 0011               9252                  MOVE.B  #17,D0
00005E3A  4E4F                    9253                  TRAP    #15
00005E3C  4E75                    9254                  RTS
00005E3E                          9255  
00005E3E                          9256  *prints second op value w/ string             
00005E3E  2207                    9257  SECONDOP        MOVE.L  D7,D1
00005E40  103C 0011               9258                  MOVE.B  #17,D0
00005E44  4E4F                    9259                  TRAP    #15
00005E46  4E75                    9260                  RTS
00005E48                          9261                  
00005E48                          9262  
00005E48  43F9 00005EA8           9263  PRINTCRLF       LEA     CRLF,A1
00005E4E  103C 000E               9264  PRINTSTR        MOVE.B  #14,D0
00005E52  4E4F                    9265                  TRAP    #15
00005E54  4E75                    9266                  RTS
00005E56                          9267                  
00005E56  387C 001F               9268  NEXTPAGE        MOVE.W   #31,A4 *next page wooo
00005E5A  43F9 00005FA8           9269                  LEA      ENTPAGE,A1
00005E60  61EC                    9270                  BSR      PRINTSTR
00005E62  103C 0005               9271                  MOVE.B   #5,D0 *get a char (in this case, enter key)
00005E66  4E4F                    9272                  TRAP     #15
00005E68  6100 0006               9273                  BSR      FLUSH
00005E6C  4EF8 1132               9274                  JMP      CONTINUE
00005E70                          9275                               
00005E70  103C 000B               9276  FLUSH           MOVE.B   #11,D0
00005E74  323C FF00               9277                  MOVE.W   #$FF00,D1 *flush print screen
00005E78  4E4F                    9278                  TRAP     #15
00005E7A  4E75                    9279                  RTS               
00005E7C                          9280                 
00005E7C  240E                    9281  PRINTZEROES     MOVE.L   A6,D2
00005E7E  C483                    9282                  AND.L    D3,D2
00005E80  4E71                    9283                  NOP
00005E82  B4BC 00000000           9284                  CMP.L    #0,D2
00005E88  6600 001A               9285                  BNE      FINPRINTZEROES
00005E8C  E89B                    9286                  ROR.L    #4,D3
00005E8E  B6BC F0000000           9287                  CMP.L    #$F0000000,D3
00005E94  6700 000E               9288                  BEQ      FINPRINTZEROES
00005E98  103C 0006               9289                  MOVE.B   #6,D0
00005E9C  123C 0030               9290                  MOVE.B   #$30,D1 *0
00005EA0  4E4F                    9291                  TRAP     #15
00005EA2  60D8                    9292                  BRA      PRINTZEROES
00005EA4                          9293  
00005EA4  4E75                    9294  FINPRINTZEROES  RTS
00005EA6                          9295  
00005EA6                          9296  *-------------------------------------------*
00005EA6                          9297  *----------------STRING DATA----------------*
00005EA6                          9298  *-------------------------------------------*
00005EA6                          9299  
00005EA6  =0000000D               9300  CR      EQU     $0D
00005EA6  =0000000A               9301  LF      EQU     $0A
00005EA6                          9302  
00005EA6= 09 00                   9303  TB      DC.B    $09,0
00005EA8= 0D 0A 00                9304  CRLF    DC.B    CR,LF,0
00005EAB                          9305  
00005EAB= 24 00                   9306  DOLLAR  DC.B    '$',0
00005EAD= 44 41 54 41 00          9307  DATA    DC.B    'DATA',0
00005EB2= 4F 50 43 4F 44 45 00    9308  OPCODE  DC.B    'OPCODE',0
00005EB9= 20 49 4E 56 41 4C ...   9309  INVADDR DC.B    ' INVALID ADDRESSING MODE',0
00005ED2                          9310  
00005ED2= 54 65 61 6D 20 52 ...   9311  WELCOME DC.B    'Team Rocket Lake Presents...',CR,LF,'Our CSS 422 68k Disassembler!',CR,LF,CR,LF,0
00005F12= 45 6E 74 65 72 20 ...   9312  ENTADDR1 DC.B   'Enter the lower bound long address in hexadecimal (example: 100A,11BC88): ',0
00005F5D= 45 6E 74 65 72 20 ...   9313  ENTADDR2 DC.B   'Enter the upper bound long address in hexadecimal (example: 100A,11BC88): ',0
00005FA8= 2D 2D 2D 2D 2D 2D ...   9314  ENTPAGE  DC.B   '----------NEXT PAGE--------->',0
00005FC6= 44 69 73 61 73 73 ...   9315  STARTAGAIN DC.B 'Disassembly complete. Do you wish to continue? Type y or n.',0
00006002= 49 6E 70 75 74 20 ...   9316  ERRMSG   DC.B 'Input error. Please follow the format as described.',CR,LF,0
00006038                          9317  
00006038= 20 44 00                9318  DSRC    DC.B    ' D',0
0000603B= 20 41 00                9319  ASRC    DC.B    ' A',0
0000603E= 20 23 00                9320  ISRC    DC.B    ' #',0
00006041= 20 2D 28 41 00          9321  PRSRC   DC.B    ' -(A',0
00006046= 20 28 41 00             9322  AISRC   DC.B    ' (A',0
0000604A= 20 24 00                9323  AASRC   DC.B     ' $',0
0000604D                          9324  
0000604D= 2C 44 00                9325  DDEST   DC.B    ',D',0
00006050= 2C 41 00                9326  ADEST   DC.B    ',A',0
00006053= 2C 23 00                9327  IDEST   DC.B    ',#',0
00006056= 2C 24 00                9328  AADEST  DC.B    ',$',0
00006059= 2C 2D 28 41 00          9329  PRDEST  DC.B    ',-(A',0
0000605E= 29 2B 00                9330  PODEST  DC.B    ')+',0
00006061= 2C 28 41 00             9331  AIDEST  DC.B    ',(A',0
00006065= 29 00                   9332  CLPAR   DC.B    ')',0     
00006067                          9333  
00006067                          9334  *---------------- NOP Variants-------------*
00006067= 4E 4F 50 00             9335  SNOP    DC.B    'NOP',0 *snop.
0000606B                          9336  
0000606B                          9337  *---------------- MOVE Variants-------------*
0000606B= 4D 4F 56 45 2E 42 00    9338  SMOVEB DC.B 'MOVE.B',0
00006072= 4D 4F 56 45 2E 57 00    9339  SMOVEW DC.B 'MOVE.W',0
00006079= 4D 4F 56 45 2E 4C 00    9340  SMOVEL DC.B 'MOVE.L',0
00006080                          9341  
00006080                          9342  *---------------- MOVEA Variants-------------*
00006080                          9343  *Data reg
00006080= 4D 4F 56 45 41 2E ...   9344  SMOVEAW DC.B 'MOVEA.W',0
00006088= 4D 4F 56 45 41 2E ...   9345  SMOVEAL DC.B 'MOVEA.L',0
00006090                          9346  
00006090                          9347  *--------------MOVEQ VARIANTS---------------*
00006090                          9348  *only works with data registers and longs *
00006090= 4D 4F 56 45 51 00       9349  SMOVEQ DC.B 'MOVEQ',0
00006096                          9350  
00006096                          9351  *--------------ADD VARIANTS---------------*
00006096= 41 44 44 2E 42 00       9352  SADDB DC.B 'ADD.B',0
0000609C= 41 44 44 2E 57 00       9353  SADDW DC.B 'ADD.W',0
000060A2= 41 44 44 2E 4C 00       9354  SADDL DC.B 'ADD.L',0
000060A8                          9355  
000060A8                          9356  *--------------ADDA VARIANTS---------------*
000060A8= 41 44 44 41 2E 57 00    9357  SADDAW DC.B 'ADDA.W',0
000060AF= 41 44 44 41 2E 4C 00    9358  SADDAL DC.B 'ADDA.L',0
000060B6                          9359  
000060B6                          9360  *--------------ADDQ VARIANTS---------------*
000060B6                          9361  *only value for immidiate data to a location*
000060B6= 41 44 44 51 2E 42 00    9362  SADDQB DC.B 'ADDQ.B',0
000060BD= 41 44 44 51 2E 57 00    9363  SADDQW DC.B 'ADDQ.W',0
000060C4= 41 44 44 51 2E 4C 00    9364  SADDQL DC.B 'ADDQ.L',0
000060CB                          9365  
000060CB                          9366  *--------------------SUB VARIANTS-----------------------------*
000060CB= 53 55 42 2E 42 00       9367  SSUBB DC.B 'SUB.B',0
000060D1= 53 55 42 2E 57 00       9368  SSUBW DC.B 'SUB.W',0
000060D7= 53 55 42 2E 4C 00       9369  SSUBL DC.B 'SUB.L',0
000060DD                          9370  
000060DD                          9371  *---------------- LEA Variants-------------*
000060DD                          9372  *LEA IS ONLY VALID FOR LONG WORD, THEREFORE DIDN'T SPECIFY IN THE CONSTANT NAME*
000060DD= 4C 45 41 00             9373  SLEA DC.B 'LEA',0
000060E1                          9374  
000060E1                          9375  **---------------- NOT Variants-------------*
000060E1= 4E 4F 54 2E 42 00       9376  SNOTB DC.B 'NOT.B',0
000060E7= 4E 4F 54 2E 57 00       9377  SNOTW DC.B 'NOT.W',0
000060ED= 4E 4F 54 2E 4C 00       9378  SNOTL DC.B 'NOT.L',0
000060F3                          9379  
000060F3                          9380  **---------------- AND Variants-------------*
000060F3= 41 4E 44 2E 42 00       9381  SANDB DC.B 'AND.B',0
000060F9= 41 4E 44 2E 57 00       9382  SANDW DC.B 'AND.W',0
000060FF= 41 4E 44 2E 4C 00       9383  SANDL DC.B 'AND.L',0
00006105                          9384  
00006105                          9385  **---------------- OR Variants--------------*
00006105= 4F 52 2E 42 00          9386  SORB DC.B 'OR.B',0
0000610A= 4F 52 2E 57 00          9387  SORW DC.B 'OR.W',0
0000610F= 4F 52 2E 4C 00          9388  SORL DC.B 'OR.L',0
00006114                          9389  
00006114                          9390  *---------------- JSR Variants-------------*
00006114                          9391  *NO SIZE* 
00006114= 4A 53 52 00             9392  SJSR DC.B 'JSR',0
00006118                          9393  
00006118                          9394  *---------------- RTS Variants-------------*
00006118= 52 54 53 00             9395  SRTS DC.B 'RTS',0
0000611C                          9396  
0000611C                          9397  *---------------- Bcc Variants-------------*
0000611C= 42 47 54 00             9398  SBGT  DC.B 'BGT',0
00006120= 42 4C 45 00             9399  SBLE  DC.B 'BLE',0
00006124= 42 45 51 00             9400  SBEQ  DC.B 'BEQ',0
00006128                          9401  
00006128= 42 52 41 00             9402  SBRA  DC.B 'BRA',0
0000612C                          9403  
0000612C                          9404  *---------------- ASL Variants--------------*
0000612C= 41 53 4C 00             9405  SASL  DC.B 'ASL',0
00006130= 41 53 4C 2E 42 00       9406  SASLB DC.B 'ASL.B',0
00006136= 41 53 4C 2E 57 00       9407  SASLW DC.B 'ASL.W',0
0000613C= 41 53 4C 2E 4C 00       9408  SASLL DC.B 'ASL.L',0
00006142                          9409  
00006142                          9410  *---------------- ASR Variants--------------*
00006142= 41 53 52 00             9411  SASR  DC.B 'ASR',0
00006146= 41 53 52 2E 42 00       9412  SASRB DC.B 'ASR.B',0
0000614C= 41 53 52 2E 57 00       9413  SASRW DC.B 'ASR.W',0
00006152= 41 53 52 2E 4C 00       9414  SASRL DC.B 'ASR.L',0
00006158                          9415  
00006158                          9416  *--------------- LSL Variants--------------*
00006158= 4C 53 4C 00             9417  SLSL  DC.B 'LSL',0
0000615C= 4C 53 4C 2E 42 00       9418  SLSLB DC.B 'LSL.B',0
00006162= 4C 53 4C 2E 57 00       9419  SLSLW DC.B 'LSL.W',0
00006168= 4C 53 4C 2E 4C 00       9420  SLSLL DC.B 'LSL.L',0
0000616E                          9421  
0000616E                          9422  *--------------- LSR Variants--------------*
0000616E= 4C 53 52 00             9423  SLSR  DC.B 'LSR',0
00006172= 4C 53 52 2E 42 00       9424  SLSRB DC.B 'LSR.B',0
00006178= 4C 53 52 2E 57 00       9425  SLSRW DC.B 'LSR.W',0
0000617E= 4C 53 52 2E 4C 00       9426  SLSRL DC.B 'LSR.L',0
00006184                          9427  
00006184                          9428  *--------------- ROL Variants--------------*
00006184= 52 4F 4C 00             9429  SROL  DC.B 'ROL',0
00006188= 52 4F 4C 2E 42 00       9430  SROLB DC.B 'ROL.B',0
0000618E= 52 4F 4C 2E 57 00       9431  SROLW DC.B 'ROL.W',0
00006194= 52 4F 4C 2E 4C 00       9432  SROLL DC.B 'ROL.L',0
0000619A                          9433  
0000619A                          9434  *--------------- ROR Variants--------------*
0000619A= 52 4F 52 00             9435  SROR  DC.B 'ROR',0
0000619E= 52 4F 52 2E 42 00       9436  SRORB DC.B 'ROR.B',0
000061A4= 52 4F 52 2E 57 00       9437  SRORW DC.B 'ROR.W',0
000061AA= 52 4F 52 2E 4C 00       9438  SRORL DC.B 'ROR.L',0
000061B0                          9439  
000061B0                          9440  
000061B0                          9441  
000061B0                          9442  
000061B0                          9443      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
AADEST              6056
AASRC               604A
AASRCAADEST         5B2C
AASRCADEST          580C
AASRCAIDEST         592C
AASRCDDEST          5714
AASRCIDEST          5A42
AASRCPODEST         5D78
AASRCPRDEST         5C3A
ADDALA_D            4034
ADDALDA             D1C0
ADDALDA_D           4024
ADDALDEA_D          4064
ADDALIA_D           4044
ADDALPA_D           4054
ADDAMASK            F1F8
ADDAWA_D            402C
ADDAWDA             D0C0
ADDAWDA_D           401C
ADDAWDEA_D          405C
ADDAWIA_D           403C
ADDAWPA_D           404C
ADDBADD             D020
ADDBADD_D           3FC8
ADDBAID             D010
ADDBAID_D           3F98
ADDBAPD             D018
ADDBAPD_D           3FB0
ADDBDA              D108
ADDBDAD             D120
ADDBDAD_D           3F70
ADDBDAI             D110
ADDBDAI_D           3F40
ADDBDAP             D118
ADDBDAP_D           3F58
ADDBDA_D            3F40
ADDBDD              D000
ADDBDD_D            3F28
ADDBDL              D139
ADDBDW              D138
ADDBID              D03C
ADDBLD              D039
ADDBLD_D            3FFE
ADDBWD              D038
ADDBWD_D            3FE0
ADDLA               D1C8
ADDLAD              D088
ADDLADD             D0A0
ADDLADD_D           3FD8
ADDLAD_D            3F90
ADDLAID             D080
ADDLAID_D           3FA8
ADDLAPD             D088
ADDLAPD_D           3FC0
ADDLDA              D188
ADDLDAD             D1A0
ADDLDAD_D           3F80
ADDLDAI             D190
ADDLDAI_D           3F50
ADDLDAP             D198
ADDLDAP_D           3F68
ADDLDA_D            3F40
ADDLDD              D080
ADDLDD_D            3F38
ADDLDEA             D1E0
ADDLDL              D1B9
ADDLDW              D1B8
ADDLIA              D1D0
ADDLID              D0BC
ADDLLD              D0B9
ADDLLD_D            4012
ADDLPA              D1D8
ADDLWD              D0B8
ADDLWD_D            3FF4
ADDMASK             F1F8
ADDQBA              5008
ADDQBAI             5010
ADDQBAI_D           409C
ADDQBAPD            5018
ADDQBAPD_D          40CC
ADDQBAPI            5018
ADDQBAPI_D          40B4
ADDQBA_D            4084
ADDQBD              5000
ADDQBD_D            406C
ADDQBL              5039
ADDQBL_D            40FC
ADDQBW              5038
ADDQBW_D            40E4
ADDQDEST            7
ADDQLA              50C8
ADDQLAI             5090
ADDQLAI_D           40AC
ADDQLAPD            5048
ADDQLAPD_D          40DC
ADDQLAPI            5098
ADDQLAPI_D          40C4
ADDQLA_D            4094
ADDQLD              50C0
ADDQLD_D            407C
ADDQLL              50B9
ADDQLL_D            410C
ADDQLW              50B8
ADDQLW_D            40F4
ADDQMASK            F038
ADDQVALUE           E00
ADDQWA              5048
ADDQWAI             5050
ADDQWAI_D           40A4
ADDQWAPD            5060
ADDQWAPD_D          40D4
ADDQWAPI            5058
ADDQWAPI_D          40BC
ADDQWA_D            408C
ADDQWD              5040
ADDQWD_D            4074
ADDQWL              5079
ADDQWL_D            4104
ADDQWW              5078
ADDQWW_D            40EC
ADDWA               D0C8
ADDWAD              D048
ADDWADD             D060
ADDWADD_D           3FD0
ADDWAD_D            3F88
ADDWAID             D050
ADDWAID_D           3FA0
ADDWAPD             D058
ADDWAPD_D           3FB8
ADDWDA              D148
ADDWDAD             D160
ADDWDAD_D           3F78
ADDWDAI             D150
ADDWDAI_D           3F48
ADDWDAP             D158
ADDWDAP_D           3F60
ADDWDA_D            3F40
ADDWDD              D040
ADDWDD_D            3F30
ADDWDEA             D0E0
ADDWDL              D179
ADDWDW              D178
ADDWIA              D0D0
ADDWID              D07C
ADDWLD              D079
ADDWLD_D            4008
ADDWPA              D0D8
ADDWWD              D078
ADDWWD_D            3FEA
ADEST               6050
ADVANCED_DECODER    312E
ADVANCED_DECODER_2  3110
ADVANCED_DECODER_L  315E
AIDEST              6061
AISRC               6046
AISRCAADEST         5AEE
AISRCADEST          57C2
AISRCAIDEST         58CE
AISRCDDEST          56CA
AISRCIDEST          59F8
AISRCPODEST         5D1A
AISRCPRDEST         5BDC
ANDBAID             C010
ANDBAID_D           35DC
ANDBAPDD            C020
ANDBAPDD_D          35F4
ANDBAPID            C018
ANDBAPID_D          35E8
ANDBDAD             C03C
ANDBDAD_D           3654
ANDBDAI             C110
ANDBDAI_D           3600
ANDBDAPD            C120
ANDBDAPD_D          3618
ANDBDAPI            C118
ANDBDAPI_D          360C
ANDBDD              C000
ANDBDD_D            35D0
ANDBDLA             C139
ANDBDLA_D           3648
ANDBDWA             C138
ANDBDWA_D           363C
ANDBLAD             C039
ANDBLAD_D           3630
ANDBWAD             C038
ANDBWAD_D           3624
ANDLAID             C090
ANDLAID_D           36FC
ANDLAPDD            C0A0
ANDLAPDD_D          3714
ANDLAPID            C098
ANDLAPID_D          3708
ANDLDAD             C0BC
ANDLDAD_D           3774
ANDLDAI             C190
ANDLDAI_D           3720
ANDLDAPD            C1A0
ANDLDAPD_D          3738
ANDLDAPI            C198
ANDLDAPI_D          372C
ANDLDD              C080
ANDLDD_D            36F0
ANDLDLA             C1B9
ANDLDLA_D           3768
ANDLDWA             C1B8
ANDLDWA_D           375C
ANDLLAD             C0B9
ANDLLAD_D           3750
ANDLWAD             C0B8
ANDLWAD_D           3744
ANDORMASK           F1F8
ANDORWLIMASK        F1FF
ANDWAID             C050
ANDWAID_D           366C
ANDWAPDD            C060
ANDWAPDD_D          3684
ANDWAPID            C058
ANDWAPID_D          3678
ANDWDAD             C07C
ANDWDAD_D           36E4
ANDWDAI             C150
ANDWDAI_D           3690
ANDWDAPD            C160
ANDWDAPD_D          36A8
ANDWDAPI            C158
ANDWDAPI_D          369C
ANDWDD              C040
ANDWDD_D            3660
ANDWDLA             C179
ANDWDLA_D           36D8
ANDWDWA             C178
ANDWDWA_D           36CC
ANDWLAD             C079
ANDWLAD_D           36C0
ANDWWAD             C078
ANDWWAD_D           36B4
AQ_DECODER          318E
ASCIICHAR1          107A
ASCIICHAR2          1106
ASCIILOOP1          1038
ASCIILOOP2          10C4
ASCIINUM1           1074
ASCIINUM2           1100
ASLAI               E1D0
ASLAI_D             33C0
ASLBD               E120
ASLBD_D             33E8
ASLBI               E100
ASLBI_D             3400
ASLLA               E1F9
ASLLA_D             33E0
ASLLD               E1A0
ASLLD_D             33F8
ASLLI               E180
ASLLI_D             3410
ASLPD               E1E0
ASLPD_D             33D0
ASLPI               E1D8
ASLPI_D             33C8
ASLWA               E1F8
ASLWA_D             33D8
ASLWD               E160
ASLWD_D             33F0
ASLWI               E140
ASLWI_D             3408
ASRAI               E0D0
ASRAI_D             3418
ASRBD               E020
ASRBD_D             3440
ASRBI               E000
ASRBI_D             3458
ASRC                603B
ASRCAADEST          5AD4
ASRCADEST           57A2
ASRCAIDEST          58A4
ASRCDDEST           56AA
ASRCIDEST           59D8
ASRCPODEST          5CF0
ASRCPRDEST          5BB2
ASRLA               E0F9
ASRLA_D             3438
ASRLD               E0A0
ASRLD_D             3450
ASRLI               E080
ASRLI_D             3468
ASRPD               E0E0
ASRPD_D             3428
ASRPI               E0D8
ASRPI_D             3420
ASRWA               E0F8
ASRWA_D             3430
ASRWD               E060
ASRWD_D             3448
ASRWI               E040
ASRWI_D             3460
BASIC_BCC_D         3248
BASIC_DECODER       31EA
BASIC_DEST_DREG_D   32B8
BASIC_DEST_LA_D     310A
BASIC_DEST_REG_D    30FA
BASIC_DEST_WA_D     3104
BASIC_IMMEDATA_BW_D  30EE
BASIC_IMMEDATA_L_D  30F4
BASIC_RSDATA_D      3272
BASIC_RSIMMEDIATE_D  3288
BASIC_SOURCE_DREG_D  32AC
BASIC_SOURCE_LA_D   30E8
BASIC_SOURCE_REG_D  30D8
BASIC_SOURCE_WA_D   30E2
BCCMASK             FF00
BEQCO               6700
BEQ_D               3390
BGTCO               6E00
BGT_D               3398
BLECO               6F00
BLE_D               33A0
BRACO               6000
BRA_D               3388
CALC_ADDR_OFFSET    312A
CHECKLEAAI          2F6E
CHECKLEALA          2F98
CHECKLEAS           2F48
CHECKLEAWA          2F7C
CHECK_ADDAS         2202
CHECK_ADDQS         2322
CHECK_ADDS          2000
CHECK_ANDBAID       2CD2
CHECK_ANDBAPDD      2CEE
CHECK_ANDBAPID      2CE0
CHECK_ANDBDAD       2B1E
CHECK_ANDBDAI       2CFC
CHECK_ANDBDAPD      2D18
CHECK_ANDBDAPI      2D0A
CHECK_ANDBDD        2CC4
CHECK_ANDBDLA       2B10
CHECK_ANDBDWA       2B02
CHECK_ANDBLAD       2AF4
CHECK_ANDBWAD       2AE6
CHECK_ANDLAID       2D96
CHECK_ANDLAPDD      2DB2
CHECK_ANDLAPID      2DA4
CHECK_ANDLDAD       2BAA
CHECK_ANDLDAI       2DC0
CHECK_ANDLDAPD      2DDC
CHECK_ANDLDAPI      2DCE
CHECK_ANDLDD        2D88
CHECK_ANDLDLA       2B9C
CHECK_ANDLDWA       2B8E
CHECK_ANDLLAD       2B80
CHECK_ANDLWAD       2B72
CHECK_ANDS          2AC0
CHECK_ANDSCONT      2CB8
CHECK_ANDWAID       2D34
CHECK_ANDWAPDD      2D50
CHECK_ANDWAPID      2D42
CHECK_ANDWDAD       2B64
CHECK_ANDWDAI       2D5E
CHECK_ANDWDAPD      2D7A
CHECK_ANDWDAPI      2D6C
CHECK_ANDWDD        2D26
CHECK_ANDWDLA       2B56
CHECK_ANDWDWA       2B48
CHECK_ANDWLAD       2B3A
CHECK_ANDWWAD       2B2C
CHECK_ASDDIS        2820
CHECK_ASDEAS        25D4
CHECK_ASLAI         2616
CHECK_ASLBD         2846
CHECK_ASLBI         2870
CHECK_ASLLA         2606
CHECK_ASLLD         2862
CHECK_ASLLI         288C
CHECK_ASLPD         2632
CHECK_ASLPI         2624
CHECK_ASLWA         25F8
CHECK_ASLWD         2854
CHECK_ASLWI         287E
CHECK_ASRAI         2668
CHECK_ASRBD         28A6
CHECK_ASRBI         28D0
CHECK_ASRDIS        289A
CHECK_ASREAS        2640
CHECK_ASRLA         2658
CHECK_ASRLD         28C2
CHECK_ASRLI         28EC
CHECK_ASRPD         2684
CHECK_ASRPI         2676
CHECK_ASRWA         264A
CHECK_ASRWD         28B4
CHECK_ASRWI         28DE
CHECK_BCCS          253A
CHECK_BEQ           2554
CHECK_BGT           2562
CHECK_BLE           2570
CHECK_BRA           2546
CHECK_JSRAI         25C0
CHECK_JSRLA         25B0
CHECK_JSRS          257E
CHECK_JSRWA         25A2
CHECK_LSDDIS        2900
CHECK_LSDEAS        2698
CHECK_LSLAI         26DA
CHECK_LSLBD         2926
CHECK_LSLBI         2950
CHECK_LSLLA         26CA
CHECK_LSLLD         2942
CHECK_LSLLI         296C
CHECK_LSLPD         26F6
CHECK_LSLPI         26E8
CHECK_LSLWA         26BC
CHECK_LSLWD         2934
CHECK_LSLWI         295E
CHECK_LSRAI         272C
CHECK_LSRBD         2986
CHECK_LSRBI         29B0
CHECK_LSRDIS        297A
CHECK_LSREAS        2704
CHECK_LSRLA         271C
CHECK_LSRLD         29A2
CHECK_LSRLI         29CC
CHECK_LSRPD         2748
CHECK_LSRPI         273A
CHECK_LSRWA         270E
CHECK_LSRWD         2994
CHECK_LSRWI         29BE
CHECK_MOVEAS        1EAE
CHECK_MOVES         11AC
CHECK_NOP           2F28
CHECK_NOTBAI        2FE0
CHECK_NOTBD         2FD2
CHECK_NOTBLA        3018
CHECK_NOTBPO        2FEE
CHECK_NOTBPR        2FFC
CHECK_NOTBWA        300A
CHECK_NOTLAI        3088
CHECK_NOTLD         307A
CHECK_NOTLLA        30C0
CHECK_NOTLPO        3096
CHECK_NOTLPR        30A4
CHECK_NOTLWA        30B2
CHECK_NOTS          2FAC
CHECK_NOTWAI        3034
CHECK_NOTWD         3026
CHECK_NOTWLA        306C
CHECK_NOTWPO        3042
CHECK_NOTWPR        3050
CHECK_NOTWWA        305E
CHECK_ORBADD        2E26
CHECK_ORBAID        2E0A
CHECK_ORBAPD        2E18
CHECK_ORBDAD        2E50
CHECK_ORBDAI        2E34
CHECK_ORBDAP        2E42
CHECK_ORBDD         2DFC
CHECK_ORBDID        2C1A
CHECK_ORBDLA        2C0C
CHECK_ORBDWA        2BFE
CHECK_ORBLAD        2BF0
CHECK_ORBWAD        2BE2
CHECK_ORLADD        2EEA
CHECK_ORLAID        2ECE
CHECK_ORLAPD        2EDC
CHECK_ORLDAD        2F14
CHECK_ORLDAI        2EF8
CHECK_ORLDAP        2F06
CHECK_ORLDD         2EC0
CHECK_ORLDID        2CA6
CHECK_ORLDLA        2C98
CHECK_ORLDWA        2C8A
CHECK_ORLLAD        2C7C
CHECK_ORLWAD        2C6E
CHECK_ORS           2BBC
CHECK_ORSCONT       2DF0
CHECK_ORWADD        2E88
CHECK_ORWAID        2E6C
CHECK_ORWAPD        2E7A
CHECK_ORWDAD        2EB2
CHECK_ORWDAI        2E96
CHECK_ORWDAP        2EA4
CHECK_ORWDD         2E5E
CHECK_ORWDID        2C60
CHECK_ORWDLA        2C52
CHECK_ORWDWA        2C44
CHECK_ORWLAD        2C36
CHECK_ORWWAD        2C28
CHECK_RODDIS        29E0
CHECK_RODEAS        275C
CHECK_ROLAI         279E
CHECK_ROLBD         2A06
CHECK_ROLBI         2A30
CHECK_ROLLA         278E
CHECK_ROLLD         2A22
CHECK_ROLLI         2A4C
CHECK_ROLPD         27BA
CHECK_ROLPI         27AC
CHECK_ROLWA         2780
CHECK_ROLWD         2A14
CHECK_ROLWI         2A3E
CHECK_RORAI         27F0
CHECK_RORBD         2A66
CHECK_RORBI         2A90
CHECK_RORDIS        2A5A
CHECK_ROREAS        27C8
CHECK_RORLA         27E0
CHECK_RORLD         2A82
CHECK_RORLI         2AAC
CHECK_RORPD         280C
CHECK_RORPI         27FE
CHECK_RORWA         27D2
CHECK_RORWD         2A74
CHECK_RORWI         2A9E
CHECK_RTS           2F38
CLPAR               6065
CONTINUE            1132
CR                  D
CRLF                5EA8
DATA                5EAD
DATA_B              30D4
DATA_D              393C
DDEST               604D
DEST_DREG_D         3232
DEST_REG_D          323E
DOLLAR              5EAB
DSRC                6038
DSRCAADEST          5ABA
DSRCADEST           5782
DSRCAIDEST          587A
DSRCDDEST           568A
DSRCIDEST           59B8
DSRCPODEST          5CC6
DSRCPRDEST          5B88
EASRC               5604
EASRCAI             5614
EASRCD              5674
EASRCPO             5654
EASRCPR             5634
ENTADDR1            5F12
ENTADDR2            5F5D
ENTPAGE             5FA8
ERRMSG              6002
FINISHADDR2         110C
FINPRINTZEROES      5EA4
FIRSTOP             5E34
FLUSH               5E70
GENERAL_ADDQ        5000
GENERAL_ADDQ_MASK   F100
GENERAL_ADD_ADDA    D000
GENERAL_ADD_ADDA_MASK  F000
GENERAL_AND         C000
GENERAL_AND_MASK    F000
GENERAL_ASDDI       E000
GENERAL_ASDEA       E0C0
GENERAL_JSR         4E80
GENERAL_JSR_MASK    FFC0
GENERAL_LEA         41C0
GENERAL_LEA_MASK    F1C0
GENERAL_LSDDI       E008
GENERAL_LSDEA       E2C0
GENERAL_MOVE        0
GENERAL_MOVEA       40
GENERAL_MOVEA_MASK  C1C0
GENERAL_MOVE_MASK   C000
GENERAL_NOT         4600
GENERAL_NOT_MASK    FF00
GENERAL_OR          8000
GENERAL_OR_MASK     F000
GENERAL_RODDI       E018
GENERAL_RODEA       E6C0
GENERAL_RSDI_MASK   F018
GENERAL_RSEA_MASK   FEC0
GENERAL_SUB         9000
GENERAL_SUB_MASK    F000
GETADDR1            100C
GETADDR2            1088
IDEST               6053
IFADDALAAXA         4C8C
IFADDALAIXA         4C74
IFADDALAXA          4C68
IFADDALDXA          4C5C
IFADDALIXA          4C80
IFADDALPOXA         4CA4
IFADDALPRXA         4C98
IFADDAWAAXA         4C38
IFADDAWAIXA         4C20
IFADDAWAXA          4C14
IFADDAWDXA          4C08
IFADDAWIXA          4C2C
IFADDAWPOXA         4C50
IFADDAWPRXA         4C44
IFADDBAAXD          4AAC
IFADDBAIXD          4A94
IFADDBDXAA          4ADC
IFADDBDXAI          4AD0
IFADDBDXD           4A88
IFADDBDXPO          4AF4
IFADDBDXPR          4AE8
IFADDBIXD           4AA0
IFADDBPOXD          4AC4
IFADDBPRXD          4AB8
IFADDLAAXD          4BB4
IFADDLAIXD          4B9C
IFADDLAXD           4B90
IFADDLDXAA          4BE4
IFADDLDXAI          4BD8
IFADDLDXD           4B84
IFADDLDXPO          4BFC
IFADDLDXPR          4BF0
IFADDLIXD           4BA8
IFADDLPOXD          4BCC
IFADDLPRXD          4BC0
IFADDQBIXA          4CBC
IFADDQBIXAA         4CD4
IFADDQBIXAI         4CC8
IFADDQBIXD          4CB0
IFADDQBIXPO         4CEC
IFADDQBIXPR         4CE0
IFADDQLIXA          4D4C
IFADDQLIXAA         4D64
IFADDQLIXAI         4D58
IFADDQLIXD          4D40
IFADDQLIXPO         4D7C
IFADDQLIXPR         4D70
IFADDQWIXA          4D04
IFADDQWIXAA         4D1C
IFADDQWIXAI         4D10
IFADDQWIXD          4CF8
IFADDQWIXPO         4D34
IFADDQWIXPR         4D28
IFADDWAAXD          4B30
IFADDWAIXD          4B18
IFADDWAXD           4B0C
IFADDWDXAA          4B60
IFADDWDXAI          4B54
IFADDWDXD           4B00
IFADDWDXPO          4B78
IFADDWDXPR          4B6C
IFADDWIXD           4B24
IFADDWPOXD          4B48
IFADDWPRXD          4B3C
IFANDBAAXD          4FF8
IFANDBAIXD          4FE0
IFANDBDXAA          5028
IFANDBDXAI          501C
IFANDBDXD           4FD4
IFANDBDXPO          5040
IFANDBDXPR          5034
IFANDBIXD           4FEC
IFANDBPOXD          5010
IFANDBPRXD          5004
IFANDLAAXD          50E8
IFANDLAIXD          50D0
IFANDLDXAA          5118
IFANDLDXAI          510C
IFANDLDXD           50C4
IFANDLDXPO          5130
IFANDLDXPR          5124
IFANDLIXD           50DC
IFANDLPOXD          5100
IFANDLPRXD          50F4
IFANDWAAXD          5070
IFANDWAIXD          5058
IFANDWDXAA          50A0
IFANDWDXAI          5094
IFANDWDXD           504C
IFANDWDXPO          50B8
IFANDWDXPR          50AC
IFANDWIXD           5064
IFANDWPOXD          5088
IFANDWPRXD          507C
IFASLBDXD           532E
IFASLBIXD           533A
IFASLEA             52FE
IFASLEAXAI          530A
IFASLEAXPO          5322
IFASLEAXPR          5316
IFASLLDXD           535E
IFASLLIXD           536A
IFASLWDXD           5346
IFASLWIXD           5352
IFASRBDXD           53A6
IFASRBIXD           53B2
IFASREA             5376
IFASREAXAI          5382
IFASREAXPO          539A
IFASREAXPR          538E
IFASRLDXD           53D6
IFASRLIXD           53E2
IFASRWDXD           53BE
IFASRWIXD           53CA
IFBADDATA           55CE
IFBEQ               52F2
IFBGT               52DA
IFBLE               52E6
IFBRA               52CE
IFINVADDRMODE       55E4
IFJSRAXAI           52B0
IFJSREA             52A4
IFLEAAAXA           4F14
IFLEAAIXA           4F08
IFLSLBDXD           541E
IFLSLBIXD           542A
IFLSLEA             53EE
IFLSLEAXAI          53FA
IFLSLEAXPO          5412
IFLSLEAXPR          5406
IFLSLLDXD           544E
IFLSLLIXD           545A
IFLSLWDXD           5436
IFLSLWIXD           5442
IFLSRBDXD           5496
IFLSRBIXD           54A2
IFLSREA             5466
IFLSREAXAI          5472
IFLSREAXPO          548A
IFLSREAXPR          547E
IFLSRLDXD           54C6
IFLSRLIXD           54D2
IFLSRWDXD           54AE
IFLSRWIXD           54BA
IFMOVEALAAXA        4A58
IFMOVEALAIXA        4A40
IFMOVEALAXA         4A34
IFMOVEALDXA         4A28
IFMOVEALIXA         4A4C
IFMOVEALPOXA        4A70
IFMOVEALPRXA        4A64
IFMOVEAWAAXA        4A04
IFMOVEAWAIXA        49EC
IFMOVEAWAXA         49E0
IFMOVEAWDXA         49D4
IFMOVEAWIXA         49F8
IFMOVEAWPOXA        4A1C
IFMOVEAWPRXA        4A10
IFMOVEBAAXAA        45AE
IFMOVEBAAXAI        455A
IFMOVEBAAXD         4506
IFMOVEBAAXPO        4656
IFMOVEBAAXPR        4602
IFMOVEBAIXAA        4596
IFMOVEBAIXAI        4542
IFMOVEBAIXD         44EE
IFMOVEBAIXPO        463E
IFMOVEBAIXPR        45EA
IFMOVEBAXAA         458A
IFMOVEBAXAI         4536
IFMOVEBAXD          44E2
IFMOVEBAXPO         4632
IFMOVEBAXPR         45DE
IFMOVEBDXAA         457E
IFMOVEBDXAI         452A
IFMOVEBDXD          44D6
IFMOVEBDXPO         4626
IFMOVEBDXPR         45D2
IFMOVEBIXAA         45A2
IFMOVEBIXAI         454E
IFMOVEBIXD          44FA
IFMOVEBIXPO         464A
IFMOVEBIXPR         45F6
IFMOVEBPOXAA        45C6
IFMOVEBPOXAI        4572
IFMOVEBPOXD         451E
IFMOVEBPOXPO        466E
IFMOVEBPOXPR        461A
IFMOVEBPRXAA        45BA
IFMOVEBPRXAI        4566
IFMOVEBPRXD         4512
IFMOVEBPRXPO        4662
IFMOVEBPRXPR        460E
IFMOVELAAXAA        48F6
IFMOVELAAXAI        48A2
IFMOVELAAXD         484E
IFMOVELAAXPO        499E
IFMOVELAAXPR        494A
IFMOVELAIXAA        48DE
IFMOVELAIXAI        488A
IFMOVELAIXD         4836
IFMOVELAIXPO        4986
IFMOVELAIXPR        4932
IFMOVELAXAA         48D2
IFMOVELAXAI         487E
IFMOVELAXD          482A
IFMOVELAXPO         497A
IFMOVELAXPR         4926
IFMOVELDXAA         48C6
IFMOVELDXAI         4872
IFMOVELDXD          481E
IFMOVELDXPO         496E
IFMOVELDXPR         491A
IFMOVELIXAA         48EA
IFMOVELIXAI         4896
IFMOVELIXD          4842
IFMOVELIXPO         4992
IFMOVELIXPR         493E
IFMOVELPOXAA        490E
IFMOVELPOXAI        48BA
IFMOVELPOXD         4866
IFMOVELPOXPO        49B6
IFMOVELPOXPR        4962
IFMOVELPRXAA        4902
IFMOVELPRXAI        48AE
IFMOVELPRXD         485A
IFMOVELPRXPO        49AA
IFMOVELPRXPR        4956
IFMOVEQIXD          4A7C
IFMOVEWAAXAA        4752
IFMOVEWAAXAI        46FE
IFMOVEWAAXD         46AA
IFMOVEWAAXPO        47FA
IFMOVEWAAXPR        47A6
IFMOVEWAIXAA        473A
IFMOVEWAIXAI        46E6
IFMOVEWAIXD         4692
IFMOVEWAIXPO        47E2
IFMOVEWAIXPR        478E
IFMOVEWAXAA         472E
IFMOVEWAXAI         46DA
IFMOVEWAXD          4686
IFMOVEWAXPO         47D6
IFMOVEWAXPR         4782
IFMOVEWDXAA         4722
IFMOVEWDXAI         46CE
IFMOVEWDXD          467A
IFMOVEWDXPO         47CA
IFMOVEWDXPR         4776
IFMOVEWIXAA         4746
IFMOVEWIXAI         46F2
IFMOVEWIXD          469E
IFMOVEWIXPO         47EE
IFMOVEWIXPR         479A
IFMOVEWPOXAA        476A
IFMOVEWPOXAI        4716
IFMOVEWPOXD         46C2
IFMOVEWPOXPO        4812
IFMOVEWPOXPR        47BE
IFMOVEWPRXAA        475E
IFMOVEWPRXAI        470A
IFMOVEWPRXD         46B6
IFMOVEWPRXPO        4806
IFMOVEWPRXPR        47B2
IFNOP               49C2
IFNOTBEA            4F20
IFNOTBEAXAI         4F38
IFNOTBEAXD          4F2C
IFNOTBEAXPO         4F50
IFNOTBEAXPR         4F44
IFNOTLEA            4F98
IFNOTLEAXAI         4FB0
IFNOTLEAXD          4FA4
IFNOTLEAXPO         4FC8
IFNOTLEAXPR         4FBC
IFNOTWEA            4F5C
IFNOTWEAXAI         4F74
IFNOTWEAXD          4F68
IFNOTWEAXPO         4F8C
IFNOTWEAXPR         4F80
IFOPCODEAAXA        4362
IFOPCODEAAXAA       440A
IFOPCODEAAXAI       43B6
IFOPCODEAAXD        430E
IFOPCODEAAXPO       44B2
IFOPCODEAAXPR       445E
IFOPCODEAIXA        434A
IFOPCODEAIXAA       43F2
IFOPCODEAIXAI       439E
IFOPCODEAIXD        42F6
IFOPCODEAIXPO       449A
IFOPCODEAIXPR       4446
IFOPCODEAXA         433E
IFOPCODEAXAA        43E6
IFOPCODEAXAI        4392
IFOPCODEAXD         42EA
IFOPCODEAXPO        448E
IFOPCODEAXPR        443A
IFOPCODEDXA         4332
IFOPCODEDXAA        43DA
IFOPCODEDXAI        4386
IFOPCODEDXD         42DE
IFOPCODEDXPO        4482
IFOPCODEDXPR        442E
IFOPCODEEA          42A2
IFOPCODEEAXAI       42BA
IFOPCODEEAXD        42AE
IFOPCODEEAXPO       42D2
IFOPCODEEAXPR       42C6
IFOPCODEIXA         4356
IFOPCODEIXAA        43FE
IFOPCODEIXAI        43AA
IFOPCODEIXD         4302
IFOPCODEIXPO        44A6
IFOPCODEIXPR        4452
IFOPCODEPOXA        437A
IFOPCODEPOXAA       4422
IFOPCODEPOXAI       43CE
IFOPCODEPOXD        4326
IFOPCODEPOXPO       44CA
IFOPCODEPOXPR       4476
IFOPCODEPRXA        436E
IFOPCODEPRXAA       4416
IFOPCODEPRXAI       43C2
IFOPCODEPRXD        431A
IFOPCODEPRXPO       44BE
IFOPCODEPRXPR       446A
IFORBAAXD           5160
IFORBAIXD           5148
IFORBDXAA           5190
IFORBDXAI           5184
IFORBDXD            513C
IFORBDXPO           51A8
IFORBDXPR           519C
IFORBIXD            5154
IFORBPOXD           5178
IFORBPRXD           516C
IFORLAAXD           5250
IFORLAIXD           5238
IFORLDXAA           5280
IFORLDXAI           5274
IFORLDXD            522C
IFORLDXPO           5298
IFORLDXPR           528C
IFORLIXD            5244
IFORLPOXD           5268
IFORLPRXD           525C
IFORWAAXD           51D8
IFORWAIXD           51C0
IFORWDXAA           5208
IFORWDXAI           51FC
IFORWDXD            51B4
IFORWDXPO           5220
IFORWDXPR           5214
IFORWIXD            51CC
IFORWPOXD           51F0
IFORWPRXD           51E4
IFROLBDXD           550E
IFROLBIXD           551A
IFROLEA             54DE
IFROLEAXAI          54EA
IFROLEAXPO          5502
IFROLEAXPR          54F6
IFROLLDXD           553E
IFROLLIXD           554A
IFROLWDXD           5526
IFROLWIXD           5532
IFRORBDXD           5586
IFRORBIXD           5592
IFROREA             5556
IFROREAXAI          5562
IFROREAXPO          557A
IFROREAXPR          556E
IFRORLDXD           55B6
IFRORLIXD           55C2
IFRORWDXD           559E
IFRORWIXD           55AA
IFRTS               52BC
IFSUBBAAXD          4DAC
IFSUBBAIXD          4D94
IFSUBBDXAA          4DDC
IFSUBBDXAI          4DD0
IFSUBBDXD           4D88
IFSUBBDXPO          4DF4
IFSUBBDXPR          4DE8
IFSUBBIXD           4DA0
IFSUBBPOXD          4DC4
IFSUBBPRXD          4DB8
IFSUBLAAXD          4EB4
IFSUBLAIXD          4E9C
IFSUBLAXD           4E90
IFSUBLDXAA          4EE4
IFSUBLDXAI          4ED8
IFSUBLDXD           4E84
IFSUBLDXPO          4EFC
IFSUBLDXPR          4EF0
IFSUBLIXD           4EA8
IFSUBLPOXD          4ECC
IFSUBLPRXD          4EC0
IFSUBWAAXD          4E30
IFSUBWAIXD          4E18
IFSUBWAXD           4E0C
IFSUBWDXAA          4E60
IFSUBWDXAI          4E54
IFSUBWDXD           4E00
IFSUBWDXPO          4E78
IFSUBWDXPR          4E6C
IFSUBWIXD           4E24
IFSUBWPOXD          4E48
IFSUBWPRXD          4E3C
INPUTERROR          4290
INVADDR             5EB9
ISRC                603E
ISRCAADEST          5B12
ISRCADEST           57EC
ISRCAIDEST          5902
ISRCDDEST           56F4
ISRCIDEST           5A22
ISRCPODEST          5D4E
ISRCPRDEST          5C10
JSRAI               4E90
JSRAI_D             33A8
JSRLA               4EB9
JSRLA_D             33B8
JSRMASK             FFF8
JSRWA               4EB8
JSRWA_D             33B0
LDIS                326C
LEAAI               41D0
LEAAI_D             32C4
LEALA               41F9
LEALA_D             32E4
LEAMASK             F1F8
LEAWA               41F8
LEAWA_D             32D0
LF                  A
LSLAI               E3D0
LSLAI_D             3470
LSLBD               E128
LSLBD_D             3498
LSLBI               E108
LSLBI_D             34B0
LSLLA               E3F9
LSLLA_D             3490
LSLLD               E1A8
LSLLD_D             34A8
LSLLI               E188
LSLLI_D             34C0
LSLPD               E3E0
LSLPD_D             3480
LSLPI               E3D8
LSLPI_D             3478
LSLWA               E3F8
LSLWA_D             3488
LSLWD               E168
LSLWD_D             34A0
LSLWI               E148
LSLWI_D             34B8
LSRAI               E2D0
LSRAI_D             34C8
LSRBD               E028
LSRBD_D             34F0
LSRBI               E008
LSRBI_D             3508
LSRLA               E2F9
LSRLA_D             34E8
LSRLD               E0A8
LSRLD_D             3500
LSRLI               E088
LSRLI_D             3518
LSRPD               E2E0
LSRPD_D             34D8
LSRPI               E2D8
LSRPI_D             34D0
LSRWA               E2F8
LSRWA_D             34E0
LSRWD               E068
LSRWD_D             34F8
LSRWI               E048
LSRWI_D             3510
MAKEADDR1EVEN       1080
MMASK               F1F8
MOVEALA             2048
MOVEALAU            2050
MOVEALAU_D          3EC4
MOVEALA_D           3EB4
MOVEALD             2040
MOVEALDA            2060
MOVEALDA_D          3EE4
MOVEALD_D           3EA4
MOVEALIA            207C
MOVEALIA_D          3F1A
MOVEALLA            2079
MOVEALLA_D          3EF4
MOVEALPA            2058
MOVEALPA_D          3ED4
MOVEALWA            2078
MOVEALWA_D          3F04
MOVEAMASK           F1C0
MOVEAWA             3048
MOVEAWAI            3050
MOVEAWAI_D          3EBC
MOVEAWA_D           3EAC
MOVEAWD             3040
MOVEAWDA            3060
MOVEAWDA_D          3EDC
MOVEAWD_D           3E9C
MOVEAWIA            3079C
MOVEAWIA_D          3F0C
MOVEAWLA            3079
MOVEAWLA_D          3EEC
MOVEAWPA            3058
MOVEAWPA_D          3ECC
MOVEAWWA            3078
MOVEAWWA_D          3EFC
MOVEBAAD            1108
MOVEBAAD_D          3BF4
MOVEBAAI            1088
MOVEBAAI_D          3A38
MOVEBAAP            10C8
MOVEBAAP_D          3B16
MOVEBADAD           10A0
MOVEBADAD_D         3C3C
MOVEBADAI           1060
MOVEBADAI_D         3A80
MOVEBADAP           10E0
MOVEBADAP_D         3B5E
MOVEBADD            1020
MOVEBADD_D          39A2
MOVEBADL            13E0
MOVEBADL_D          3E1C
MOVEBADW            1128
MOVEBADW_D          3D32
MOVEBAD_D           395A
MOVEBAI             1048
MOVEBAIAD           1110
MOVEBAIAD_D         3C0C
MOVEBAIAP           10D0
MOVEBAIAP_D         3B2E
MOVEBAID            1010
MOVEBAID_D          3972
MOVEBAIL            13D0
MOVEBAIL_D          3DE0
MOVEBAIW            10A8
MOVEBAIW_D          3CF6
MOVEBAI_D           3A50
MOVEBAL             13C8
MOVEBAL_D           3DC2
MOVEBAPAD           1098
MOVEBAPAD_D         3C24
MOVEBAPAI           1058
MOVEBAPAI_D         3A68
MOVEBAPAP           10D8
MOVEBAPAP_D         3B46
MOVEBAPID           1018
MOVEBAPID_D         398A
MOVEBAPL            13D8
MOVEBAPL_D          3DFE
MOVEBAPW            10E8
MOVEBAPW_D          3D14
MOVEBAW             1068
MOVEBAW_D           3CD8
MOVEBDAD            1100
MOVEBDAD_D          3BDC
MOVEBDAI            1080
MOVEBDAI_D          3A20
MOVEBDAP            10C0
MOVEBDAP_D          3AFE
MOVEBDD             1000
MOVEBDD_D           3942
MOVEBDLNG           13C0
MOVEBDLNG_D         3DA4
MOVEBDWRD           11C0
MOVEBDWRD_D         3CBA
MOVEBIAD            113C
MOVEBIAD_D          3C90
MOVEBIAI            10BC
MOVEBIAI_D          3AD4
MOVEBIAP            10FC
MOVEBIAP_D          3BB2
MOVEBIL             13FC
MOVEBIL_D           3E76
MOVEBIMD            103C
MOVEBIMD_D          39F6
MOVEBIW             11FC
MOVEBIW_D           3D8C
MOVEBLAD            10F9
MOVEBLAD_D          3C72
MOVEBLAI            10B9
MOVEBLAI_D          3AB6
MOVEBLAP            10F9
MOVEBLAP_D          3B94
MOVEBLL             13F9
MOVEBLL_D           3E58
MOVEBLNGD           1039
MOVEBLNGD_D         39D8
MOVEBLW             11F9
MOVEBLW_D           3D6E
MOVEBW              11F8
MOVEBWAD            10F8
MOVEBWAD_D          3C54
MOVEBWAI            10B8
MOVEBWAI_D          3A98
MOVEBWAP            10F8
MOVEBWAP_D          3B76
MOVEBWL             13F8
MOVEBWL_D           3E3A
MOVEBWRDD           1038
MOVEBWRDD_D         39BA
MOVEBW_D            3D50
MOVELAAD            2108
MOVELAAD_D          3C04
MOVELAAI            2088
MOVELAAI_D          3A48
MOVELAAP            20C8
MOVELAAP_D          3B26
MOVELAD             2008
MOVELADAD           20A0
MOVELADAD_D         3C4C
MOVELADAI           2060
MOVELADAI_D         3A90
MOVELADAP           20E0
MOVELADAP_D         3B6E
MOVELADD            2020
MOVELADD_D          39B2
MOVELADL            23E0
MOVELADL_D          3E30
MOVELADW            2128
MOVELADW_D          3D46
MOVELAD_D           396A
MOVELAI             2048
MOVELAIAD           2110
MOVELAIAD_D         3C1C
MOVELAIAP           20D0
MOVELAIAP_D         3B3E
MOVELAID            2010
MOVELAID_D          3982
MOVELAIL            23D0
MOVELAIL_D          3DF4
MOVELAIW            20A8
MOVELAIW_D          3D0A
MOVELAI_D           3A60
MOVELAL             23C8
MOVELAL_D           3DD6
MOVELAPAD           2098
MOVELAPAD_D         3C34
MOVELAPAI           2058
MOVELAPAI_D         3A78
MOVELAPAP           20D8
MOVELAPAP_D         3B56
MOVELAPID           2018
MOVELAPID_D         399A
MOVELAPL            23D8
MOVELAPL_D          3E12
MOVELAPW            20E8
MOVELAPW_D          3D28
MOVELAW             2068
MOVELAW_D           3CEC
MOVELDAD            2100
MOVELDAD_D          3BEC
MOVELDAI            2080
MOVELDAI_D          3A30
MOVELDAP            20C0
MOVELDAP_D          3B0E
MOVELDD             2000
MOVELDD_D           3952
MOVELDLNG           23C0
MOVELDLNG_D         3DB8
MOVELDWRD           21C0
MOVELDWRD_D         3CCE
MOVELIAD            213C
MOVELIAD_D          3CAC
MOVELIAI            20BC
MOVELIAI_D          3AF0
MOVELIAP            20FC
MOVELIAP_D          3BCE
MOVELIL             23FC
MOVELIL_D           3E8A
MOVELIMD            203C
MOVELIMD_D          3A12
MOVELIW             21FC
MOVELIW_D           3D9C
MOVELLAD            20F9
MOVELLAD_D          3C86
MOVELLAI            20B9
MOVELLAI_D          3ACA
MOVELLAP            20F9
MOVELLAP_D          3BA8
MOVELLL             23F9
MOVELLL_D           3E6C
MOVELLNGD           2039
MOVELLNGD_D         39EC
MOVELLW             21F9
MOVELLW_D           3D82
MOVELW              21F8
MOVELWAD            20F8
MOVELWAD_D          3C68
MOVELWAI            20B8
MOVELWAI_D          3AAC
MOVELWAP            20F8
MOVELWAP_D          3B8A
MOVELWL             23F8
MOVELWL_D           3E4E
MOVELWRDD           2038
MOVELWRDD_D         39CE
MOVELW_D            3D64
MOVEQD_D            3E94
MOVEQ_D             FF
MOVEQ_R             E00
MOVEQ_V             7000
MOVEQ_V_DECODE      4114
MOVEWAAD            3108
MOVEWAAD_D          3BFC
MOVEWAAI            3088
MOVEWAAI_D          3A40
MOVEWAAP            30C8
MOVEWAAP_D          3B1E
MOVEWAD             3008
MOVEWADAD           30A0
MOVEWADAD_D         3C44
MOVEWADAI           3060
MOVEWADAI_D         3A88
MOVEWADAP           30E0
MOVEWADAP_D         3B66
MOVEWADD            3020
MOVEWADD_D          39AA
MOVEWADL            33E0
MOVEWADL_D          3E26
MOVEWADW            3128
MOVEWADW_D          3D3C
MOVEWAD_D           3962
MOVEWAI             3048
MOVEWAIAD           3110
MOVEWAIAD_D         3C14
MOVEWAIAP           30D0
MOVEWAIAP_D         3B36
MOVEWAID            3010
MOVEWAID_D          397A
MOVEWAIL            33D0
MOVEWAIL_D          3DEA
MOVEWAIW            30A8
MOVEWAIW_D          3D00
MOVEWAI_D           3A58
MOVEWAL             33C8
MOVEWAL_D           3DCC
MOVEWAPAD           3098
MOVEWAPAD_D         3C2C
MOVEWAPAI           3058
MOVEWAPAI_D         3A70
MOVEWAPAP           30D8
MOVEWAPAP_D         3B4E
MOVEWAPID           3018
MOVEWAPID_D         3992
MOVEWAPL            33D8
MOVEWAPL_D          3E08
MOVEWAPW            30E8
MOVEWAPW_D          3D1E
MOVEWAW             3068
MOVEWAW_D           3CE2
MOVEWDAD            3100
MOVEWDAD_D          3BE4
MOVEWDAI            3080
MOVEWDAI_D          3A28
MOVEWDAP            30C0
MOVEWDAP_D          3B06
MOVEWDD             3000
MOVEWDD_D           394A
MOVEWDLNG           33C0
MOVEWDLNG_D         3DAE
MOVEWDWRD           31C0
MOVEWDWRD_D         3CC4
MOVEWIAD            313C
MOVEWIAD_D          3C9E
MOVEWIAI            30BC
MOVEWIAI_D          3AE2
MOVEWIAP            30FC
MOVEWIAP_D          3BC0
MOVEWIL             33FC
MOVEWIL_D           3E80
MOVEWIMD            303C
MOVEWIMD_D          3A04
MOVEWIW             31FC
MOVEWIW_D           3D94
MOVEWLAD            30F9
MOVEWLAD_D          3C7C
MOVEWLAI            30B9
MOVEWLAI_D          3AC0
MOVEWLAP            30F9
MOVEWLAP_D          3B9E
MOVEWLL             33F9
MOVEWLL_D           3E62
MOVEWLNGD           3039
MOVEWLNGD_D         39E2
MOVEWLW             31F9
MOVEWLW_D           3D78
MOVEWW              31F8
MOVEWWAD            30F8
MOVEWWAD_D          3C5E
MOVEWWAI            30B8
MOVEWWAI_D          3AA2
MOVEWWAP            30F8
MOVEWWAP_D          3B80
MOVEWWL             33F8
MOVEWWL_D           3E44
MOVEWWRDD           3038
MOVEWWRDD_D         39C4
MOVEWW_D            3D5A
MQ_DECODER          31C4
MVALUEMASK1         7
MVALUEMASK2         E00
NEXTPAGE            5E56
NOPCO               4E71
NOP_D               3930
NOTBAI              4610
NOTBAI_D            3310
NOTBD               4620
NOTBDR              4600
NOTBD_D             32F8
NOTBLA              4639
NOTBLA_D            3370
NOTBP               4618
NOTBPO_D            3328
NOTBPR_D            3340
NOTBWA              4638
NOTBWA_D            3358
NOTLAI              4690
NOTLAI_D            3320
NOTLD               46A0
NOTLDR              4680
NOTLD_D             3308
NOTLLA              46B9
NOTLLA_D            3380
NOTLP               4698
NOTLPO_D            3338
NOTLPR_D            3350
NOTLWA              46B8
NOTLWA_D            3368
NOTMASK             FFF8
NOTWAI              4650
NOTWAI_D            3318
NOTWD               4660
NOTWDR              4640
NOTWD_D             3300
NOTWLA              4679
NOTWLA_D            3378
NOTWP               4658
NOTWPO_D            3330
NOTWPR_D            3348
NOTWWA              4678
NOTWWA_D            3360
OPCODE              5EB2
ORBADD              8020
ORBADD_D            37A4
ORBAID              8010
ORBAID_D            378C
ORBAPD              8018
ORBAPD_D            3798
ORBDAD              8120
ORBDAD_D            37C8
ORBDAI              8110
ORBDAI_D            37B0
ORBDAP              8118
ORBDAP_D            37BC
ORBDD               8000
ORBDD_D             3780
ORBDID_D            3804
ORBDL               8139
ORBDLA_D            37F8
ORBDW               8138
ORBDWA_D            37EC
ORBID               803C
ORBLAD_D            37E0
ORBLD               8039
ORBWAD_D            37D4
ORBWD               8038
ORLADD              80A0
ORLADD_D            38C4
ORLAID              8090
ORLAID_D            38AC
ORLAPD              8098
ORLAPD_D            38B8
ORLDAD              81A0
ORLDAD_D            38E8
ORLDAI              8190
ORLDAI_D            38D0
ORLDAP              8198
ORLDAP_D            38DC
ORLDD               8080
ORLDD_D             38A0
ORLDID_D            3924
ORLDL               81B9
ORLDLA_D            3918
ORLDW               81B8
ORLDWA_D            390C
ORLID               80BC
ORLLAD_D            3900
ORLLD               80B9
ORLWAD_D            38F4
ORLWD               80B8
ORWADD              8060
ORWADD_D            3834
ORWAID              8050
ORWAID_D            381C
ORWAPD              8058
ORWAPD_D            3828
ORWDAD              8160
ORWDAD_D            3858
ORWDAI              8150
ORWDAI_D            3840
ORWDAP              8158
ORWDAP_D            384C
ORWDD               8040
ORWDD_D             3810
ORWDID_D            3894
ORWDL               8179
ORWDLA_D            3888
ORWDW               8178
ORWDWA_D            387C
ORWID               807C
ORWLAD_D            3870
ORWLD               8079
ORWWAD_D            3864
ORWWD               8078
OUTPUT              4254
PODEST              605E
POSRCAADEST         5B64
POSRCADEST          5850
POSRCAIDEST         5984
POSRCDDEST          5758
POSRCIDEST          5A86
POSRCPODEST         5DD0
POSRCPRDEST         5C92
PRDEST              6059
PRINT8              32A6
PRINTAADST          5E1C
PRINTAASRC          5E04
PRINTCRLF           5E48
PRINTSTR            5E4E
PRINTZEROES         5E7C
PRSRC               6041
PRSRCAADEST         5B40
PRSRCADEST          5826
PRSRCAIDEST         5950
PRSRCDDEST          572E
PRSRCIDEST          5A5C
PRSRCPODEST         5D9C
PRSRCPRDEST         5C5E
RESTART             425A
ROLAI               E7D0
ROLAI_D             3520
ROLBD               E138
ROLBD_D             3548
ROLBI               E118
ROLBI_D             3560
ROLLA               E7F9
ROLLA_D             3540
ROLLD               E1B8
ROLLD_D             3558
ROLLI               E198
ROLLI_D             3570
ROLPD               E7E0
ROLPD_D             3530
ROLPI               E7D8
ROLPI_D             3528
ROLWA               E7F8
ROLWA_D             3538
ROLWD               E178
ROLWD_D             3550
ROLWI               E158
ROLWI_D             3568
RORAI               E6D0
RORAI_D             3578
RORBD               E038
RORBD_D             35A0
RORBI               E018
RORBI_D             35B8
RORLA               E6F9
RORLA_D             3598
RORLD               E0B8
RORLD_D             35B0
RORLI               E098
RORLI_D             35C8
RORPD               E6E0
RORPD_D             3588
RORPI               E6D8
RORPI_D             3580
RORWA               E6F8
RORWA_D             3590
RORWD               E078
RORWD_D             35A8
RORWI               E058
RORWI_D             35C0
RSDIMASK            F1F8
RSEAMASK            FFF8
RTSCO               4E75
RTS_D               3936
SADDAL              60AF
SADDAW              60A8
SADDB               6096
SADDL               60A2
SADDQB              60B6
SADDQL              60C4
SADDQW              60BD
SADDW               609C
SANDB               60F3
SANDL               60FF
SANDW               60F9
SASL                612C
SASLB               6130
SASLL               613C
SASLW               6136
SASR                6142
SASRB               6146
SASRL               6152
SASRW               614C
SBEQ                6124
SBGT                611C
SBLE                6120
SBRA                6128
SECONDOP            5E3E
SJSR                6114
SLEA                60DD
SLSL                6158
SLSLB               615C
SLSLL               6168
SLSLW               6162
SLSR                616E
SLSRB               6172
SLSRL               617E
SLSRW               6178
SMOVEAL             6088
SMOVEAW             6080
SMOVEB              606B
SMOVEL              6079
SMOVEQ              6090
SMOVEW              6072
SNOP                6067
SNOTB               60E1
SNOTL               60ED
SNOTW               60E7
SORB                6105
SORL                610F
SORW                610A
SOURCE_DREG_D       3226
SOURCE_LA_D         3220
SOURCE_REG_D        3210
SOURCE_WA_D         321A
SROL                6184
SROLB               6188
SROLL               6194
SROLW               618E
SROR                619A
SRORB               619E
SRORL               61AA
SRORW               61A4
SRTS                6118
SSUBB               60CB
SSUBL               60D7
SSUBW               60D1
START               1000
STARTAGAIN          5FC6
SUBBAD              9110
SUBBADD             9120
SUBBADD_DECODE      4200
SUBBAD_DECODE       41D0
SUBBAPD             9118
SUBBAPD_DECODE      41E8
SUBBDAD             9020
SUBBDAD_DECODE      4164
SUBBDAI             9010
SUBBDAI_DECODE      4134
SUBBDAP             9010
SUBBDAP_DECODE      414C
SUBBDD              9000
SUBBDD_DECODE       411C
SUBBDI              903C
SUBBDI_DECODE       41B8
SUBBDL              9039
SUBBDL_DECODE       419A
SUBBDW              9038
SUBBDW_DECODE       417C
SUBBLD              9139
SUBBLD_DECODE       4236
SUBBWD              9138
SUBBWD_DECODE       4218
SUBLAD              9190
SUBLADD             91A0
SUBLADD_DECODE      4210
SUBLAD_DECODE       41E0
SUBLAPD             9198
SUBLAPD_DECODE      41F8
SUBLDA              9088
SUBLDAD             90A0
SUBLDAD_DECODE      4174
SUBLDAI             9090
SUBLDAI_DECODE      4144
SUBLDAP             9098
SUBLDAP_DECODE      415C
SUBLDA_DECODE       4134
SUBLDD              9080
SUBLDD_DECODE       412C
SUBLDI              90BC
SUBLDI_DECODE       41C8
SUBLDL              90B9
SUBLDL_DECODE       41AE
SUBLDW              90B8
SUBLDW_DECODE       4190
SUBLLD              91B9
SUBLLD_DECODE       424A
SUBLWD              91B8
SUBLWD_DECODE       422C
SUBMASK             F1F8
SUBWAD              9150
SUBWADD             9160
SUBWADD_DECODE      4208
SUBWAD_DECODE       41D8
SUBWAPD             9158
SUBWAPD_DECODE      41F0
SUBWDA              9048
SUBWDAD             9060
SUBWDAD_DECODE      416C
SUBWDAI             9050
SUBWDAI_DECODE      413C
SUBWDAP             9058
SUBWDAP_DECODE      4154
SUBWDA_DECODE       4134
SUBWDD              9040
SUBWDD_DECODE       4124
SUBWDI              907C
SUBWDI_DECODE       41C0
SUBWDL              9079
SUBWDL_DECODE       41A4
SUBWDW              9078
SUBWDW_DECODE       4186
SUBWLD              9179
SUBWLD_DECODE       4240
SUBWWD              9178
SUBWWD_DECODE       4222
TB                  5EA6
WDIS                3266
WELCOME             5ED2
